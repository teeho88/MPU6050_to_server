
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008680  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  08008810  08008810  00018810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ddc  08008ddc  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08008ddc  08008ddc  00018ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008de4  08008de4  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008de4  08008de4  00018de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008de8  08008de8  00018de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08008dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          000003a8  200001f0  200001f0  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000598  20000598  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010b18  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002323  00000000  00000000  00030d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b58  00000000  00000000  00033060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ab8  00000000  00000000  00033bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f5d  00000000  00000000  00034670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ecc5  00000000  00000000  000565cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c77ae  00000000  00000000  00065292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012ca40  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004084  00000000  00000000  0012ca94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080087f8 	.word	0x080087f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	080087f8 	.word	0x080087f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <ESP_SendCommand>:
char *respond;
uint16_t lenBuffer;
uint8_t clientID = 0;

void ESP_SendCommand(char *cmd)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b09c      	sub	sp, #112	; 0x70
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	int len = strlen(cmd);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff f991 	bl	80001d0 <strlen>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
	char str[100] = {0};
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	2260      	movs	r2, #96	; 0x60
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f004 fde8 	bl	8005a94 <memset>
	sprintf(str,"%s\r\n",cmd);
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	4909      	ldr	r1, [pc, #36]	; (8000ef0 <ESP_SendCommand+0x50>)
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f005 fa53 	bl	8006378 <siprintf>
	HAL_UART_Transmit(&MyUart,(uint8_t*)str, len + 2, 100);
 8000ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	f107 0108 	add.w	r1, r7, #8
 8000ede:	2364      	movs	r3, #100	; 0x64
 8000ee0:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <ESP_SendCommand+0x54>)
 8000ee2:	f003 fc9a 	bl	800481a <HAL_UART_Transmit>
}
 8000ee6:	bf00      	nop
 8000ee8:	3770      	adds	r7, #112	; 0x70
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	08008810 	.word	0x08008810
 8000ef4:	2000020c 	.word	0x2000020c

08000ef8 <ESP_SetIP>:

void ESP_SetIP(uint8_t mode, char *ip)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b090      	sub	sp, #64	; 0x40
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
	char cmd[50] = {0};
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	222e      	movs	r2, #46	; 0x2e
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f004 fdbf 	bl	8005a94 <memset>
	if(mode == STA)
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d106      	bne.n	8000f2a <ESP_SetIP+0x32>
	{
		sprintf(cmd,"AT+CIPSTA=\"%s\"",ip);
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	490d      	ldr	r1, [pc, #52]	; (8000f58 <ESP_SetIP+0x60>)
 8000f24:	4618      	mov	r0, r3
 8000f26:	f005 fa27 	bl	8006378 <siprintf>
	}
	if(mode == AP)
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d106      	bne.n	8000f3e <ESP_SetIP+0x46>
	{
		sprintf(cmd,"AT+CIPAP=\"%s\"",ip);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	4909      	ldr	r1, [pc, #36]	; (8000f5c <ESP_SetIP+0x64>)
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f005 fa1d 	bl	8006378 <siprintf>
	}
	ESP_SendCommand(cmd);
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ffac 	bl	8000ea0 <ESP_SendCommand>
	HAL_Delay(50);
 8000f48:	2032      	movs	r0, #50	; 0x32
 8000f4a:	f001 f967 	bl	800221c <HAL_Delay>
}
 8000f4e:	bf00      	nop
 8000f50:	3740      	adds	r7, #64	; 0x40
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	08008818 	.word	0x08008818
 8000f5c:	08008828 	.word	0x08008828

08000f60 <ESP_Init>:

void ESP_Init(UART_HandleTypeDef *huart, uint8_t mode, uint8_t *inBuff, uint16_t len)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b092      	sub	sp, #72	; 0x48
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	72fb      	strb	r3, [r7, #11]
 8000f70:	4613      	mov	r3, r2
 8000f72:	813b      	strh	r3, [r7, #8]
	respond  = (char*)inBuff;
 8000f74:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <ESP_Init+0x9c>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
	lenBuffer = len;
 8000f7a:	4a21      	ldr	r2, [pc, #132]	; (8001000 <ESP_Init+0xa0>)
 8000f7c:	893b      	ldrh	r3, [r7, #8]
 8000f7e:	8013      	strh	r3, [r2, #0]
	memcpy(&MyUart,huart,sizeof(*huart));
 8000f80:	2244      	movs	r2, #68	; 0x44
 8000f82:	68f9      	ldr	r1, [r7, #12]
 8000f84:	481f      	ldr	r0, [pc, #124]	; (8001004 <ESP_Init+0xa4>)
 8000f86:	f004 fd77 	bl	8005a78 <memcpy>
	ESP_CloseTransparent();  // close transparent if it is running 
 8000f8a:	f000 f8f1 	bl	8001170 <ESP_CloseTransparent>
	char cmd[50] = {0};
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	f107 0318 	add.w	r3, r7, #24
 8000f96:	222e      	movs	r2, #46	; 0x2e
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f004 fd7a 	bl	8005a94 <memset>
	sprintf(cmd,"AT+CWMODE=%d",mode);
 8000fa0:	7afa      	ldrb	r2, [r7, #11]
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4918      	ldr	r1, [pc, #96]	; (8001008 <ESP_Init+0xa8>)
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f005 f9e5 	bl	8006378 <siprintf>
	ESP_SendCommand(cmd);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ff74 	bl	8000ea0 <ESP_SendCommand>
	HAL_Delay(50);
 8000fb8:	2032      	movs	r0, #50	; 0x32
 8000fba:	f001 f92f 	bl	800221c <HAL_Delay>
	switch(mode)
 8000fbe:	7afb      	ldrb	r3, [r7, #11]
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d010      	beq.n	8000fe6 <ESP_Init+0x86>
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	dc13      	bgt.n	8000ff0 <ESP_Init+0x90>
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d002      	beq.n	8000fd2 <ESP_Init+0x72>
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d005      	beq.n	8000fdc <ESP_Init+0x7c>
							break;
		case AP:  ESP_SetIP(AP, IP);
							break;
		case STA_AP: ESP_SetIP(STA,IP);
								 break;
		default: break;
 8000fd0:	e00e      	b.n	8000ff0 <ESP_Init+0x90>
		case STA: ESP_SetIP(STA,IP);
 8000fd2:	490e      	ldr	r1, [pc, #56]	; (800100c <ESP_Init+0xac>)
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f7ff ff8f 	bl	8000ef8 <ESP_SetIP>
							break;
 8000fda:	e00a      	b.n	8000ff2 <ESP_Init+0x92>
		case AP:  ESP_SetIP(AP, IP);
 8000fdc:	490b      	ldr	r1, [pc, #44]	; (800100c <ESP_Init+0xac>)
 8000fde:	2002      	movs	r0, #2
 8000fe0:	f7ff ff8a 	bl	8000ef8 <ESP_SetIP>
							break;
 8000fe4:	e005      	b.n	8000ff2 <ESP_Init+0x92>
		case STA_AP: ESP_SetIP(STA,IP);
 8000fe6:	4909      	ldr	r1, [pc, #36]	; (800100c <ESP_Init+0xac>)
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f7ff ff85 	bl	8000ef8 <ESP_SetIP>
								 break;
 8000fee:	e000      	b.n	8000ff2 <ESP_Init+0x92>
		default: break;
 8000ff0:	bf00      	nop
	}
}
 8000ff2:	bf00      	nop
 8000ff4:	3748      	adds	r7, #72	; 0x48
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200002c4 	.word	0x200002c4
 8001000:	200002c0 	.word	0x200002c0
 8001004:	2000020c 	.word	0x2000020c
 8001008:	08008838 	.word	0x08008838
 800100c:	08008848 	.word	0x08008848

08001010 <ESP_WifiConnect>:

void ESP_WifiConnect(char *ssid, char *pass)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b09c      	sub	sp, #112	; 0x70
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	char cmd[100] = {0};
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	f107 0310 	add.w	r3, r7, #16
 8001022:	2260      	movs	r2, #96	; 0x60
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f004 fd34 	bl	8005a94 <memset>
	sprintf(cmd,"AT+CWJAP=\"%s\",\"%s\"",ssid,pass);
 800102c:	f107 000c 	add.w	r0, r7, #12
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	490d      	ldr	r1, [pc, #52]	; (800106c <ESP_WifiConnect+0x5c>)
 8001036:	f005 f99f 	bl	8006378 <siprintf>
	while(1)
	{
	  ESP_SendCommand(cmd);
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff2e 	bl	8000ea0 <ESP_SendCommand>
		HAL_Delay(500);
 8001044:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001048:	f001 f8e8 	bl	800221c <HAL_Delay>
		if(strstr(respond,"CONNECTED")) break;
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <ESP_WifiConnect+0x60>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4908      	ldr	r1, [pc, #32]	; (8001074 <ESP_WifiConnect+0x64>)
 8001052:	4618      	mov	r0, r3
 8001054:	f005 f9bd 	bl	80063d2 <strstr>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d100      	bne.n	8001060 <ESP_WifiConnect+0x50>
	  ESP_SendCommand(cmd);
 800105e:	e7ec      	b.n	800103a <ESP_WifiConnect+0x2a>
		if(strstr(respond,"CONNECTED")) break;
 8001060:	bf00      	nop
	}
}
 8001062:	bf00      	nop
 8001064:	3770      	adds	r7, #112	; 0x70
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	08008858 	.word	0x08008858
 8001070:	200002c4 	.word	0x200002c4
 8001074:	0800886c 	.word	0x0800886c

08001078 <ESP_CheckWifiConnect>:
  ESP_SendCommand(cmd);
	HAL_Delay(50);
}

HAL_StatusTypeDef ESP_CheckWifiConnect(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	ESP_SendCommand("AT+CWJAP?");
 800107c:	4817      	ldr	r0, [pc, #92]	; (80010dc <ESP_CheckWifiConnect+0x64>)
 800107e:	f7ff ff0f 	bl	8000ea0 <ESP_SendCommand>
	HAL_Delay(1000);
 8001082:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001086:	f001 f8c9 	bl	800221c <HAL_Delay>
	if(strstr(respond,"+CWJAP:")) return HAL_OK;
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <ESP_CheckWifiConnect+0x68>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4915      	ldr	r1, [pc, #84]	; (80010e4 <ESP_CheckWifiConnect+0x6c>)
 8001090:	4618      	mov	r0, r3
 8001092:	f005 f99e 	bl	80063d2 <strstr>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <ESP_CheckWifiConnect+0x28>
 800109c:	2300      	movs	r3, #0
 800109e:	e01b      	b.n	80010d8 <ESP_CheckWifiConnect+0x60>
	else if(strstr(respond,"No AP"))
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <ESP_CheckWifiConnect+0x68>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4910      	ldr	r1, [pc, #64]	; (80010e8 <ESP_CheckWifiConnect+0x70>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f005 f993 	bl	80063d2 <strstr>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d011      	beq.n	80010d6 <ESP_CheckWifiConnect+0x5e>
	{
		ESP_SendCommand("AT+CWJAP?");
 80010b2:	480a      	ldr	r0, [pc, #40]	; (80010dc <ESP_CheckWifiConnect+0x64>)
 80010b4:	f7ff fef4 	bl	8000ea0 <ESP_SendCommand>
		HAL_Delay(1000);
 80010b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010bc:	f001 f8ae 	bl	800221c <HAL_Delay>
		if(strstr(respond,"No AP")) return HAL_ERROR;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <ESP_CheckWifiConnect+0x68>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4908      	ldr	r1, [pc, #32]	; (80010e8 <ESP_CheckWifiConnect+0x70>)
 80010c6:	4618      	mov	r0, r3
 80010c8:	f005 f983 	bl	80063d2 <strstr>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <ESP_CheckWifiConnect+0x5e>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <ESP_CheckWifiConnect+0x60>
	}
	return HAL_BUSY;
 80010d6:	2302      	movs	r3, #2
}
 80010d8:	4618      	mov	r0, r3
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	08008890 	.word	0x08008890
 80010e0:	200002c4 	.word	0x200002c4
 80010e4:	0800889c 	.word	0x0800889c
 80010e8:	080088a4 	.word	0x080088a4

080010ec <ESP_CloseConnect>:
{
	ESP_SendCommand("AT+CIPSERVER=0");
}

void ESP_CloseConnect(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08e      	sub	sp, #56	; 0x38
 80010f0:	af00      	add	r7, sp, #0
	if(transMode == SINGLE_CON) ESP_SendCommand("AT+CIPCLOSE");
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <ESP_CloseConnect+0x48>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d103      	bne.n	8001102 <ESP_CloseConnect+0x16>
 80010fa:	480f      	ldr	r0, [pc, #60]	; (8001138 <ESP_CloseConnect+0x4c>)
 80010fc:	f7ff fed0 	bl	8000ea0 <ESP_SendCommand>
	{
		char cmd[50] = {0};
		sprintf(cmd,"AT+CIPCLOSE=%d",clientID);
		ESP_SendCommand(cmd);
	}
}
 8001100:	e014      	b.n	800112c <ESP_CloseConnect+0x40>
		char cmd[50] = {0};
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	222e      	movs	r2, #46	; 0x2e
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f004 fcc0 	bl	8005a94 <memset>
		sprintf(cmd,"AT+CIPCLOSE=%d",clientID);
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <ESP_CloseConnect+0x50>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	4908      	ldr	r1, [pc, #32]	; (8001140 <ESP_CloseConnect+0x54>)
 800111e:	4618      	mov	r0, r3
 8001120:	f005 f92a 	bl	8006378 <siprintf>
		ESP_SendCommand(cmd);
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff feba 	bl	8000ea0 <ESP_SendCommand>
}
 800112c:	bf00      	nop
 800112e:	3738      	adds	r7, #56	; 0x38
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000250 	.word	0x20000250
 8001138:	08008904 	.word	0x08008904
 800113c:	20000251 	.word	0x20000251
 8001140:	08008910 	.word	0x08008910

08001144 <ESP_TransparentSend>:
	}
	TransparentProtocol = UDP_TRANS;
}

void ESP_TransparentSend(char *data)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	int len = strlen(data);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff f83f 	bl	80001d0 <strlen>
 8001152:	4603      	mov	r3, r0
 8001154:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&MyUart,(uint8_t*)data, len, 100);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	b29a      	uxth	r2, r3
 800115a:	2364      	movs	r3, #100	; 0x64
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	4803      	ldr	r0, [pc, #12]	; (800116c <ESP_TransparentSend+0x28>)
 8001160:	f003 fb5b 	bl	800481a <HAL_UART_Transmit>
}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	2000020c 	.word	0x2000020c

08001170 <ESP_CloseTransparent>:

void ESP_CloseTransparent(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
	char str[3] = "+++";
 8001176:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <ESP_CloseTransparent+0x50>)
 8001178:	463b      	mov	r3, r7
 800117a:	6812      	ldr	r2, [r2, #0]
 800117c:	4611      	mov	r1, r2
 800117e:	8019      	strh	r1, [r3, #0]
 8001180:	3302      	adds	r3, #2
 8001182:	0c12      	lsrs	r2, r2, #16
 8001184:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<3; i++)
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	e010      	b.n	80011ae <ESP_CloseTransparent+0x3e>
	{
		HAL_UART_Transmit(&MyUart,(uint8_t*)str, 3, 100);
 800118c:	4639      	mov	r1, r7
 800118e:	2364      	movs	r3, #100	; 0x64
 8001190:	2203      	movs	r2, #3
 8001192:	480c      	ldr	r0, [pc, #48]	; (80011c4 <ESP_CloseTransparent+0x54>)
 8001194:	f003 fb41 	bl	800481a <HAL_UART_Transmit>
		HAL_Delay(50);
 8001198:	2032      	movs	r0, #50	; 0x32
 800119a:	f001 f83f 	bl	800221c <HAL_Delay>
		ESP_CloseConnect();
 800119e:	f7ff ffa5 	bl	80010ec <ESP_CloseConnect>
		HAL_Delay(50);
 80011a2:	2032      	movs	r0, #50	; 0x32
 80011a4:	f001 f83a 	bl	800221c <HAL_Delay>
	for(int i = 0; i<3; i++)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3301      	adds	r3, #1
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	ddeb      	ble.n	800118c <ESP_CloseTransparent+0x1c>
	}
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	08008970 	.word	0x08008970
 80011c4:	2000020c 	.word	0x2000020c

080011c8 <ESP_TCP_CreateTransparentMode>:

void ESP_TCP_CreateTransparentMode(char *ip, uint16_t server_port)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b09c      	sub	sp, #112	; 0x70
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
	memset(respond,0,lenBuffer);
 80011d4:	4b2e      	ldr	r3, [pc, #184]	; (8001290 <ESP_TCP_CreateTransparentMode+0xc8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a2e      	ldr	r2, [pc, #184]	; (8001294 <ESP_TCP_CreateTransparentMode+0xcc>)
 80011da:	8812      	ldrh	r2, [r2, #0]
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f004 fc58 	bl	8005a94 <memset>
	ESP_SendCommand("AT+CIPMUX=0");
 80011e4:	482c      	ldr	r0, [pc, #176]	; (8001298 <ESP_TCP_CreateTransparentMode+0xd0>)
 80011e6:	f7ff fe5b 	bl	8000ea0 <ESP_SendCommand>
	transMode = SINGLE_CON;
 80011ea:	4b2c      	ldr	r3, [pc, #176]	; (800129c <ESP_TCP_CreateTransparentMode+0xd4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 80011f0:	2032      	movs	r0, #50	; 0x32
 80011f2:	f001 f813 	bl	800221c <HAL_Delay>
	ESP_SendCommand("AT+CIPMODE=1");
 80011f6:	482a      	ldr	r0, [pc, #168]	; (80012a0 <ESP_TCP_CreateTransparentMode+0xd8>)
 80011f8:	f7ff fe52 	bl	8000ea0 <ESP_SendCommand>
	HAL_Delay(50);
 80011fc:	2032      	movs	r0, #50	; 0x32
 80011fe:	f001 f80d 	bl	800221c <HAL_Delay>
	char cmd[100] = {0};
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	f107 0310 	add.w	r3, r7, #16
 800120a:	2260      	movs	r2, #96	; 0x60
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f004 fc40 	bl	8005a94 <memset>
	sprintf(cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d",ip,server_port);
 8001214:	887b      	ldrh	r3, [r7, #2]
 8001216:	f107 000c 	add.w	r0, r7, #12
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	4921      	ldr	r1, [pc, #132]	; (80012a4 <ESP_TCP_CreateTransparentMode+0xdc>)
 800121e:	f005 f8ab 	bl	8006378 <siprintf>
	ESP_SendCommand(cmd);
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fe3a 	bl	8000ea0 <ESP_SendCommand>
	HAL_Delay(50);
 800122c:	2032      	movs	r0, #50	; 0x32
 800122e:	f000 fff5 	bl	800221c <HAL_Delay>
	while(!strstr(respond,"CONNECT"))
 8001232:	e007      	b.n	8001244 <ESP_TCP_CreateTransparentMode+0x7c>
	{
		ESP_SendCommand(cmd);
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fe31 	bl	8000ea0 <ESP_SendCommand>
		HAL_Delay(50);
 800123e:	2032      	movs	r0, #50	; 0x32
 8001240:	f000 ffec 	bl	800221c <HAL_Delay>
	while(!strstr(respond,"CONNECT"))
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <ESP_TCP_CreateTransparentMode+0xc8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4917      	ldr	r1, [pc, #92]	; (80012a8 <ESP_TCP_CreateTransparentMode+0xe0>)
 800124a:	4618      	mov	r0, r3
 800124c:	f005 f8c1 	bl	80063d2 <strstr>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0ee      	beq.n	8001234 <ESP_TCP_CreateTransparentMode+0x6c>
	}
	ESP_SendCommand("AT+CIPSEND");
 8001256:	4815      	ldr	r0, [pc, #84]	; (80012ac <ESP_TCP_CreateTransparentMode+0xe4>)
 8001258:	f7ff fe22 	bl	8000ea0 <ESP_SendCommand>
	HAL_Delay(50);
 800125c:	2032      	movs	r0, #50	; 0x32
 800125e:	f000 ffdd 	bl	800221c <HAL_Delay>
	while(!strstr(respond,">"))
 8001262:	e005      	b.n	8001270 <ESP_TCP_CreateTransparentMode+0xa8>
	{
		ESP_SendCommand("AT+CIPSEND");
 8001264:	4811      	ldr	r0, [pc, #68]	; (80012ac <ESP_TCP_CreateTransparentMode+0xe4>)
 8001266:	f7ff fe1b 	bl	8000ea0 <ESP_SendCommand>
		HAL_Delay(50);
 800126a:	2032      	movs	r0, #50	; 0x32
 800126c:	f000 ffd6 	bl	800221c <HAL_Delay>
	while(!strstr(respond,">"))
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <ESP_TCP_CreateTransparentMode+0xc8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	213e      	movs	r1, #62	; 0x3e
 8001276:	4618      	mov	r0, r3
 8001278:	f005 f89e 	bl	80063b8 <strchr>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f0      	beq.n	8001264 <ESP_TCP_CreateTransparentMode+0x9c>
	}
	TransparentProtocol = TCP_TRANS;
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <ESP_TCP_CreateTransparentMode+0xe8>)
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
}
 8001288:	bf00      	nop
 800128a:	3770      	adds	r7, #112	; 0x70
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200002c4 	.word	0x200002c4
 8001294:	200002c0 	.word	0x200002c0
 8001298:	08008920 	.word	0x08008920
 800129c:	20000250 	.word	0x20000250
 80012a0:	0800892c 	.word	0x0800892c
 80012a4:	08008974 	.word	0x08008974
 80012a8:	0800895c 	.word	0x0800895c
 80012ac:	08008964 	.word	0x08008964
 80012b0:	20000000 	.word	0x20000000

080012b4 <MPU6050_Init>:
float accel_reg_bias[3];
float gyr_reg_bias[3];
//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd, MPU_ConfigTypeDef *mpuCon)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 80012be:	2254      	movs	r2, #84	; 0x54
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MPU6050_Init+0x24>)
 80012c4:	f004 fbd8 	bl	8005a78 <memcpy>
	//MPU config handle to local library
	MpuConfig = mpuCon;
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <MPU6050_Init+0x28>)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	6013      	str	r3, [r2, #0]
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000254 	.word	0x20000254
 80012dc:	200002ec 	.word	0x200002ec

080012e0 <I2C_Read>:

//2- i2c Read
HAL_StatusTypeDef I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	71fb      	strb	r3, [r7, #7]
 80012ec:	4613      	mov	r3, r2
 80012ee:	71bb      	strb	r3, [r7, #6]
	uint8_t MPUADDR;
	uint8_t i2cBuf[2] = {0};
 80012f0:	2300      	movs	r3, #0
 80012f2:	81bb      	strh	r3, [r7, #12]
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 80012f4:	23d0      	movs	r3, #208	; 0xd0
 80012f6:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	733b      	strb	r3, [r7, #12]
	if(HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 5)!= HAL_OK) return HAL_ERROR;
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	b299      	uxth	r1, r3
 8001300:	f107 020c 	add.w	r2, r7, #12
 8001304:	2305      	movs	r3, #5
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2301      	movs	r3, #1
 800130a:	480e      	ldr	r0, [pc, #56]	; (8001344 <I2C_Read+0x64>)
 800130c:	f001 ff9e 	bl	800324c <HAL_I2C_Master_Transmit>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <I2C_Read+0x3a>
 8001316:	2301      	movs	r3, #1
 8001318:	e00f      	b.n	800133a <I2C_Read+0x5a>
	if(HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 5)!= HAL_OK) return HAL_ERROR;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	b299      	uxth	r1, r3
 800131e:	79bb      	ldrb	r3, [r7, #6]
 8001320:	b29b      	uxth	r3, r3
 8001322:	2205      	movs	r2, #5
 8001324:	9200      	str	r2, [sp, #0]
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	4806      	ldr	r0, [pc, #24]	; (8001344 <I2C_Read+0x64>)
 800132a:	f002 f88d 	bl	8003448 <HAL_I2C_Master_Receive>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <I2C_Read+0x58>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <I2C_Read+0x5a>
	return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000254 	.word	0x20000254

08001348 <I2C_Write8>:

//3- i2c Write
HAL_StatusTypeDef I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af02      	add	r7, sp, #8
 800134e:	4603      	mov	r3, r0
 8001350:	460a      	mov	r2, r1
 8001352:	71fb      	strb	r3, [r7, #7]
 8001354:	4613      	mov	r3, r2
 8001356:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2] = {0};
 8001358:	2300      	movs	r3, #0
 800135a:	81bb      	strh	r3, [r7, #12]
	i2cData[0] = ADDR;
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8001360:	79bb      	ldrb	r3, [r7, #6]
 8001362:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8001364:	23d0      	movs	r3, #208	; 0xd0
 8001366:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,5)!= HAL_OK) return HAL_ERROR;
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	b299      	uxth	r1, r3
 800136c:	f107 020c 	add.w	r2, r7, #12
 8001370:	2305      	movs	r3, #5
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2302      	movs	r3, #2
 8001376:	4806      	ldr	r0, [pc, #24]	; (8001390 <I2C_Write8+0x48>)
 8001378:	f001 ff68 	bl	800324c <HAL_I2C_Master_Transmit>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <I2C_Write8+0x3e>
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <I2C_Write8+0x40>
	return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000254 	.word	0x20000254

08001394 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
	uint8_t Buffer = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	71fb      	strb	r3, [r7, #7]
	float PI = 3.14159f;
 800139e:	4b63      	ldr	r3, [pc, #396]	; (800152c <MPU6050_Config+0x198>)
 80013a0:	603b      	str	r3, [r7, #0]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 80013a2:	2180      	movs	r1, #128	; 0x80
 80013a4:	206b      	movs	r0, #107	; 0x6b
 80013a6:	f7ff ffcf 	bl	8001348 <I2C_Write8>
	HAL_Delay(100);
 80013aa:	2064      	movs	r0, #100	; 0x64
 80013ac:	f000 ff36 	bl	800221c <HAL_Delay>
	Buffer = MpuConfig ->ClockSource & 0x07; //change the 7th bits of register
 80013b0:	4b5f      	ldr	r3, [pc, #380]	; (8001530 <MPU6050_Config+0x19c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	71fb      	strb	r3, [r7, #7]
	Buffer |= (MpuConfig ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 80013bc:	4b5c      	ldr	r3, [pc, #368]	; (8001530 <MPU6050_Config+0x19c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	791b      	ldrb	r3, [r3, #4]
 80013c2:	019b      	lsls	r3, r3, #6
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ca:	b25a      	sxtb	r2, r3
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	4619      	mov	r1, r3
 80013da:	206b      	movs	r0, #107	; 0x6b
 80013dc:	f7ff ffb4 	bl	8001348 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 80013e0:	2064      	movs	r0, #100	; 0x64
 80013e2:	f000 ff1b 	bl	800221c <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	71fb      	strb	r3, [r7, #7]
	Buffer = MpuConfig->CONFIG_DLPF & 0x07;
 80013ea:	4b51      	ldr	r3, [pc, #324]	; (8001530 <MPU6050_Config+0x19c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	78db      	ldrb	r3, [r3, #3]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(CONFIG_REG, Buffer);
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	4619      	mov	r1, r3
 80013fa:	201a      	movs	r0, #26
 80013fc:	f7ff ffa4 	bl	8001348 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	71fb      	strb	r3, [r7, #7]
	Buffer = (MpuConfig->Gyro_Full_Scale << 3) & 0x18;
 8001404:	4b4a      	ldr	r3, [pc, #296]	; (8001530 <MPU6050_Config+0x19c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	785b      	ldrb	r3, [r3, #1]
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	b2db      	uxtb	r3, r3
 800140e:	f003 0318 	and.w	r3, r3, #24
 8001412:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	4619      	mov	r1, r3
 8001418:	201b      	movs	r0, #27
 800141a:	f7ff ff95 	bl	8001348 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 800141e:	2300      	movs	r3, #0
 8001420:	71fb      	strb	r3, [r7, #7]
	Buffer = (MpuConfig->Accel_Full_Scale << 3) & 0x18;
 8001422:	4b43      	ldr	r3, [pc, #268]	; (8001530 <MPU6050_Config+0x19c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	789b      	ldrb	r3, [r3, #2]
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	b2db      	uxtb	r3, r3
 800142c:	f003 0318 	and.w	r3, r3, #24
 8001430:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4619      	mov	r1, r3
 8001436:	201c      	movs	r0, #28
 8001438:	f7ff ff86 	bl	8001348 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 800143c:	2004      	movs	r0, #4
 800143e:	f000 f887 	bl	8001550 <MPU6050_Set_SMPRT_DIV>
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (MpuConfig->Accel_Full_Scale)
 8001442:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <MPU6050_Config+0x19c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	789b      	ldrb	r3, [r3, #2]
 8001448:	2b03      	cmp	r3, #3
 800144a:	d81f      	bhi.n	800148c <MPU6050_Config+0xf8>
 800144c:	a201      	add	r2, pc, #4	; (adr r2, 8001454 <MPU6050_Config+0xc0>)
 800144e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001452:	bf00      	nop
 8001454:	08001465 	.word	0x08001465
 8001458:	0800146f 	.word	0x0800146f
 800145c:	08001479 	.word	0x08001479
 8001460:	08001483 	.word	0x08001483
	{
		case AFS_SEL_2g:
			accelScalingFactor = 2.00f/32768.00f;
 8001464:	4b33      	ldr	r3, [pc, #204]	; (8001534 <MPU6050_Config+0x1a0>)
 8001466:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800146a:	601a      	str	r2, [r3, #0]
			break;
 800146c:	e00f      	b.n	800148e <MPU6050_Config+0xfa>
		
		case AFS_SEL_4g:
			accelScalingFactor = 4.00f/32768.00f;
 800146e:	4b31      	ldr	r3, [pc, #196]	; (8001534 <MPU6050_Config+0x1a0>)
 8001470:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001474:	601a      	str	r2, [r3, #0]
				break;
 8001476:	e00a      	b.n	800148e <MPU6050_Config+0xfa>
		
		case AFS_SEL_8g:
			accelScalingFactor = 8.00f/32768.00f;
 8001478:	4b2e      	ldr	r3, [pc, #184]	; (8001534 <MPU6050_Config+0x1a0>)
 800147a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800147e:	601a      	str	r2, [r3, #0]
			break;
 8001480:	e005      	b.n	800148e <MPU6050_Config+0xfa>
		
		case AFS_SEL_16g:
			accelScalingFactor = 16.00f/32768.00f;
 8001482:	4b2c      	ldr	r3, [pc, #176]	; (8001534 <MPU6050_Config+0x1a0>)
 8001484:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001488:	601a      	str	r2, [r3, #0]
			break;
 800148a:	e000      	b.n	800148e <MPU6050_Config+0xfa>
		
		default:
			break;
 800148c:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (MpuConfig->Gyro_Full_Scale)
 800148e:	4b28      	ldr	r3, [pc, #160]	; (8001530 <MPU6050_Config+0x19c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	785b      	ldrb	r3, [r3, #1]
 8001494:	2b03      	cmp	r3, #3
 8001496:	d843      	bhi.n	8001520 <MPU6050_Config+0x18c>
 8001498:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <MPU6050_Config+0x10c>)
 800149a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149e:	bf00      	nop
 80014a0:	080014b1 	.word	0x080014b1
 80014a4:	080014cd 	.word	0x080014cd
 80014a8:	080014e9 	.word	0x080014e9
 80014ac:	08001505 	.word	0x08001505
	{
		case FS_SEL_250:
			gyroScalingFactor = (250.0f/32768.0f)*PI/180;
 80014b0:	edd7 7a00 	vldr	s15, [r7]
 80014b4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001538 <MPU6050_Config+0x1a4>
 80014b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014bc:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800153c <MPU6050_Config+0x1a8>
 80014c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c4:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <MPU6050_Config+0x1ac>)
 80014c6:	edc3 7a00 	vstr	s15, [r3]
			break;
 80014ca:	e02a      	b.n	8001522 <MPU6050_Config+0x18e>
		
		case FS_SEL_500:
				gyroScalingFactor = (500.0f/32768.0f)*PI/180;
 80014cc:	edd7 7a00 	vldr	s15, [r7]
 80014d0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001544 <MPU6050_Config+0x1b0>
 80014d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014d8:	eddf 6a18 	vldr	s13, [pc, #96]	; 800153c <MPU6050_Config+0x1a8>
 80014dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <MPU6050_Config+0x1ac>)
 80014e2:	edc3 7a00 	vstr	s15, [r3]
				break;
 80014e6:	e01c      	b.n	8001522 <MPU6050_Config+0x18e>
		
		case FS_SEL_1000:
			gyroScalingFactor = (1000.0f/32768.0f)*PI/180;
 80014e8:	edd7 7a00 	vldr	s15, [r7]
 80014ec:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001548 <MPU6050_Config+0x1b4>
 80014f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014f4:	eddf 6a11 	vldr	s13, [pc, #68]	; 800153c <MPU6050_Config+0x1a8>
 80014f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014fc:	4b10      	ldr	r3, [pc, #64]	; (8001540 <MPU6050_Config+0x1ac>)
 80014fe:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001502:	e00e      	b.n	8001522 <MPU6050_Config+0x18e>
		
		case FS_SEL_2000:
			gyroScalingFactor = (2000.0f/32768.0f)*PI/180;
 8001504:	edd7 7a00 	vldr	s15, [r7]
 8001508:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800154c <MPU6050_Config+0x1b8>
 800150c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001510:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800153c <MPU6050_Config+0x1a8>
 8001514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MPU6050_Config+0x1ac>)
 800151a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800151e:	e000      	b.n	8001522 <MPU6050_Config+0x18e>
		
		default:
			break;
 8001520:	bf00      	nop
	}
	
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40490fd0 	.word	0x40490fd0
 8001530:	200002ec 	.word	0x200002ec
 8001534:	200002f0 	.word	0x200002f0
 8001538:	3bfa0000 	.word	0x3bfa0000
 800153c:	43340000 	.word	0x43340000
 8001540:	200002e8 	.word	0x200002e8
 8001544:	3c7a0000 	.word	0x3c7a0000
 8001548:	3cfa0000 	.word	0x3cfa0000
 800154c:	3d7a0000 	.word	0x3d7a0000

08001550 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	4619      	mov	r1, r3
 800155e:	2019      	movs	r0, #25
 8001560:	f7ff fef2 	bl	8001348 <I2C_Write8>
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <ReadI2C_MPU>:
	I2C_Write8(CONFIG_REG, Buffer);	
}

//9- Get Accel Raw Data
HAL_StatusTypeDef ReadI2C_MPU(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
	uint8_t AcceArr[6];
	uint8_t GyroArr[6];
	if(I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6)== HAL_OK && I2C_Read(GYRO_XOUT_H_REG, GyroArr,6) == HAL_OK)
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	2206      	movs	r2, #6
 8001578:	4619      	mov	r1, r3
 800157a:	203b      	movs	r0, #59	; 0x3b
 800157c:	f7ff feb0 	bl	80012e0 <I2C_Read>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d140      	bne.n	8001608 <ReadI2C_MPU+0x9c>
 8001586:	463b      	mov	r3, r7
 8001588:	2206      	movs	r2, #6
 800158a:	4619      	mov	r1, r3
 800158c:	2043      	movs	r0, #67	; 0x43
 800158e:	f7ff fea7 	bl	80012e0 <I2C_Read>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d137      	bne.n	8001608 <ReadI2C_MPU+0x9c>
	{
		//Accel Raw Data
		Accel.x = (int16_t)((AcceArr[0]<<8) | AcceArr[1]);
 8001598:	7a3b      	ldrb	r3, [r7, #8]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b21a      	sxth	r2, r3
 800159e:	7a7b      	ldrb	r3, [r7, #9]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <ReadI2C_MPU+0xb0>)
 80015a8:	801a      	strh	r2, [r3, #0]
		Accel.y = (int16_t)((AcceArr[2]<<8) | AcceArr[3]);
 80015aa:	7abb      	ldrb	r3, [r7, #10]
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	7afb      	ldrb	r3, [r7, #11]
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <ReadI2C_MPU+0xb0>)
 80015ba:	805a      	strh	r2, [r3, #2]
		Accel.z = (int16_t)((AcceArr[4]<<8) | AcceArr[5]);
 80015bc:	7b3b      	ldrb	r3, [r7, #12]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	7b7b      	ldrb	r3, [r7, #13]
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	4313      	orrs	r3, r2
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <ReadI2C_MPU+0xb0>)
 80015cc:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		Gyro.x = (int16_t)((GyroArr[0]<<8) | GyroArr[1]);
 80015ce:	783b      	ldrb	r3, [r7, #0]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	787b      	ldrb	r3, [r7, #1]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	b21a      	sxth	r2, r3
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <ReadI2C_MPU+0xb4>)
 80015de:	801a      	strh	r2, [r3, #0]
		Gyro.y = (int16_t)((GyroArr[2]<<8) | GyroArr[3]);
 80015e0:	78bb      	ldrb	r3, [r7, #2]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <ReadI2C_MPU+0xb4>)
 80015f0:	805a      	strh	r2, [r3, #2]
		Gyro.z = (int16_t)((GyroArr[4]<<8) | GyroArr[5]);
 80015f2:	793b      	ldrb	r3, [r7, #4]
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	797b      	ldrb	r3, [r7, #5]
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	4313      	orrs	r3, r2
 80015fe:	b21a      	sxth	r2, r3
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <ReadI2C_MPU+0xb4>)
 8001602:	809a      	strh	r2, [r3, #4]
	{
		HAL_I2C_Init(&i2cHandler);
		MPU6050_Config();
		return HAL_ERROR;
	}
	return HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	e005      	b.n	8001614 <ReadI2C_MPU+0xa8>
		HAL_I2C_Init(&i2cHandler);
 8001608:	4806      	ldr	r0, [pc, #24]	; (8001624 <ReadI2C_MPU+0xb8>)
 800160a:	f001 fcdb 	bl	8002fc4 <HAL_I2C_Init>
		MPU6050_Config();
 800160e:	f7ff fec1 	bl	8001394 <MPU6050_Config>
		return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200002e0 	.word	0x200002e0
 8001620:	200002f4 	.word	0x200002f4
 8001624:	20000254 	.word	0x20000254

08001628 <Soft_GetOffset>:
	HAL_FLASH_Lock();
}

//13 - Get offset Soft
void Soft_GetOffset(void)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++)
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	e03c      	b.n	80016ae <Soft_GetOffset+0x86>
	{
		accel_reg_bias[i] = *((float*)((__IO uint32_t *)(startAddressFlash + 4*i)));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800163a:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4920      	ldr	r1, [pc, #128]	; (80016c4 <Soft_GetOffset+0x9c>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	601a      	str	r2, [r3, #0]
		if(isnan(accel_reg_bias[i])) accel_reg_bias[i] = 0;
 800164c:	4a1d      	ldr	r2, [pc, #116]	; (80016c4 <Soft_GetOffset+0x9c>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	eef4 7a67 	vcmp.f32	s15, s15
 800165c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001660:	d706      	bvc.n	8001670 <Soft_GetOffset+0x48>
 8001662:	4a18      	ldr	r2, [pc, #96]	; (80016c4 <Soft_GetOffset+0x9c>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
		gyr_reg_bias[i] = *((float*)((__IO uint32_t *)(startAddressFlash + 4*i + 12)));
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <Soft_GetOffset+0xa0>)
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4914      	ldr	r1, [pc, #80]	; (80016cc <Soft_GetOffset+0xa4>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	601a      	str	r2, [r3, #0]
		if(isnan(gyr_reg_bias[i])) gyr_reg_bias[i] = 0;
 8001684:	4a11      	ldr	r2, [pc, #68]	; (80016cc <Soft_GetOffset+0xa4>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	edd3 7a00 	vldr	s15, [r3]
 8001690:	eef4 7a67 	vcmp.f32	s15, s15
 8001694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001698:	d706      	bvc.n	80016a8 <Soft_GetOffset+0x80>
 800169a:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <Soft_GetOffset+0xa4>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 3; i++)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3301      	adds	r3, #1
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	ddbf      	ble.n	8001634 <Soft_GetOffset+0xc>
	}
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	200002c8 	.word	0x200002c8
 80016c8:	02038003 	.word	0x02038003
 80016cc:	200002d4 	.word	0x200002d4

080016d0 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
uint8_t rxRing[2*BUFFER_SIZE];
uint16_t rxLastPos = 0, rxThisPos = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a07      	ldr	r2, [pc, #28]	; (80016fc <HAL_UART_RxCpltCallback+0x2c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d108      	bne.n	80016f4 <HAL_UART_RxCpltCallback+0x24>
	{
		if (__HAL_UART_GET_FLAG (&huart1, UART_FLAG_IDLE))
 80016e2:	4b07      	ldr	r3, [pc, #28]	; (8001700 <HAL_UART_RxCpltCallback+0x30>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	2b10      	cmp	r3, #16
 80016ee:	d101      	bne.n	80016f4 <HAL_UART_RxCpltCallback+0x24>
		{
			UARTRxComplete();
 80016f0:	f000 f808 	bl	8001704 <UARTRxComplete>
		}
	}
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40011000 	.word	0x40011000
 8001700:	20000414 	.word	0x20000414

08001704 <UARTRxComplete>:

void UARTRxComplete(void) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
  uint16_t len;
  rxThisPos = sizeof(rxRing) - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx); //get current write pointer
 800170a:	4b23      	ldr	r3, [pc, #140]	; (8001798 <UARTRxComplete+0x94>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	b29b      	uxth	r3, r3
 8001712:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8001716:	b29a      	uxth	r2, r3
 8001718:	4b20      	ldr	r3, [pc, #128]	; (800179c <UARTRxComplete+0x98>)
 800171a:	801a      	strh	r2, [r3, #0]
  if(rxThisPos > rxLastPos)
 800171c:	4b1f      	ldr	r3, [pc, #124]	; (800179c <UARTRxComplete+0x98>)
 800171e:	881a      	ldrh	r2, [r3, #0]
 8001720:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <UARTRxComplete+0x9c>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d910      	bls.n	800174a <UARTRxComplete+0x46>
  {
	  len = rxThisPos - rxLastPos; //calculate how far the DMA write pointer has moved
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <UARTRxComplete+0x98>)
 800172a:	881a      	ldrh	r2, [r3, #0]
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <UARTRxComplete+0x9c>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	80fb      	strh	r3, [r7, #6]
	  memcpy(request, (rxRing + rxLastPos), len);
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <UARTRxComplete+0x9c>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <UARTRxComplete+0xa0>)
 800173c:	4413      	add	r3, r2
 800173e:	88fa      	ldrh	r2, [r7, #6]
 8001740:	4619      	mov	r1, r3
 8001742:	4819      	ldr	r0, [pc, #100]	; (80017a8 <UARTRxComplete+0xa4>)
 8001744:	f004 f998 	bl	8005a78 <memcpy>
 8001748:	e017      	b.n	800177a <UARTRxComplete+0x76>
  }
  else
  {
	  len = sizeof(rxRing) - rxLastPos;
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <UARTRxComplete+0x9c>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8001752:	80fb      	strh	r3, [r7, #6]
	  memcpy(request, (rxRing + rxLastPos), len);
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <UARTRxComplete+0x9c>)
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <UARTRxComplete+0xa0>)
 800175c:	4413      	add	r3, r2
 800175e:	88fa      	ldrh	r2, [r7, #6]
 8001760:	4619      	mov	r1, r3
 8001762:	4811      	ldr	r0, [pc, #68]	; (80017a8 <UARTRxComplete+0xa4>)
 8001764:	f004 f988 	bl	8005a78 <memcpy>
	  memcpy((request +  len), rxRing, rxThisPos);
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	4a0f      	ldr	r2, [pc, #60]	; (80017a8 <UARTRxComplete+0xa4>)
 800176c:	4413      	add	r3, r2
 800176e:	4a0b      	ldr	r2, [pc, #44]	; (800179c <UARTRxComplete+0x98>)
 8001770:	8812      	ldrh	r2, [r2, #0]
 8001772:	490c      	ldr	r1, [pc, #48]	; (80017a4 <UARTRxComplete+0xa0>)
 8001774:	4618      	mov	r0, r3
 8001776:	f004 f97f 	bl	8005a78 <memcpy>

  }
  memcpy(inCommand, request, sizeof(inCommand));
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <UARTRxComplete+0xa8>)
 800177c:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <UARTRxComplete+0xa4>)
 800177e:	6810      	ldr	r0, [r2, #0]
 8001780:	6018      	str	r0, [r3, #0]
 8001782:	8892      	ldrh	r2, [r2, #4]
 8001784:	809a      	strh	r2, [r3, #4]
  rxLastPos = rxThisPos;
 8001786:	4b05      	ldr	r3, [pc, #20]	; (800179c <UARTRxComplete+0x98>)
 8001788:	881a      	ldrh	r2, [r3, #0]
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <UARTRxComplete+0x9c>)
 800178c:	801a      	strh	r2, [r3, #0]
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000350 	.word	0x20000350
 800179c:	200002b0 	.word	0x200002b0
 80017a0:	200002ae 	.word	0x200002ae
 80017a4:	200004bc 	.word	0x200004bc
 80017a8:	20000458 	.word	0x20000458
 80017ac:	200002a8 	.word	0x200002a8

080017b0 <UARTRXInit>:

void UARTRXInit(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);   // enable idle line interrupt
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <UARTRXInit+0x34>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <UARTRXInit+0x34>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0210 	orr.w	r2, r2, #16
 80017c2:	60da      	str	r2, [r3, #12]
  hdma_usart1_rx.Instance->CR &= ~DMA_SxCR_HTIE;  // disable uart half tx interrupt
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <UARTRXInit+0x38>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <UARTRXInit+0x38>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0208 	bic.w	r2, r2, #8
 80017d2:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart1, rxRing, 2*BUFFER_SIZE);
 80017d4:	22c8      	movs	r2, #200	; 0xc8
 80017d6:	4905      	ldr	r1, [pc, #20]	; (80017ec <UARTRXInit+0x3c>)
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <UARTRXInit+0x34>)
 80017da:	f003 f8b0 	bl	800493e <HAL_UART_Receive_DMA>
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000414 	.word	0x20000414
 80017e8:	20000350 	.word	0x20000350
 80017ec:	200004bc 	.word	0x200004bc

080017f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017f4:	b09e      	sub	sp, #120	; 0x78
 80017f6:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017f8:	f000 fc9e 	bl	8002138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017fc:	f000 f938 	bl	8001a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001800:	f000 fa0c 	bl	8001c1c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001804:	f000 f992 	bl	8001b2c <MX_I2C1_Init>
  MX_DMA_Init();
 8001808:	f000 f9e8 	bl	8001bdc <MX_DMA_Init>
  MX_USART1_UART_Init();
 800180c:	f000 f9bc 	bl	8001b88 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //1. Initialise the MPU6050 module and I2C
  MPU6050_Init(&hi2c1, &myMpuConfig);
 8001810:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001814:	4619      	mov	r1, r3
 8001816:	4886      	ldr	r0, [pc, #536]	; (8001a30 <main+0x240>)
 8001818:	f7ff fd4c 	bl	80012b4 <MPU6050_Init>
  //2. Configure Accel and Gyro parameters
  myMpuConfig.Accel_Full_Scale = AFS_SEL_2g;
 800181c:	2300      	movs	r3, #0
 800181e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  myMpuConfig.ClockSource = Internal_8MHz;
 8001822:	2300      	movs	r3, #0
 8001824:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  myMpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 8001828:	2301      	movs	r3, #1
 800182a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
 800182e:	2301      	movs	r3, #1
 8001830:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  myMpuConfig.Sleep_Mode_Bit = 0;  //1: sleep mode, 0: normal mode
 8001834:	2300      	movs	r3, #0
 8001836:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MPU6050_Config();
 800183a:	f7ff fdab 	bl	8001394 <MPU6050_Config>
  //3. Calibrate MPU6050
  Soft_GetOffset();
 800183e:	f7ff fef3 	bl	8001628 <Soft_GetOffset>
  //4. Set communication to server
  UARTRXInit();
 8001842:	f7ff ffb5 	bl	80017b0 <UARTRXInit>
  ESP_Init(&huart1, STA_AP, (uint8_t*)request, BUFFER_SIZE);
 8001846:	2364      	movs	r3, #100	; 0x64
 8001848:	4a7a      	ldr	r2, [pc, #488]	; (8001a34 <main+0x244>)
 800184a:	2103      	movs	r1, #3
 800184c:	487a      	ldr	r0, [pc, #488]	; (8001a38 <main+0x248>)
 800184e:	f7ff fb87 	bl	8000f60 <ESP_Init>
  HAL_StatusTypeDef state = ESP_CheckWifiConnect();
 8001852:	f7ff fc11 	bl	8001078 <ESP_CheckWifiConnect>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  while(state != HAL_OK)
 800185c:	e011      	b.n	8001882 <main+0x92>
  {
	  if(state == HAL_ERROR)
 800185e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001862:	2b01      	cmp	r3, #1
 8001864:	d108      	bne.n	8001878 <main+0x88>
	  {
		  ESP_WifiConnect(myssid,mypass);
 8001866:	4b75      	ldr	r3, [pc, #468]	; (8001a3c <main+0x24c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a75      	ldr	r2, [pc, #468]	; (8001a40 <main+0x250>)
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fbcd 	bl	8001010 <ESP_WifiConnect>
		  break;
 8001876:	e008      	b.n	800188a <main+0x9a>
	  }
	  state = ESP_CheckWifiConnect();
 8001878:	f7ff fbfe 	bl	8001078 <ESP_CheckWifiConnect>
 800187c:	4603      	mov	r3, r0
 800187e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  while(state != HAL_OK)
 8001882:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1e9      	bne.n	800185e <main+0x6e>
  }
  ESP_TCP_CreateTransparentMode(serverIP, serverPort);
 800188a:	4b6e      	ldr	r3, [pc, #440]	; (8001a44 <main+0x254>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a6e      	ldr	r2, [pc, #440]	; (8001a48 <main+0x258>)
 8001890:	8812      	ldrh	r2, [r2, #0]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fc97 	bl	80011c8 <ESP_TCP_CreateTransparentMode>
  memset(inCommand,0,sizeof(inCommand));
 800189a:	2206      	movs	r2, #6
 800189c:	2100      	movs	r1, #0
 800189e:	486b      	ldr	r0, [pc, #428]	; (8001a4c <main+0x25c>)
 80018a0:	f004 f8f8 	bl	8005a94 <memset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int a[3] = {0}, g[3] = {0};
 80018a4:	f107 0320 	add.w	r3, r7, #32
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
	  float ax,ay,az,gx,gy,gz;
	  if(ReadI2C_MPU() == HAL_OK)
 80018bc:	f7ff fe56 	bl	800156c <ReadI2C_MPU>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1ee      	bne.n	80018a4 <main+0xb4>
	  {
		  a[0] = Accel.x;
 80018c6:	4b62      	ldr	r3, [pc, #392]	; (8001a50 <main+0x260>)
 80018c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018cc:	623b      	str	r3, [r7, #32]
		  a[1] = Accel.y;
 80018ce:	4b60      	ldr	r3, [pc, #384]	; (8001a50 <main+0x260>)
 80018d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
		  a[2] = Accel.z;
 80018d6:	4b5e      	ldr	r3, [pc, #376]	; (8001a50 <main+0x260>)
 80018d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
		  g[0] = Gyro.x;
 80018de:	4b5d      	ldr	r3, [pc, #372]	; (8001a54 <main+0x264>)
 80018e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e4:	617b      	str	r3, [r7, #20]
		  g[1] = Gyro.y;
 80018e6:	4b5b      	ldr	r3, [pc, #364]	; (8001a54 <main+0x264>)
 80018e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018ec:	61bb      	str	r3, [r7, #24]
		  g[2] = Gyro.z;
 80018ee:	4b59      	ldr	r3, [pc, #356]	; (8001a54 <main+0x264>)
 80018f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018f4:	61fb      	str	r3, [r7, #28]
		  ax = (a[0] + accel_reg_bias[0])*accelScalingFactor; ay = (a[1] + accel_reg_bias[1])*accelScalingFactor;
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	ee07 3a90 	vmov	s15, r3
 80018fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001900:	4b55      	ldr	r3, [pc, #340]	; (8001a58 <main+0x268>)
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	ee37 7a27 	vadd.f32	s14, s14, s15
 800190a:	4b54      	ldr	r3, [pc, #336]	; (8001a5c <main+0x26c>)
 800190c:	edd3 7a00 	vldr	s15, [r3]
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	ee07 3a90 	vmov	s15, r3
 800191e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001922:	4b4d      	ldr	r3, [pc, #308]	; (8001a58 <main+0x268>)
 8001924:	edd3 7a01 	vldr	s15, [r3, #4]
 8001928:	ee37 7a27 	vadd.f32	s14, s14, s15
 800192c:	4b4b      	ldr	r3, [pc, #300]	; (8001a5c <main+0x26c>)
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001936:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		  az = (a[2] + accel_reg_bias[2])*accelScalingFactor;
 800193a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193c:	ee07 3a90 	vmov	s15, r3
 8001940:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001944:	4b44      	ldr	r3, [pc, #272]	; (8001a58 <main+0x268>)
 8001946:	edd3 7a02 	vldr	s15, [r3, #8]
 800194a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800194e:	4b43      	ldr	r3, [pc, #268]	; (8001a5c <main+0x26c>)
 8001950:	edd3 7a00 	vldr	s15, [r3]
 8001954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001958:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		  gx = (g[0] + gyr_reg_bias[0])*gyroScalingFactor; gy = (g[1] + gyr_reg_bias[1])*gyroScalingFactor;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001966:	4b3e      	ldr	r3, [pc, #248]	; (8001a60 <main+0x270>)
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001970:	4b3c      	ldr	r3, [pc, #240]	; (8001a64 <main+0x274>)
 8001972:	edd3 7a00 	vldr	s15, [r3]
 8001976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	ee07 3a90 	vmov	s15, r3
 8001984:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001988:	4b35      	ldr	r3, [pc, #212]	; (8001a60 <main+0x270>)
 800198a:	edd3 7a01 	vldr	s15, [r3, #4]
 800198e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001992:	4b34      	ldr	r3, [pc, #208]	; (8001a64 <main+0x274>)
 8001994:	edd3 7a00 	vldr	s15, [r3]
 8001998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		  gz = (g[2] + gyr_reg_bias[2])*gyroScalingFactor;
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	ee07 3a90 	vmov	s15, r3
 80019a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019aa:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <main+0x270>)
 80019ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80019b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019b4:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <main+0x274>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019be:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		  sprintf(txdata,"!%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n",ax,ay,az,gx,gy,gz);
 80019c2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80019c4:	f7fe fdc0 	bl	8000548 <__aeabi_f2d>
 80019c8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80019cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80019ce:	f7fe fdbb 	bl	8000548 <__aeabi_f2d>
 80019d2:	4604      	mov	r4, r0
 80019d4:	460d      	mov	r5, r1
 80019d6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80019d8:	f7fe fdb6 	bl	8000548 <__aeabi_f2d>
 80019dc:	4680      	mov	r8, r0
 80019de:	4689      	mov	r9, r1
 80019e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80019e2:	f7fe fdb1 	bl	8000548 <__aeabi_f2d>
 80019e6:	4682      	mov	sl, r0
 80019e8:	468b      	mov	fp, r1
 80019ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80019ec:	f7fe fdac 	bl	8000548 <__aeabi_f2d>
 80019f0:	e9c7 0100 	strd	r0, r1, [r7]
 80019f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019f6:	f7fe fda7 	bl	8000548 <__aeabi_f2d>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001a02:	ed97 7b00 	vldr	d7, [r7]
 8001a06:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001a0a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001a0e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001a12:	e9cd 4500 	strd	r4, r5, [sp]
 8001a16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a1a:	4913      	ldr	r1, [pc, #76]	; (8001a68 <main+0x278>)
 8001a1c:	4813      	ldr	r0, [pc, #76]	; (8001a6c <main+0x27c>)
 8001a1e:	f004 fcab 	bl	8006378 <siprintf>
		  ESP_TransparentSend(txdata);
 8001a22:	4812      	ldr	r0, [pc, #72]	; (8001a6c <main+0x27c>)
 8001a24:	f7ff fb8e 	bl	8001144 <ESP_TransparentSend>
		  HAL_Delay(5);
 8001a28:	2005      	movs	r0, #5
 8001a2a:	f000 fbf7 	bl	800221c <HAL_Delay>
  {
 8001a2e:	e739      	b.n	80018a4 <main+0xb4>
 8001a30:	200002fc 	.word	0x200002fc
 8001a34:	20000458 	.word	0x20000458
 8001a38:	20000414 	.word	0x20000414
 8001a3c:	20000004 	.word	0x20000004
 8001a40:	20000008 	.word	0x20000008
 8001a44:	2000000c 	.word	0x2000000c
 8001a48:	20000010 	.word	0x20000010
 8001a4c:	200002a8 	.word	0x200002a8
 8001a50:	200002e0 	.word	0x200002e0
 8001a54:	200002f4 	.word	0x200002f4
 8001a58:	200002c8 	.word	0x200002c8
 8001a5c:	200002f0 	.word	0x200002f0
 8001a60:	200002d4 	.word	0x200002d4
 8001a64:	200002e8 	.word	0x200002e8
 8001a68:	080089b4 	.word	0x080089b4
 8001a6c:	200003b0 	.word	0x200003b0

08001a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b094      	sub	sp, #80	; 0x50
 8001a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a76:	f107 0320 	add.w	r3, r7, #32
 8001a7a:	2230      	movs	r2, #48	; 0x30
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f004 f808 	bl	8005a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a94:	2300      	movs	r3, #0
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <SystemClock_Config+0xb4>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	4a21      	ldr	r2, [pc, #132]	; (8001b24 <SystemClock_Config+0xb4>)
 8001a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <SystemClock_Config+0xb4>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <SystemClock_Config+0xb8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a1b      	ldr	r2, [pc, #108]	; (8001b28 <SystemClock_Config+0xb8>)
 8001aba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <SystemClock_Config+0xb8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001acc:	2302      	movs	r3, #2
 8001ace:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ad4:	2310      	movs	r3, #16
 8001ad6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001adc:	f107 0320 	add.w	r3, r7, #32
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f002 fa05 	bl	8003ef0 <HAL_RCC_OscConfig>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001aec:	f000 f8cc 	bl	8001c88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af0:	230f      	movs	r3, #15
 8001af2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001af4:	2300      	movs	r3, #0
 8001af6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f002 fc68 	bl	80043e0 <HAL_RCC_ClockConfig>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001b16:	f000 f8b7 	bl	8001c88 <Error_Handler>
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	3750      	adds	r7, #80	; 0x50
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40007000 	.word	0x40007000

08001b2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b32:	4a13      	ldr	r2, [pc, #76]	; (8001b80 <MX_I2C1_Init+0x54>)
 8001b34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b38:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <MX_I2C1_Init+0x58>)
 8001b3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b68:	4804      	ldr	r0, [pc, #16]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b6a:	f001 fa2b 	bl	8002fc4 <HAL_I2C_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b74:	f000 f888 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	200002fc 	.word	0x200002fc
 8001b80:	40005400 	.word	0x40005400
 8001b84:	00061a80 	.word	0x00061a80

08001b88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001b8e:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <MX_USART1_UART_Init+0x50>)
 8001b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001bae:	220c      	movs	r2, #12
 8001bb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <MX_USART1_UART_Init+0x4c>)
 8001bc0:	f002 fdde 	bl	8004780 <HAL_UART_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bca:	f000 f85d 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000414 	.word	0x20000414
 8001bd8:	40011000 	.word	0x40011000

08001bdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <MX_DMA_Init+0x3c>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a0b      	ldr	r2, [pc, #44]	; (8001c18 <MX_DMA_Init+0x3c>)
 8001bec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <MX_DMA_Init+0x3c>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	203a      	movs	r0, #58	; 0x3a
 8001c04:	f000 fc09 	bl	800241a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001c08:	203a      	movs	r0, #58	; 0x3a
 8001c0a:	f000 fc22 	bl	8002452 <HAL_NVIC_EnableIRQ>

}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800

08001c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <MX_GPIO_Init+0x68>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a16      	ldr	r2, [pc, #88]	; (8001c84 <MX_GPIO_Init+0x68>)
 8001c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <MX_GPIO_Init+0x68>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <MX_GPIO_Init+0x68>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a0f      	ldr	r2, [pc, #60]	; (8001c84 <MX_GPIO_Init+0x68>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <MX_GPIO_Init+0x68>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <MX_GPIO_Init+0x68>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a08      	ldr	r2, [pc, #32]	; (8001c84 <MX_GPIO_Init+0x68>)
 8001c64:	f043 0302 	orr.w	r3, r3, #2
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <MX_GPIO_Init+0x68>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	607b      	str	r3, [r7, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]

}
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800

08001c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c8c:	b672      	cpsid	i
}
 8001c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <Error_Handler+0x8>
	...

08001c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	4a0f      	ldr	r2, [pc, #60]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8001caa:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	603b      	str	r3, [r7, #0]
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800

08001ce4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_I2C_MspInit+0x84>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d12b      	bne.n	8001d5e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a17      	ldr	r2, [pc, #92]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d22:	23c0      	movs	r3, #192	; 0xc0
 8001d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d26:	2312      	movs	r3, #18
 8001d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d32:	2304      	movs	r3, #4
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	480c      	ldr	r0, [pc, #48]	; (8001d70 <HAL_I2C_MspInit+0x8c>)
 8001d3e:	f000 ffa5 	bl	8002c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4a08      	ldr	r2, [pc, #32]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d50:	6413      	str	r3, [r2, #64]	; 0x40
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d5e:	bf00      	nop
 8001d60:	3728      	adds	r7, #40	; 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40005400 	.word	0x40005400
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40020400 	.word	0x40020400

08001d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	; 0x28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a35      	ldr	r2, [pc, #212]	; (8001e68 <HAL_UART_MspInit+0xf4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d163      	bne.n	8001e5e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <HAL_UART_MspInit+0xf8>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	4a33      	ldr	r2, [pc, #204]	; (8001e6c <HAL_UART_MspInit+0xf8>)
 8001da0:	f043 0310 	orr.w	r3, r3, #16
 8001da4:	6453      	str	r3, [r2, #68]	; 0x44
 8001da6:	4b31      	ldr	r3, [pc, #196]	; (8001e6c <HAL_UART_MspInit+0xf8>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b2d      	ldr	r3, [pc, #180]	; (8001e6c <HAL_UART_MspInit+0xf8>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a2c      	ldr	r2, [pc, #176]	; (8001e6c <HAL_UART_MspInit+0xf8>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <HAL_UART_MspInit+0xf8>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001de0:	2307      	movs	r3, #7
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4619      	mov	r1, r3
 8001dea:	4821      	ldr	r0, [pc, #132]	; (8001e70 <HAL_UART_MspInit+0xfc>)
 8001dec:	f000 ff4e 	bl	8002c8c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001df0:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <HAL_UART_MspInit+0x100>)
 8001df2:	4a21      	ldr	r2, [pc, #132]	; (8001e78 <HAL_UART_MspInit+0x104>)
 8001df4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001df6:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <HAL_UART_MspInit+0x100>)
 8001df8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dfc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <HAL_UART_MspInit+0x100>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_UART_MspInit+0x100>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <HAL_UART_MspInit+0x100>)
 8001e0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e10:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <HAL_UART_MspInit+0x100>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e18:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <HAL_UART_MspInit+0x100>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001e1e:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <HAL_UART_MspInit+0x100>)
 8001e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e24:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e26:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <HAL_UART_MspInit+0x100>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <HAL_UART_MspInit+0x100>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e32:	4810      	ldr	r0, [pc, #64]	; (8001e74 <HAL_UART_MspInit+0x100>)
 8001e34:	f000 fb28 	bl	8002488 <HAL_DMA_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001e3e:	f7ff ff23 	bl	8001c88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a0b      	ldr	r2, [pc, #44]	; (8001e74 <HAL_UART_MspInit+0x100>)
 8001e46:	639a      	str	r2, [r3, #56]	; 0x38
 8001e48:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <HAL_UART_MspInit+0x100>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	2025      	movs	r0, #37	; 0x25
 8001e54:	f000 fae1 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e58:	2025      	movs	r0, #37	; 0x25
 8001e5a:	f000 fafa 	bl	8002452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e5e:	bf00      	nop
 8001e60:	3728      	adds	r7, #40	; 0x28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40011000 	.word	0x40011000
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020000 	.word	0x40020000
 8001e74:	20000350 	.word	0x20000350
 8001e78:	40026440 	.word	0x40026440

08001e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <NMI_Handler+0x4>

08001e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e86:	e7fe      	b.n	8001e86 <HardFault_Handler+0x4>

08001e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e8c:	e7fe      	b.n	8001e8c <MemManage_Handler+0x4>

08001e8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e92:	e7fe      	b.n	8001e92 <BusFault_Handler+0x4>

08001e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <UsageFault_Handler+0x4>

08001e9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec8:	f000 f988 	bl	80021dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ed6:	4811      	ldr	r0, [pc, #68]	; (8001f1c <USART1_IRQHandler+0x4c>)
 8001ed8:	f002 fd62 	bl	80049a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_IDLE) && __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <USART1_IRQHandler+0x4c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	f003 0310 	and.w	r3, r3, #16
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d014      	beq.n	8001f14 <USART1_IRQHandler+0x44>
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <USART1_IRQHandler+0x4c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	2b10      	cmp	r3, #16
 8001ef6:	d10d      	bne.n	8001f14 <USART1_IRQHandler+0x44>
  {
	  HAL_UART_RxCpltCallback (&huart1);
 8001ef8:	4808      	ldr	r0, [pc, #32]	; (8001f1c <USART1_IRQHandler+0x4c>)
 8001efa:	f7ff fbe9 	bl	80016d0 <HAL_UART_RxCpltCallback>
	  __HAL_UART_CLEAR_IDLEFLAG (&huart1);
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <USART1_IRQHandler+0x4c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <USART1_IRQHandler+0x4c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
  }
  /* USER CODE END USART1_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000414 	.word	0x20000414

08001f20 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <DMA2_Stream2_IRQHandler+0x10>)
 8001f26:	f000 fc47 	bl	80027b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000350 	.word	0x20000350

08001f34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
	return 1;
 8001f38:	2301      	movs	r3, #1
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <_kill>:

int _kill(int pid, int sig)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f4e:	f003 fd69 	bl	8005a24 <__errno>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2216      	movs	r2, #22
 8001f56:	601a      	str	r2, [r3, #0]
	return -1;
 8001f58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <_exit>:

void _exit (int status)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff ffe7 	bl	8001f44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f76:	e7fe      	b.n	8001f76 <_exit+0x12>

08001f78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	e00a      	b.n	8001fa0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f8a:	f3af 8000 	nop.w
 8001f8e:	4601      	mov	r1, r0
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	60ba      	str	r2, [r7, #8]
 8001f96:	b2ca      	uxtb	r2, r1
 8001f98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	dbf0      	blt.n	8001f8a <_read+0x12>
	}

return len;
 8001fa8:	687b      	ldr	r3, [r7, #4]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b086      	sub	sp, #24
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	e009      	b.n	8001fd8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	60ba      	str	r2, [r7, #8]
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	dbf1      	blt.n	8001fc4 <_write+0x12>
	}
	return len;
 8001fe0:	687b      	ldr	r3, [r7, #4]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <_close>:

int _close(int file)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002012:	605a      	str	r2, [r3, #4]
	return 0;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <_isatty>:

int _isatty(int file)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
	return 1;
 800202a:	2301      	movs	r3, #1
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
	return 0;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800205c:	4a14      	ldr	r2, [pc, #80]	; (80020b0 <_sbrk+0x5c>)
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <_sbrk+0x60>)
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <_sbrk+0x64>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d102      	bne.n	8002076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <_sbrk+0x64>)
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <_sbrk+0x68>)
 8002074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	429a      	cmp	r2, r3
 8002082:	d207      	bcs.n	8002094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002084:	f003 fcce 	bl	8005a24 <__errno>
 8002088:	4603      	mov	r3, r0
 800208a:	220c      	movs	r2, #12
 800208c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
 8002092:	e009      	b.n	80020a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <_sbrk+0x64>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <_sbrk+0x64>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <_sbrk+0x64>)
 80020a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020a6:	68fb      	ldr	r3, [r7, #12]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20020000 	.word	0x20020000
 80020b4:	00000400 	.word	0x00000400
 80020b8:	200002b4 	.word	0x200002b4
 80020bc:	20000598 	.word	0x20000598

080020c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <SystemInit+0x20>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ca:	4a05      	ldr	r2, [pc, #20]	; (80020e0 <SystemInit+0x20>)
 80020cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800211c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020e8:	480d      	ldr	r0, [pc, #52]	; (8002120 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020ea:	490e      	ldr	r1, [pc, #56]	; (8002124 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020ec:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f0:	e002      	b.n	80020f8 <LoopCopyDataInit>

080020f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f6:	3304      	adds	r3, #4

080020f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020fc:	d3f9      	bcc.n	80020f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fe:	4a0b      	ldr	r2, [pc, #44]	; (800212c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002100:	4c0b      	ldr	r4, [pc, #44]	; (8002130 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002104:	e001      	b.n	800210a <LoopFillZerobss>

08002106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002108:	3204      	adds	r2, #4

0800210a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800210a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800210c:	d3fb      	bcc.n	8002106 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800210e:	f7ff ffd7 	bl	80020c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002112:	f003 fc8d 	bl	8005a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002116:	f7ff fb6b 	bl	80017f0 <main>
  bx  lr    
 800211a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800211c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002124:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002128:	08008dec 	.word	0x08008dec
  ldr r2, =_sbss
 800212c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002130:	20000598 	.word	0x20000598

08002134 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002134:	e7fe      	b.n	8002134 <ADC_IRQHandler>
	...

08002138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800213c:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <HAL_Init+0x40>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0d      	ldr	r2, [pc, #52]	; (8002178 <HAL_Init+0x40>)
 8002142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002146:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_Init+0x40>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <HAL_Init+0x40>)
 800214e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002152:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <HAL_Init+0x40>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a07      	ldr	r2, [pc, #28]	; (8002178 <HAL_Init+0x40>)
 800215a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002160:	2003      	movs	r0, #3
 8002162:	f000 f94f 	bl	8002404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002166:	200f      	movs	r0, #15
 8002168:	f000 f808 	bl	800217c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800216c:	f7ff fd92 	bl	8001c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40023c00 	.word	0x40023c00

0800217c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_InitTick+0x54>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_InitTick+0x58>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	4619      	mov	r1, r3
 800218e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002192:	fbb3 f3f1 	udiv	r3, r3, r1
 8002196:	fbb2 f3f3 	udiv	r3, r2, r3
 800219a:	4618      	mov	r0, r3
 800219c:	f000 f967 	bl	800246e <HAL_SYSTICK_Config>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e00e      	b.n	80021c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b0f      	cmp	r3, #15
 80021ae:	d80a      	bhi.n	80021c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b0:	2200      	movs	r2, #0
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295
 80021b8:	f000 f92f 	bl	800241a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021bc:	4a06      	ldr	r2, [pc, #24]	; (80021d8 <HAL_InitTick+0x5c>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	e000      	b.n	80021c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000014 	.word	0x20000014
 80021d4:	2000001c 	.word	0x2000001c
 80021d8:	20000018 	.word	0x20000018

080021dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_IncTick+0x20>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_IncTick+0x24>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4413      	add	r3, r2
 80021ec:	4a04      	ldr	r2, [pc, #16]	; (8002200 <HAL_IncTick+0x24>)
 80021ee:	6013      	str	r3, [r2, #0]
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	2000001c 	.word	0x2000001c
 8002200:	20000584 	.word	0x20000584

08002204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return uwTick;
 8002208:	4b03      	ldr	r3, [pc, #12]	; (8002218 <HAL_GetTick+0x14>)
 800220a:	681b      	ldr	r3, [r3, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000584 	.word	0x20000584

0800221c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002224:	f7ff ffee 	bl	8002204 <HAL_GetTick>
 8002228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d005      	beq.n	8002242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002236:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_Delay+0x44>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4413      	add	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002242:	bf00      	nop
 8002244:	f7ff ffde 	bl	8002204 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	429a      	cmp	r2, r3
 8002252:	d8f7      	bhi.n	8002244 <HAL_Delay+0x28>
  {
  }
}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	2000001c 	.word	0x2000001c

08002264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002280:	4013      	ands	r3, r2
 8002282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800228c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002296:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	60d3      	str	r3, [r2, #12]
}
 800229c:	bf00      	nop
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <__NVIC_GetPriorityGrouping+0x18>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	f003 0307 	and.w	r3, r3, #7
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	db0b      	blt.n	80022f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	f003 021f 	and.w	r2, r3, #31
 80022e0:	4907      	ldr	r1, [pc, #28]	; (8002300 <__NVIC_EnableIRQ+0x38>)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	2001      	movs	r0, #1
 80022ea:	fa00 f202 	lsl.w	r2, r0, r2
 80022ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000e100 	.word	0xe000e100

08002304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	2b00      	cmp	r3, #0
 8002316:	db0a      	blt.n	800232e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	b2da      	uxtb	r2, r3
 800231c:	490c      	ldr	r1, [pc, #48]	; (8002350 <__NVIC_SetPriority+0x4c>)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	0112      	lsls	r2, r2, #4
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	440b      	add	r3, r1
 8002328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800232c:	e00a      	b.n	8002344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4908      	ldr	r1, [pc, #32]	; (8002354 <__NVIC_SetPriority+0x50>)
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	3b04      	subs	r3, #4
 800233c:	0112      	lsls	r2, r2, #4
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	440b      	add	r3, r1
 8002342:	761a      	strb	r2, [r3, #24]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000e100 	.word	0xe000e100
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	; 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f1c3 0307 	rsb	r3, r3, #7
 8002372:	2b04      	cmp	r3, #4
 8002374:	bf28      	it	cs
 8002376:	2304      	movcs	r3, #4
 8002378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3304      	adds	r3, #4
 800237e:	2b06      	cmp	r3, #6
 8002380:	d902      	bls.n	8002388 <NVIC_EncodePriority+0x30>
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3b03      	subs	r3, #3
 8002386:	e000      	b.n	800238a <NVIC_EncodePriority+0x32>
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	f04f 32ff 	mov.w	r2, #4294967295
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43da      	mvns	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	401a      	ands	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a0:	f04f 31ff 	mov.w	r1, #4294967295
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	43d9      	mvns	r1, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	4313      	orrs	r3, r2
         );
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3724      	adds	r7, #36	; 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d0:	d301      	bcc.n	80023d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00f      	b.n	80023f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d6:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <SysTick_Config+0x40>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023de:	210f      	movs	r1, #15
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	f7ff ff8e 	bl	8002304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <SysTick_Config+0x40>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ee:	4b04      	ldr	r3, [pc, #16]	; (8002400 <SysTick_Config+0x40>)
 80023f0:	2207      	movs	r2, #7
 80023f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	e000e010 	.word	0xe000e010

08002404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff ff29 	bl	8002264 <__NVIC_SetPriorityGrouping>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800242c:	f7ff ff3e 	bl	80022ac <__NVIC_GetPriorityGrouping>
 8002430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	6978      	ldr	r0, [r7, #20]
 8002438:	f7ff ff8e 	bl	8002358 <NVIC_EncodePriority>
 800243c:	4602      	mov	r2, r0
 800243e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff5d 	bl	8002304 <__NVIC_SetPriority>
}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff31 	bl	80022c8 <__NVIC_EnableIRQ>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff ffa2 	bl	80023c0 <SysTick_Config>
 800247c:	4603      	mov	r3, r0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002494:	f7ff feb6 	bl	8002204 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e099      	b.n	80025d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024c4:	e00f      	b.n	80024e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024c6:	f7ff fe9d 	bl	8002204 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d908      	bls.n	80024e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2220      	movs	r2, #32
 80024d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2203      	movs	r2, #3
 80024de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e078      	b.n	80025d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1e8      	bne.n	80024c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	4b38      	ldr	r3, [pc, #224]	; (80025e0 <HAL_DMA_Init+0x158>)
 8002500:	4013      	ands	r3, r2
 8002502:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002512:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	2b04      	cmp	r3, #4
 800253e:	d107      	bne.n	8002550 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	4313      	orrs	r3, r2
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4313      	orrs	r3, r2
 800254e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f023 0307 	bic.w	r3, r3, #7
 8002566:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	2b04      	cmp	r3, #4
 8002578:	d117      	bne.n	80025aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4313      	orrs	r3, r2
 8002582:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00e      	beq.n	80025aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fb01 	bl	8002b94 <DMA_CheckFifoParam>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2240      	movs	r2, #64	; 0x40
 800259c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025a6:	2301      	movs	r3, #1
 80025a8:	e016      	b.n	80025d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fab8 	bl	8002b28 <DMA_CalcBaseAndBitshift>
 80025b8:	4603      	mov	r3, r0
 80025ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c0:	223f      	movs	r2, #63	; 0x3f
 80025c2:	409a      	lsls	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	f010803f 	.word	0xf010803f

080025e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_DMA_Start_IT+0x26>
 8002606:	2302      	movs	r3, #2
 8002608:	e040      	b.n	800268c <HAL_DMA_Start_IT+0xa8>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b01      	cmp	r3, #1
 800261c:	d12f      	bne.n	800267e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2202      	movs	r2, #2
 8002622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 fa4a 	bl	8002acc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263c:	223f      	movs	r2, #63	; 0x3f
 800263e:	409a      	lsls	r2, r3
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0216 	orr.w	r2, r2, #22
 8002652:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	2b00      	cmp	r3, #0
 800265a:	d007      	beq.n	800266c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0208 	orr.w	r2, r2, #8
 800266a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	e005      	b.n	800268a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002686:	2302      	movs	r3, #2
 8002688:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800268a:	7dfb      	ldrb	r3, [r7, #23]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026a2:	f7ff fdaf 	bl	8002204 <HAL_GetTick>
 80026a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d008      	beq.n	80026c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2280      	movs	r2, #128	; 0x80
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e052      	b.n	800276c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0216 	bic.w	r2, r2, #22
 80026d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d103      	bne.n	80026f6 <HAL_DMA_Abort+0x62>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d007      	beq.n	8002706 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0208 	bic.w	r2, r2, #8
 8002704:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002716:	e013      	b.n	8002740 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002718:	f7ff fd74 	bl	8002204 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b05      	cmp	r3, #5
 8002724:	d90c      	bls.n	8002740 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2220      	movs	r2, #32
 800272a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2203      	movs	r2, #3
 8002730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e015      	b.n	800276c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1e4      	bne.n	8002718 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002752:	223f      	movs	r2, #63	; 0x3f
 8002754:	409a      	lsls	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d004      	beq.n	8002792 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2280      	movs	r2, #128	; 0x80
 800278c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e00c      	b.n	80027ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2205      	movs	r2, #5
 8002796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0201 	bic.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027c4:	4b92      	ldr	r3, [pc, #584]	; (8002a10 <HAL_DMA_IRQHandler+0x258>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a92      	ldr	r2, [pc, #584]	; (8002a14 <HAL_DMA_IRQHandler+0x25c>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	0a9b      	lsrs	r3, r3, #10
 80027d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e2:	2208      	movs	r2, #8
 80027e4:	409a      	lsls	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01a      	beq.n	8002824 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d013      	beq.n	8002824 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0204 	bic.w	r2, r2, #4
 800280a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002810:	2208      	movs	r2, #8
 8002812:	409a      	lsls	r2, r3
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281c:	f043 0201 	orr.w	r2, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002828:	2201      	movs	r2, #1
 800282a:	409a      	lsls	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d012      	beq.n	800285a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00b      	beq.n	800285a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	2201      	movs	r2, #1
 8002848:	409a      	lsls	r2, r3
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002852:	f043 0202 	orr.w	r2, r3, #2
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285e:	2204      	movs	r2, #4
 8002860:	409a      	lsls	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d012      	beq.n	8002890 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00b      	beq.n	8002890 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287c:	2204      	movs	r2, #4
 800287e:	409a      	lsls	r2, r3
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002888:	f043 0204 	orr.w	r2, r3, #4
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002894:	2210      	movs	r2, #16
 8002896:	409a      	lsls	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4013      	ands	r3, r2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d043      	beq.n	8002928 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d03c      	beq.n	8002928 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b2:	2210      	movs	r2, #16
 80028b4:	409a      	lsls	r2, r3
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d018      	beq.n	80028fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d108      	bne.n	80028e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d024      	beq.n	8002928 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	4798      	blx	r3
 80028e6:	e01f      	b.n	8002928 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01b      	beq.n	8002928 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	4798      	blx	r3
 80028f8:	e016      	b.n	8002928 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d107      	bne.n	8002918 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0208 	bic.w	r2, r2, #8
 8002916:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292c:	2220      	movs	r2, #32
 800292e:	409a      	lsls	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 808e 	beq.w	8002a56 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 8086 	beq.w	8002a56 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294e:	2220      	movs	r2, #32
 8002950:	409a      	lsls	r2, r3
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b05      	cmp	r3, #5
 8002960:	d136      	bne.n	80029d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0216 	bic.w	r2, r2, #22
 8002970:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002980:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d103      	bne.n	8002992 <HAL_DMA_IRQHandler+0x1da>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298e:	2b00      	cmp	r3, #0
 8002990:	d007      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0208 	bic.w	r2, r2, #8
 80029a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a6:	223f      	movs	r2, #63	; 0x3f
 80029a8:	409a      	lsls	r2, r3
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d07d      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	4798      	blx	r3
        }
        return;
 80029ce:	e078      	b.n	8002ac2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d01c      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d108      	bne.n	80029fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d030      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	4798      	blx	r3
 80029fc:	e02b      	b.n	8002a56 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d027      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	4798      	blx	r3
 8002a0e:	e022      	b.n	8002a56 <HAL_DMA_IRQHandler+0x29e>
 8002a10:	20000014 	.word	0x20000014
 8002a14:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10f      	bne.n	8002a46 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0210 	bic.w	r2, r2, #16
 8002a34:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d032      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d022      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2205      	movs	r2, #5
 8002a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	3301      	adds	r3, #1
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d307      	bcc.n	8002a9e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f2      	bne.n	8002a82 <HAL_DMA_IRQHandler+0x2ca>
 8002a9c:	e000      	b.n	8002aa0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a9e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	4798      	blx	r3
 8002ac0:	e000      	b.n	8002ac4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ac2:	bf00      	nop
    }
  }
}
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop

08002acc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ae8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b40      	cmp	r3, #64	; 0x40
 8002af8:	d108      	bne.n	8002b0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b0a:	e007      	b.n	8002b1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	60da      	str	r2, [r3, #12]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	3b10      	subs	r3, #16
 8002b38:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <DMA_CalcBaseAndBitshift+0x64>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	091b      	lsrs	r3, r3, #4
 8002b40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b42:	4a13      	ldr	r2, [pc, #76]	; (8002b90 <DMA_CalcBaseAndBitshift+0x68>)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4413      	add	r3, r2
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	d909      	bls.n	8002b6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b5e:	f023 0303 	bic.w	r3, r3, #3
 8002b62:	1d1a      	adds	r2, r3, #4
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	659a      	str	r2, [r3, #88]	; 0x58
 8002b68:	e007      	b.n	8002b7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b72:	f023 0303 	bic.w	r3, r3, #3
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	aaaaaaab 	.word	0xaaaaaaab
 8002b90:	080089f0 	.word	0x080089f0

08002b94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d11f      	bne.n	8002bee <DMA_CheckFifoParam+0x5a>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d856      	bhi.n	8002c62 <DMA_CheckFifoParam+0xce>
 8002bb4:	a201      	add	r2, pc, #4	; (adr r2, 8002bbc <DMA_CheckFifoParam+0x28>)
 8002bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bba:	bf00      	nop
 8002bbc:	08002bcd 	.word	0x08002bcd
 8002bc0:	08002bdf 	.word	0x08002bdf
 8002bc4:	08002bcd 	.word	0x08002bcd
 8002bc8:	08002c63 	.word	0x08002c63
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d046      	beq.n	8002c66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bdc:	e043      	b.n	8002c66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002be6:	d140      	bne.n	8002c6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bec:	e03d      	b.n	8002c6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf6:	d121      	bne.n	8002c3c <DMA_CheckFifoParam+0xa8>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d837      	bhi.n	8002c6e <DMA_CheckFifoParam+0xda>
 8002bfe:	a201      	add	r2, pc, #4	; (adr r2, 8002c04 <DMA_CheckFifoParam+0x70>)
 8002c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c04:	08002c15 	.word	0x08002c15
 8002c08:	08002c1b 	.word	0x08002c1b
 8002c0c:	08002c15 	.word	0x08002c15
 8002c10:	08002c2d 	.word	0x08002c2d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
      break;
 8002c18:	e030      	b.n	8002c7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d025      	beq.n	8002c72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c2a:	e022      	b.n	8002c72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c34:	d11f      	bne.n	8002c76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c3a:	e01c      	b.n	8002c76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d903      	bls.n	8002c4a <DMA_CheckFifoParam+0xb6>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	d003      	beq.n	8002c50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c48:	e018      	b.n	8002c7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c4e:	e015      	b.n	8002c7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00e      	beq.n	8002c7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c60:	e00b      	b.n	8002c7a <DMA_CheckFifoParam+0xe6>
      break;
 8002c62:	bf00      	nop
 8002c64:	e00a      	b.n	8002c7c <DMA_CheckFifoParam+0xe8>
      break;
 8002c66:	bf00      	nop
 8002c68:	e008      	b.n	8002c7c <DMA_CheckFifoParam+0xe8>
      break;
 8002c6a:	bf00      	nop
 8002c6c:	e006      	b.n	8002c7c <DMA_CheckFifoParam+0xe8>
      break;
 8002c6e:	bf00      	nop
 8002c70:	e004      	b.n	8002c7c <DMA_CheckFifoParam+0xe8>
      break;
 8002c72:	bf00      	nop
 8002c74:	e002      	b.n	8002c7c <DMA_CheckFifoParam+0xe8>
      break;   
 8002c76:	bf00      	nop
 8002c78:	e000      	b.n	8002c7c <DMA_CheckFifoParam+0xe8>
      break;
 8002c7a:	bf00      	nop
    }
  } 
  
  return status; 
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop

08002c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b089      	sub	sp, #36	; 0x24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	e16b      	b.n	8002f80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ca8:	2201      	movs	r2, #1
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	f040 815a 	bne.w	8002f7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d005      	beq.n	8002cde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d130      	bne.n	8002d40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	2203      	movs	r2, #3
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d14:	2201      	movs	r2, #1
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f003 0201 	and.w	r2, r3, #1
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d017      	beq.n	8002d7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	2203      	movs	r2, #3
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d123      	bne.n	8002dd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	08da      	lsrs	r2, r3, #3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3208      	adds	r2, #8
 8002d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	220f      	movs	r2, #15
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	08da      	lsrs	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3208      	adds	r2, #8
 8002dca:	69b9      	ldr	r1, [r7, #24]
 8002dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	2203      	movs	r2, #3
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0203 	and.w	r2, r3, #3
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80b4 	beq.w	8002f7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	4b60      	ldr	r3, [pc, #384]	; (8002f98 <HAL_GPIO_Init+0x30c>)
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	4a5f      	ldr	r2, [pc, #380]	; (8002f98 <HAL_GPIO_Init+0x30c>)
 8002e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e20:	6453      	str	r3, [r2, #68]	; 0x44
 8002e22:	4b5d      	ldr	r3, [pc, #372]	; (8002f98 <HAL_GPIO_Init+0x30c>)
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e2e:	4a5b      	ldr	r2, [pc, #364]	; (8002f9c <HAL_GPIO_Init+0x310>)
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	089b      	lsrs	r3, r3, #2
 8002e34:	3302      	adds	r3, #2
 8002e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	220f      	movs	r2, #15
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a52      	ldr	r2, [pc, #328]	; (8002fa0 <HAL_GPIO_Init+0x314>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d02b      	beq.n	8002eb2 <HAL_GPIO_Init+0x226>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a51      	ldr	r2, [pc, #324]	; (8002fa4 <HAL_GPIO_Init+0x318>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d025      	beq.n	8002eae <HAL_GPIO_Init+0x222>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a50      	ldr	r2, [pc, #320]	; (8002fa8 <HAL_GPIO_Init+0x31c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d01f      	beq.n	8002eaa <HAL_GPIO_Init+0x21e>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a4f      	ldr	r2, [pc, #316]	; (8002fac <HAL_GPIO_Init+0x320>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d019      	beq.n	8002ea6 <HAL_GPIO_Init+0x21a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a4e      	ldr	r2, [pc, #312]	; (8002fb0 <HAL_GPIO_Init+0x324>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d013      	beq.n	8002ea2 <HAL_GPIO_Init+0x216>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a4d      	ldr	r2, [pc, #308]	; (8002fb4 <HAL_GPIO_Init+0x328>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00d      	beq.n	8002e9e <HAL_GPIO_Init+0x212>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a4c      	ldr	r2, [pc, #304]	; (8002fb8 <HAL_GPIO_Init+0x32c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d007      	beq.n	8002e9a <HAL_GPIO_Init+0x20e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a4b      	ldr	r2, [pc, #300]	; (8002fbc <HAL_GPIO_Init+0x330>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d101      	bne.n	8002e96 <HAL_GPIO_Init+0x20a>
 8002e92:	2307      	movs	r3, #7
 8002e94:	e00e      	b.n	8002eb4 <HAL_GPIO_Init+0x228>
 8002e96:	2308      	movs	r3, #8
 8002e98:	e00c      	b.n	8002eb4 <HAL_GPIO_Init+0x228>
 8002e9a:	2306      	movs	r3, #6
 8002e9c:	e00a      	b.n	8002eb4 <HAL_GPIO_Init+0x228>
 8002e9e:	2305      	movs	r3, #5
 8002ea0:	e008      	b.n	8002eb4 <HAL_GPIO_Init+0x228>
 8002ea2:	2304      	movs	r3, #4
 8002ea4:	e006      	b.n	8002eb4 <HAL_GPIO_Init+0x228>
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e004      	b.n	8002eb4 <HAL_GPIO_Init+0x228>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e002      	b.n	8002eb4 <HAL_GPIO_Init+0x228>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <HAL_GPIO_Init+0x228>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	f002 0203 	and.w	r2, r2, #3
 8002eba:	0092      	lsls	r2, r2, #2
 8002ebc:	4093      	lsls	r3, r2
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ec4:	4935      	ldr	r1, [pc, #212]	; (8002f9c <HAL_GPIO_Init+0x310>)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	089b      	lsrs	r3, r3, #2
 8002eca:	3302      	adds	r3, #2
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <HAL_GPIO_Init+0x334>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	43db      	mvns	r3, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ef6:	4a32      	ldr	r2, [pc, #200]	; (8002fc0 <HAL_GPIO_Init+0x334>)
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002efc:	4b30      	ldr	r3, [pc, #192]	; (8002fc0 <HAL_GPIO_Init+0x334>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	43db      	mvns	r3, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f20:	4a27      	ldr	r2, [pc, #156]	; (8002fc0 <HAL_GPIO_Init+0x334>)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f26:	4b26      	ldr	r3, [pc, #152]	; (8002fc0 <HAL_GPIO_Init+0x334>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f4a:	4a1d      	ldr	r2, [pc, #116]	; (8002fc0 <HAL_GPIO_Init+0x334>)
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f50:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <HAL_GPIO_Init+0x334>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f74:	4a12      	ldr	r2, [pc, #72]	; (8002fc0 <HAL_GPIO_Init+0x334>)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	61fb      	str	r3, [r7, #28]
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	2b0f      	cmp	r3, #15
 8002f84:	f67f ae90 	bls.w	8002ca8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop
 8002f8c:	3724      	adds	r7, #36	; 0x24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40013800 	.word	0x40013800
 8002fa0:	40020000 	.word	0x40020000
 8002fa4:	40020400 	.word	0x40020400
 8002fa8:	40020800 	.word	0x40020800
 8002fac:	40020c00 	.word	0x40020c00
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40021400 	.word	0x40021400
 8002fb8:	40021800 	.word	0x40021800
 8002fbc:	40021c00 	.word	0x40021c00
 8002fc0:	40013c00 	.word	0x40013c00

08002fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e12b      	b.n	800322e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fe fe7a 	bl	8001ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2224      	movs	r2, #36	; 0x24
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0201 	bic.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003016:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003026:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003028:	f001 fb82 	bl	8004730 <HAL_RCC_GetPCLK1Freq>
 800302c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	4a81      	ldr	r2, [pc, #516]	; (8003238 <HAL_I2C_Init+0x274>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d807      	bhi.n	8003048 <HAL_I2C_Init+0x84>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4a80      	ldr	r2, [pc, #512]	; (800323c <HAL_I2C_Init+0x278>)
 800303c:	4293      	cmp	r3, r2
 800303e:	bf94      	ite	ls
 8003040:	2301      	movls	r3, #1
 8003042:	2300      	movhi	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	e006      	b.n	8003056 <HAL_I2C_Init+0x92>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4a7d      	ldr	r2, [pc, #500]	; (8003240 <HAL_I2C_Init+0x27c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	bf94      	ite	ls
 8003050:	2301      	movls	r3, #1
 8003052:	2300      	movhi	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e0e7      	b.n	800322e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4a78      	ldr	r2, [pc, #480]	; (8003244 <HAL_I2C_Init+0x280>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	0c9b      	lsrs	r3, r3, #18
 8003068:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	430a      	orrs	r2, r1
 800307c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4a6a      	ldr	r2, [pc, #424]	; (8003238 <HAL_I2C_Init+0x274>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d802      	bhi.n	8003098 <HAL_I2C_Init+0xd4>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	3301      	adds	r3, #1
 8003096:	e009      	b.n	80030ac <HAL_I2C_Init+0xe8>
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800309e:	fb02 f303 	mul.w	r3, r2, r3
 80030a2:	4a69      	ldr	r2, [pc, #420]	; (8003248 <HAL_I2C_Init+0x284>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	099b      	lsrs	r3, r3, #6
 80030aa:	3301      	adds	r3, #1
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	430b      	orrs	r3, r1
 80030b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	495c      	ldr	r1, [pc, #368]	; (8003238 <HAL_I2C_Init+0x274>)
 80030c8:	428b      	cmp	r3, r1
 80030ca:	d819      	bhi.n	8003100 <HAL_I2C_Init+0x13c>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1e59      	subs	r1, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80030da:	1c59      	adds	r1, r3, #1
 80030dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030e0:	400b      	ands	r3, r1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <HAL_I2C_Init+0x138>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1e59      	subs	r1, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80030f4:	3301      	adds	r3, #1
 80030f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fa:	e051      	b.n	80031a0 <HAL_I2C_Init+0x1dc>
 80030fc:	2304      	movs	r3, #4
 80030fe:	e04f      	b.n	80031a0 <HAL_I2C_Init+0x1dc>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d111      	bne.n	800312c <HAL_I2C_Init+0x168>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	1e58      	subs	r0, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6859      	ldr	r1, [r3, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	440b      	add	r3, r1
 8003116:	fbb0 f3f3 	udiv	r3, r0, r3
 800311a:	3301      	adds	r3, #1
 800311c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf0c      	ite	eq
 8003124:	2301      	moveq	r3, #1
 8003126:	2300      	movne	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	e012      	b.n	8003152 <HAL_I2C_Init+0x18e>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	1e58      	subs	r0, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6859      	ldr	r1, [r3, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	0099      	lsls	r1, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003142:	3301      	adds	r3, #1
 8003144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_I2C_Init+0x196>
 8003156:	2301      	movs	r3, #1
 8003158:	e022      	b.n	80031a0 <HAL_I2C_Init+0x1dc>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10e      	bne.n	8003180 <HAL_I2C_Init+0x1bc>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1e58      	subs	r0, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6859      	ldr	r1, [r3, #4]
 800316a:	460b      	mov	r3, r1
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	440b      	add	r3, r1
 8003170:	fbb0 f3f3 	udiv	r3, r0, r3
 8003174:	3301      	adds	r3, #1
 8003176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800317a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800317e:	e00f      	b.n	80031a0 <HAL_I2C_Init+0x1dc>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1e58      	subs	r0, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	0099      	lsls	r1, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	fbb0 f3f3 	udiv	r3, r0, r3
 8003196:	3301      	adds	r3, #1
 8003198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	6809      	ldr	r1, [r1, #0]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69da      	ldr	r2, [r3, #28]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6911      	ldr	r1, [r2, #16]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68d2      	ldr	r2, [r2, #12]
 80031da:	4311      	orrs	r1, r2
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	430b      	orrs	r3, r1
 80031e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	000186a0 	.word	0x000186a0
 800323c:	001e847f 	.word	0x001e847f
 8003240:	003d08ff 	.word	0x003d08ff
 8003244:	431bde83 	.word	0x431bde83
 8003248:	10624dd3 	.word	0x10624dd3

0800324c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af02      	add	r7, sp, #8
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	607a      	str	r2, [r7, #4]
 8003256:	461a      	mov	r2, r3
 8003258:	460b      	mov	r3, r1
 800325a:	817b      	strh	r3, [r7, #10]
 800325c:	4613      	mov	r3, r2
 800325e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003260:	f7fe ffd0 	bl	8002204 <HAL_GetTick>
 8003264:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b20      	cmp	r3, #32
 8003270:	f040 80e0 	bne.w	8003434 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	2319      	movs	r3, #25
 800327a:	2201      	movs	r2, #1
 800327c:	4970      	ldr	r1, [pc, #448]	; (8003440 <HAL_I2C_Master_Transmit+0x1f4>)
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 fc58 	bl	8003b34 <I2C_WaitOnFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800328a:	2302      	movs	r3, #2
 800328c:	e0d3      	b.n	8003436 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_I2C_Master_Transmit+0x50>
 8003298:	2302      	movs	r3, #2
 800329a:	e0cc      	b.n	8003436 <HAL_I2C_Master_Transmit+0x1ea>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d007      	beq.n	80032c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0201 	orr.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2221      	movs	r2, #33	; 0x21
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2210      	movs	r2, #16
 80032de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	893a      	ldrh	r2, [r7, #8]
 80032f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4a50      	ldr	r2, [pc, #320]	; (8003444 <HAL_I2C_Master_Transmit+0x1f8>)
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003304:	8979      	ldrh	r1, [r7, #10]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	6a3a      	ldr	r2, [r7, #32]
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 fac2 	bl	8003894 <I2C_MasterRequestWrite>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e08d      	b.n	8003436 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003330:	e066      	b.n	8003400 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	6a39      	ldr	r1, [r7, #32]
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 fcd2 	bl	8003ce0 <I2C_WaitOnTXEFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00d      	beq.n	800335e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	2b04      	cmp	r3, #4
 8003348:	d107      	bne.n	800335a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003358:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e06b      	b.n	8003436 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	781a      	ldrb	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003378:	b29b      	uxth	r3, r3
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b04      	cmp	r3, #4
 800339a:	d11b      	bne.n	80033d4 <HAL_I2C_Master_Transmit+0x188>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d017      	beq.n	80033d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	781a      	ldrb	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	6a39      	ldr	r1, [r7, #32]
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 fcc2 	bl	8003d62 <I2C_WaitOnBTFFlagUntilTimeout>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00d      	beq.n	8003400 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d107      	bne.n	80033fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e01a      	b.n	8003436 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003404:	2b00      	cmp	r3, #0
 8003406:	d194      	bne.n	8003332 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003416:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	e000      	b.n	8003436 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003434:	2302      	movs	r3, #2
  }
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	00100002 	.word	0x00100002
 8003444:	ffff0000 	.word	0xffff0000

08003448 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08c      	sub	sp, #48	; 0x30
 800344c:	af02      	add	r7, sp, #8
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	607a      	str	r2, [r7, #4]
 8003452:	461a      	mov	r2, r3
 8003454:	460b      	mov	r3, r1
 8003456:	817b      	strh	r3, [r7, #10]
 8003458:	4613      	mov	r3, r2
 800345a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800345c:	f7fe fed2 	bl	8002204 <HAL_GetTick>
 8003460:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b20      	cmp	r3, #32
 800346c:	f040 820b 	bne.w	8003886 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	2319      	movs	r3, #25
 8003476:	2201      	movs	r2, #1
 8003478:	497c      	ldr	r1, [pc, #496]	; (800366c <HAL_I2C_Master_Receive+0x224>)
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 fb5a 	bl	8003b34 <I2C_WaitOnFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003486:	2302      	movs	r3, #2
 8003488:	e1fe      	b.n	8003888 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_I2C_Master_Receive+0x50>
 8003494:	2302      	movs	r3, #2
 8003496:	e1f7      	b.n	8003888 <HAL_I2C_Master_Receive+0x440>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d007      	beq.n	80034be <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0201 	orr.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2222      	movs	r2, #34	; 0x22
 80034d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2210      	movs	r2, #16
 80034da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	893a      	ldrh	r2, [r7, #8]
 80034ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4a5c      	ldr	r2, [pc, #368]	; (8003670 <HAL_I2C_Master_Receive+0x228>)
 80034fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003500:	8979      	ldrh	r1, [r7, #10]
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 fa46 	bl	8003998 <I2C_MasterRequestRead>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e1b8      	b.n	8003888 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351a:	2b00      	cmp	r3, #0
 800351c:	d113      	bne.n	8003546 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800351e:	2300      	movs	r3, #0
 8003520:	623b      	str	r3, [r7, #32]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	623b      	str	r3, [r7, #32]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	623b      	str	r3, [r7, #32]
 8003532:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	e18c      	b.n	8003860 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354a:	2b01      	cmp	r3, #1
 800354c:	d11b      	bne.n	8003586 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800355c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	61fb      	str	r3, [r7, #28]
 8003572:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e16c      	b.n	8003860 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358a:	2b02      	cmp	r3, #2
 800358c:	d11b      	bne.n	80035c6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800359c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ae:	2300      	movs	r3, #0
 80035b0:	61bb      	str	r3, [r7, #24]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	61bb      	str	r3, [r7, #24]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	e14c      	b.n	8003860 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035ec:	e138      	b.n	8003860 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	f200 80f1 	bhi.w	80037da <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d123      	bne.n	8003648 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003602:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 fbed 	bl	8003de4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e139      	b.n	8003888 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003646:	e10b      	b.n	8003860 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364c:	2b02      	cmp	r3, #2
 800364e:	d14e      	bne.n	80036ee <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003656:	2200      	movs	r2, #0
 8003658:	4906      	ldr	r1, [pc, #24]	; (8003674 <HAL_I2C_Master_Receive+0x22c>)
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 fa6a 	bl	8003b34 <I2C_WaitOnFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d008      	beq.n	8003678 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e10e      	b.n	8003888 <HAL_I2C_Master_Receive+0x440>
 800366a:	bf00      	nop
 800366c:	00100002 	.word	0x00100002
 8003670:	ffff0000 	.word	0xffff0000
 8003674:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036ec:	e0b8      	b.n	8003860 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	2200      	movs	r2, #0
 80036f6:	4966      	ldr	r1, [pc, #408]	; (8003890 <HAL_I2C_Master_Receive+0x448>)
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fa1b 	bl	8003b34 <I2C_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0bf      	b.n	8003888 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003716:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003750:	2200      	movs	r2, #0
 8003752:	494f      	ldr	r1, [pc, #316]	; (8003890 <HAL_I2C_Master_Receive+0x448>)
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f9ed 	bl	8003b34 <I2C_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e091      	b.n	8003888 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003772:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	3b01      	subs	r3, #1
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037d8:	e042      	b.n	8003860 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fb00 	bl	8003de4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e04c      	b.n	8003888 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b04      	cmp	r3, #4
 800382c:	d118      	bne.n	8003860 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	b2d2      	uxtb	r2, r2
 800383a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003864:	2b00      	cmp	r3, #0
 8003866:	f47f aec2 	bne.w	80035ee <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	e000      	b.n	8003888 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003886:	2302      	movs	r3, #2
  }
}
 8003888:	4618      	mov	r0, r3
 800388a:	3728      	adds	r7, #40	; 0x28
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	00010004 	.word	0x00010004

08003894 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af02      	add	r7, sp, #8
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	607a      	str	r2, [r7, #4]
 800389e:	603b      	str	r3, [r7, #0]
 80038a0:	460b      	mov	r3, r1
 80038a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d006      	beq.n	80038be <I2C_MasterRequestWrite+0x2a>
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d003      	beq.n	80038be <I2C_MasterRequestWrite+0x2a>
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038bc:	d108      	bne.n	80038d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	e00b      	b.n	80038e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	2b12      	cmp	r3, #18
 80038d6:	d107      	bne.n	80038e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f91d 	bl	8003b34 <I2C_WaitOnFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00d      	beq.n	800391c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800390e:	d103      	bne.n	8003918 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003916:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e035      	b.n	8003988 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003924:	d108      	bne.n	8003938 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003926:	897b      	ldrh	r3, [r7, #10]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	461a      	mov	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003934:	611a      	str	r2, [r3, #16]
 8003936:	e01b      	b.n	8003970 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003938:	897b      	ldrh	r3, [r7, #10]
 800393a:	11db      	asrs	r3, r3, #7
 800393c:	b2db      	uxtb	r3, r3
 800393e:	f003 0306 	and.w	r3, r3, #6
 8003942:	b2db      	uxtb	r3, r3
 8003944:	f063 030f 	orn	r3, r3, #15
 8003948:	b2da      	uxtb	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	490e      	ldr	r1, [pc, #56]	; (8003990 <I2C_MasterRequestWrite+0xfc>)
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f943 	bl	8003be2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e010      	b.n	8003988 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003966:	897b      	ldrh	r3, [r7, #10]
 8003968:	b2da      	uxtb	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	4907      	ldr	r1, [pc, #28]	; (8003994 <I2C_MasterRequestWrite+0x100>)
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 f933 	bl	8003be2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	00010008 	.word	0x00010008
 8003994:	00010002 	.word	0x00010002

08003998 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af02      	add	r7, sp, #8
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	607a      	str	r2, [r7, #4]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	460b      	mov	r3, r1
 80039a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d006      	beq.n	80039d2 <I2C_MasterRequestRead+0x3a>
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d003      	beq.n	80039d2 <I2C_MasterRequestRead+0x3a>
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039d0:	d108      	bne.n	80039e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e00b      	b.n	80039fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	2b11      	cmp	r3, #17
 80039ea:	d107      	bne.n	80039fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f893 	bl	8003b34 <I2C_WaitOnFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00d      	beq.n	8003a30 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a22:	d103      	bne.n	8003a2c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e079      	b.n	8003b24 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a38:	d108      	bne.n	8003a4c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a3a:	897b      	ldrh	r3, [r7, #10]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	611a      	str	r2, [r3, #16]
 8003a4a:	e05f      	b.n	8003b0c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a4c:	897b      	ldrh	r3, [r7, #10]
 8003a4e:	11db      	asrs	r3, r3, #7
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	f003 0306 	and.w	r3, r3, #6
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	f063 030f 	orn	r3, r3, #15
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	4930      	ldr	r1, [pc, #192]	; (8003b2c <I2C_MasterRequestRead+0x194>)
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 f8b9 	bl	8003be2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e054      	b.n	8003b24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a7a:	897b      	ldrh	r3, [r7, #10]
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	4929      	ldr	r1, [pc, #164]	; (8003b30 <I2C_MasterRequestRead+0x198>)
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f8a9 	bl	8003be2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e044      	b.n	8003b24 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003abe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f831 	bl	8003b34 <I2C_WaitOnFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00d      	beq.n	8003af4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae6:	d103      	bne.n	8003af0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e017      	b.n	8003b24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003af4:	897b      	ldrh	r3, [r7, #10]
 8003af6:	11db      	asrs	r3, r3, #7
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	f003 0306 	and.w	r3, r3, #6
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f063 030e 	orn	r3, r3, #14
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	4907      	ldr	r1, [pc, #28]	; (8003b30 <I2C_MasterRequestRead+0x198>)
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f865 	bl	8003be2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	00010008 	.word	0x00010008
 8003b30:	00010002 	.word	0x00010002

08003b34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	4613      	mov	r3, r2
 8003b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b44:	e025      	b.n	8003b92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4c:	d021      	beq.n	8003b92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b4e:	f7fe fb59 	bl	8002204 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d302      	bcc.n	8003b64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d116      	bne.n	8003b92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f043 0220 	orr.w	r2, r3, #32
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e023      	b.n	8003bda <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	0c1b      	lsrs	r3, r3, #16
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d10d      	bne.n	8003bb8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	43da      	mvns	r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	bf0c      	ite	eq
 8003bae:	2301      	moveq	r3, #1
 8003bb0:	2300      	movne	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	e00c      	b.n	8003bd2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	43da      	mvns	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	bf0c      	ite	eq
 8003bca:	2301      	moveq	r3, #1
 8003bcc:	2300      	movne	r3, #0
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d0b6      	beq.n	8003b46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	607a      	str	r2, [r7, #4]
 8003bee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bf0:	e051      	b.n	8003c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c00:	d123      	bne.n	8003c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	f043 0204 	orr.w	r2, r3, #4
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e046      	b.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c50:	d021      	beq.n	8003c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c52:	f7fe fad7 	bl	8002204 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d302      	bcc.n	8003c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d116      	bne.n	8003c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	f043 0220 	orr.w	r2, r3, #32
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e020      	b.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	0c1b      	lsrs	r3, r3, #16
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d10c      	bne.n	8003cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	43da      	mvns	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	4013      	ands	r3, r2
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	bf14      	ite	ne
 8003cb2:	2301      	movne	r3, #1
 8003cb4:	2300      	moveq	r3, #0
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	e00b      	b.n	8003cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	43da      	mvns	r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bf14      	ite	ne
 8003ccc:	2301      	movne	r3, #1
 8003cce:	2300      	moveq	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d18d      	bne.n	8003bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cec:	e02d      	b.n	8003d4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 f8ce 	bl	8003e90 <I2C_IsAcknowledgeFailed>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e02d      	b.n	8003d5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d04:	d021      	beq.n	8003d4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d06:	f7fe fa7d 	bl	8002204 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d302      	bcc.n	8003d1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d116      	bne.n	8003d4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	f043 0220 	orr.w	r2, r3, #32
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e007      	b.n	8003d5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d54:	2b80      	cmp	r3, #128	; 0x80
 8003d56:	d1ca      	bne.n	8003cee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b084      	sub	sp, #16
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d6e:	e02d      	b.n	8003dcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f88d 	bl	8003e90 <I2C_IsAcknowledgeFailed>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e02d      	b.n	8003ddc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d86:	d021      	beq.n	8003dcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d88:	f7fe fa3c 	bl	8002204 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d302      	bcc.n	8003d9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d116      	bne.n	8003dcc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	f043 0220 	orr.w	r2, r3, #32
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e007      	b.n	8003ddc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f003 0304 	and.w	r3, r3, #4
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d1ca      	bne.n	8003d70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003df0:	e042      	b.n	8003e78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d119      	bne.n	8003e34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0210 	mvn.w	r2, #16
 8003e08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e029      	b.n	8003e88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e34:	f7fe f9e6 	bl	8002204 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d302      	bcc.n	8003e4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d116      	bne.n	8003e78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	f043 0220 	orr.w	r2, r3, #32
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e007      	b.n	8003e88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b40      	cmp	r3, #64	; 0x40
 8003e84:	d1b5      	bne.n	8003df2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea6:	d11b      	bne.n	8003ee0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	f043 0204 	orr.w	r2, r3, #4
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e000      	b.n	8003ee2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
	...

08003ef0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e264      	b.n	80043cc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d075      	beq.n	8003ffa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f0e:	4ba3      	ldr	r3, [pc, #652]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 030c 	and.w	r3, r3, #12
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d00c      	beq.n	8003f34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f1a:	4ba0      	ldr	r3, [pc, #640]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d112      	bne.n	8003f4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f26:	4b9d      	ldr	r3, [pc, #628]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f32:	d10b      	bne.n	8003f4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f34:	4b99      	ldr	r3, [pc, #612]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d05b      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x108>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d157      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e23f      	b.n	80043cc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f54:	d106      	bne.n	8003f64 <HAL_RCC_OscConfig+0x74>
 8003f56:	4b91      	ldr	r3, [pc, #580]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a90      	ldr	r2, [pc, #576]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	e01d      	b.n	8003fa0 <HAL_RCC_OscConfig+0xb0>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f6c:	d10c      	bne.n	8003f88 <HAL_RCC_OscConfig+0x98>
 8003f6e:	4b8b      	ldr	r3, [pc, #556]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a8a      	ldr	r2, [pc, #552]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8003f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	4b88      	ldr	r3, [pc, #544]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a87      	ldr	r2, [pc, #540]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	e00b      	b.n	8003fa0 <HAL_RCC_OscConfig+0xb0>
 8003f88:	4b84      	ldr	r3, [pc, #528]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a83      	ldr	r2, [pc, #524]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8003f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	4b81      	ldr	r3, [pc, #516]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a80      	ldr	r2, [pc, #512]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8003f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d013      	beq.n	8003fd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa8:	f7fe f92c 	bl	8002204 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fb0:	f7fe f928 	bl	8002204 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	; 0x64
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e204      	b.n	80043cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc2:	4b76      	ldr	r3, [pc, #472]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0xc0>
 8003fce:	e014      	b.n	8003ffa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd0:	f7fe f918 	bl	8002204 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fd8:	f7fe f914 	bl	8002204 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b64      	cmp	r3, #100	; 0x64
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e1f0      	b.n	80043cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fea:	4b6c      	ldr	r3, [pc, #432]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0xe8>
 8003ff6:	e000      	b.n	8003ffa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d063      	beq.n	80040ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004006:	4b65      	ldr	r3, [pc, #404]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 030c 	and.w	r3, r3, #12
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00b      	beq.n	800402a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004012:	4b62      	ldr	r3, [pc, #392]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800401a:	2b08      	cmp	r3, #8
 800401c:	d11c      	bne.n	8004058 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800401e:	4b5f      	ldr	r3, [pc, #380]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d116      	bne.n	8004058 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402a:	4b5c      	ldr	r3, [pc, #368]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d005      	beq.n	8004042 <HAL_RCC_OscConfig+0x152>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d001      	beq.n	8004042 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e1c4      	b.n	80043cc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004042:	4b56      	ldr	r3, [pc, #344]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4952      	ldr	r1, [pc, #328]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8004052:	4313      	orrs	r3, r2
 8004054:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004056:	e03a      	b.n	80040ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d020      	beq.n	80040a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004060:	4b4f      	ldr	r3, [pc, #316]	; (80041a0 <HAL_RCC_OscConfig+0x2b0>)
 8004062:	2201      	movs	r2, #1
 8004064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004066:	f7fe f8cd 	bl	8002204 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800406e:	f7fe f8c9 	bl	8002204 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e1a5      	b.n	80043cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004080:	4b46      	ldr	r3, [pc, #280]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0f0      	beq.n	800406e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408c:	4b43      	ldr	r3, [pc, #268]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	4940      	ldr	r1, [pc, #256]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 800409c:	4313      	orrs	r3, r2
 800409e:	600b      	str	r3, [r1, #0]
 80040a0:	e015      	b.n	80040ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040a2:	4b3f      	ldr	r3, [pc, #252]	; (80041a0 <HAL_RCC_OscConfig+0x2b0>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a8:	f7fe f8ac 	bl	8002204 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040b0:	f7fe f8a8 	bl	8002204 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e184      	b.n	80043cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c2:	4b36      	ldr	r3, [pc, #216]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f0      	bne.n	80040b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d030      	beq.n	800413c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d016      	beq.n	8004110 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040e2:	4b30      	ldr	r3, [pc, #192]	; (80041a4 <HAL_RCC_OscConfig+0x2b4>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e8:	f7fe f88c 	bl	8002204 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040f0:	f7fe f888 	bl	8002204 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e164      	b.n	80043cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004102:	4b26      	ldr	r3, [pc, #152]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8004104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCC_OscConfig+0x200>
 800410e:	e015      	b.n	800413c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004110:	4b24      	ldr	r3, [pc, #144]	; (80041a4 <HAL_RCC_OscConfig+0x2b4>)
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004116:	f7fe f875 	bl	8002204 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800411e:	f7fe f871 	bl	8002204 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e14d      	b.n	80043cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004130:	4b1a      	ldr	r3, [pc, #104]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8004132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1f0      	bne.n	800411e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80a0 	beq.w	800428a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800414a:	2300      	movs	r3, #0
 800414c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800414e:	4b13      	ldr	r3, [pc, #76]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10f      	bne.n	800417a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800415a:	2300      	movs	r3, #0
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	4b0f      	ldr	r3, [pc, #60]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	4a0e      	ldr	r2, [pc, #56]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 8004164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004168:	6413      	str	r3, [r2, #64]	; 0x40
 800416a:	4b0c      	ldr	r3, [pc, #48]	; (800419c <HAL_RCC_OscConfig+0x2ac>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004172:	60bb      	str	r3, [r7, #8]
 8004174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004176:	2301      	movs	r3, #1
 8004178:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417a:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <HAL_RCC_OscConfig+0x2b8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004182:	2b00      	cmp	r3, #0
 8004184:	d121      	bne.n	80041ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004186:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <HAL_RCC_OscConfig+0x2b8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a07      	ldr	r2, [pc, #28]	; (80041a8 <HAL_RCC_OscConfig+0x2b8>)
 800418c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004192:	f7fe f837 	bl	8002204 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004198:	e011      	b.n	80041be <HAL_RCC_OscConfig+0x2ce>
 800419a:	bf00      	nop
 800419c:	40023800 	.word	0x40023800
 80041a0:	42470000 	.word	0x42470000
 80041a4:	42470e80 	.word	0x42470e80
 80041a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ac:	f7fe f82a 	bl	8002204 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e106      	b.n	80043cc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041be:	4b85      	ldr	r3, [pc, #532]	; (80043d4 <HAL_RCC_OscConfig+0x4e4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d106      	bne.n	80041e0 <HAL_RCC_OscConfig+0x2f0>
 80041d2:	4b81      	ldr	r3, [pc, #516]	; (80043d8 <HAL_RCC_OscConfig+0x4e8>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	4a80      	ldr	r2, [pc, #512]	; (80043d8 <HAL_RCC_OscConfig+0x4e8>)
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	6713      	str	r3, [r2, #112]	; 0x70
 80041de:	e01c      	b.n	800421a <HAL_RCC_OscConfig+0x32a>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b05      	cmp	r3, #5
 80041e6:	d10c      	bne.n	8004202 <HAL_RCC_OscConfig+0x312>
 80041e8:	4b7b      	ldr	r3, [pc, #492]	; (80043d8 <HAL_RCC_OscConfig+0x4e8>)
 80041ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ec:	4a7a      	ldr	r2, [pc, #488]	; (80043d8 <HAL_RCC_OscConfig+0x4e8>)
 80041ee:	f043 0304 	orr.w	r3, r3, #4
 80041f2:	6713      	str	r3, [r2, #112]	; 0x70
 80041f4:	4b78      	ldr	r3, [pc, #480]	; (80043d8 <HAL_RCC_OscConfig+0x4e8>)
 80041f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f8:	4a77      	ldr	r2, [pc, #476]	; (80043d8 <HAL_RCC_OscConfig+0x4e8>)
 80041fa:	f043 0301 	orr.w	r3, r3, #1
 80041fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004200:	e00b      	b.n	800421a <HAL_RCC_OscConfig+0x32a>
 8004202:	4b75      	ldr	r3, [pc, #468]	; (80043d8 <HAL_RCC_OscConfig+0x4e8>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	4a74      	ldr	r2, [pc, #464]	; (80043d8 <HAL_RCC_OscConfig+0x4e8>)
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	6713      	str	r3, [r2, #112]	; 0x70
 800420e:	4b72      	ldr	r3, [pc, #456]	; (80043d8 <HAL_RCC_OscConfig+0x4e8>)
 8004210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004212:	4a71      	ldr	r2, [pc, #452]	; (80043d8 <HAL_RCC_OscConfig+0x4e8>)
 8004214:	f023 0304 	bic.w	r3, r3, #4
 8004218:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d015      	beq.n	800424e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004222:	f7fd ffef 	bl	8002204 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004228:	e00a      	b.n	8004240 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800422a:	f7fd ffeb 	bl	8002204 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	f241 3288 	movw	r2, #5000	; 0x1388
 8004238:	4293      	cmp	r3, r2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e0c5      	b.n	80043cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004240:	4b65      	ldr	r3, [pc, #404]	; (80043d8 <HAL_RCC_OscConfig+0x4e8>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0ee      	beq.n	800422a <HAL_RCC_OscConfig+0x33a>
 800424c:	e014      	b.n	8004278 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800424e:	f7fd ffd9 	bl	8002204 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004254:	e00a      	b.n	800426c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004256:	f7fd ffd5 	bl	8002204 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	f241 3288 	movw	r2, #5000	; 0x1388
 8004264:	4293      	cmp	r3, r2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e0af      	b.n	80043cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800426c:	4b5a      	ldr	r3, [pc, #360]	; (80043d8 <HAL_RCC_OscConfig+0x4e8>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1ee      	bne.n	8004256 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004278:	7dfb      	ldrb	r3, [r7, #23]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d105      	bne.n	800428a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800427e:	4b56      	ldr	r3, [pc, #344]	; (80043d8 <HAL_RCC_OscConfig+0x4e8>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	4a55      	ldr	r2, [pc, #340]	; (80043d8 <HAL_RCC_OscConfig+0x4e8>)
 8004284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004288:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 809b 	beq.w	80043ca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004294:	4b50      	ldr	r3, [pc, #320]	; (80043d8 <HAL_RCC_OscConfig+0x4e8>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 030c 	and.w	r3, r3, #12
 800429c:	2b08      	cmp	r3, #8
 800429e:	d05c      	beq.n	800435a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d141      	bne.n	800432c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a8:	4b4c      	ldr	r3, [pc, #304]	; (80043dc <HAL_RCC_OscConfig+0x4ec>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ae:	f7fd ffa9 	bl	8002204 <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b6:	f7fd ffa5 	bl	8002204 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e081      	b.n	80043cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c8:	4b43      	ldr	r3, [pc, #268]	; (80043d8 <HAL_RCC_OscConfig+0x4e8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1f0      	bne.n	80042b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	69da      	ldr	r2, [r3, #28]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	019b      	lsls	r3, r3, #6
 80042e4:	431a      	orrs	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ea:	085b      	lsrs	r3, r3, #1
 80042ec:	3b01      	subs	r3, #1
 80042ee:	041b      	lsls	r3, r3, #16
 80042f0:	431a      	orrs	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	061b      	lsls	r3, r3, #24
 80042f8:	4937      	ldr	r1, [pc, #220]	; (80043d8 <HAL_RCC_OscConfig+0x4e8>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042fe:	4b37      	ldr	r3, [pc, #220]	; (80043dc <HAL_RCC_OscConfig+0x4ec>)
 8004300:	2201      	movs	r2, #1
 8004302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004304:	f7fd ff7e 	bl	8002204 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800430c:	f7fd ff7a 	bl	8002204 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e056      	b.n	80043cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800431e:	4b2e      	ldr	r3, [pc, #184]	; (80043d8 <HAL_RCC_OscConfig+0x4e8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0f0      	beq.n	800430c <HAL_RCC_OscConfig+0x41c>
 800432a:	e04e      	b.n	80043ca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432c:	4b2b      	ldr	r3, [pc, #172]	; (80043dc <HAL_RCC_OscConfig+0x4ec>)
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004332:	f7fd ff67 	bl	8002204 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800433a:	f7fd ff63 	bl	8002204 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e03f      	b.n	80043cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434c:	4b22      	ldr	r3, [pc, #136]	; (80043d8 <HAL_RCC_OscConfig+0x4e8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f0      	bne.n	800433a <HAL_RCC_OscConfig+0x44a>
 8004358:	e037      	b.n	80043ca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e032      	b.n	80043cc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004366:	4b1c      	ldr	r3, [pc, #112]	; (80043d8 <HAL_RCC_OscConfig+0x4e8>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d028      	beq.n	80043c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800437e:	429a      	cmp	r2, r3
 8004380:	d121      	bne.n	80043c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800438c:	429a      	cmp	r2, r3
 800438e:	d11a      	bne.n	80043c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004396:	4013      	ands	r3, r2
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800439c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800439e:	4293      	cmp	r3, r2
 80043a0:	d111      	bne.n	80043c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ac:	085b      	lsrs	r3, r3, #1
 80043ae:	3b01      	subs	r3, #1
 80043b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d107      	bne.n	80043c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d001      	beq.n	80043ca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40007000 	.word	0x40007000
 80043d8:	40023800 	.word	0x40023800
 80043dc:	42470060 	.word	0x42470060

080043e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0cc      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043f4:	4b68      	ldr	r3, [pc, #416]	; (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d90c      	bls.n	800441c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004402:	4b65      	ldr	r3, [pc, #404]	; (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800440a:	4b63      	ldr	r3, [pc, #396]	; (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d001      	beq.n	800441c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e0b8      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d020      	beq.n	800446a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d005      	beq.n	8004440 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004434:	4b59      	ldr	r3, [pc, #356]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	4a58      	ldr	r2, [pc, #352]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800443e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0308 	and.w	r3, r3, #8
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800444c:	4b53      	ldr	r3, [pc, #332]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	4a52      	ldr	r2, [pc, #328]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004456:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004458:	4b50      	ldr	r3, [pc, #320]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	494d      	ldr	r1, [pc, #308]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	4313      	orrs	r3, r2
 8004468:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d044      	beq.n	8004500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d107      	bne.n	800448e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447e:	4b47      	ldr	r3, [pc, #284]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d119      	bne.n	80044be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e07f      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b02      	cmp	r3, #2
 8004494:	d003      	beq.n	800449e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800449a:	2b03      	cmp	r3, #3
 800449c:	d107      	bne.n	80044ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800449e:	4b3f      	ldr	r3, [pc, #252]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e06f      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ae:	4b3b      	ldr	r3, [pc, #236]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e067      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044be:	4b37      	ldr	r3, [pc, #220]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f023 0203 	bic.w	r2, r3, #3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	4934      	ldr	r1, [pc, #208]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044d0:	f7fd fe98 	bl	8002204 <HAL_GetTick>
 80044d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d6:	e00a      	b.n	80044ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d8:	f7fd fe94 	bl	8002204 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e04f      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ee:	4b2b      	ldr	r3, [pc, #172]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 020c 	and.w	r2, r3, #12
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d1eb      	bne.n	80044d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004500:	4b25      	ldr	r3, [pc, #148]	; (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d20c      	bcs.n	8004528 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450e:	4b22      	ldr	r3, [pc, #136]	; (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004516:	4b20      	ldr	r3, [pc, #128]	; (8004598 <HAL_RCC_ClockConfig+0x1b8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d001      	beq.n	8004528 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e032      	b.n	800458e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d008      	beq.n	8004546 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004534:	4b19      	ldr	r3, [pc, #100]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	4916      	ldr	r1, [pc, #88]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	4313      	orrs	r3, r2
 8004544:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d009      	beq.n	8004566 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004552:	4b12      	ldr	r3, [pc, #72]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	490e      	ldr	r1, [pc, #56]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	4313      	orrs	r3, r2
 8004564:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004566:	f000 f821 	bl	80045ac <HAL_RCC_GetSysClockFreq>
 800456a:	4602      	mov	r2, r0
 800456c:	4b0b      	ldr	r3, [pc, #44]	; (800459c <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	091b      	lsrs	r3, r3, #4
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	490a      	ldr	r1, [pc, #40]	; (80045a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004578:	5ccb      	ldrb	r3, [r1, r3]
 800457a:	fa22 f303 	lsr.w	r3, r2, r3
 800457e:	4a09      	ldr	r2, [pc, #36]	; (80045a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004582:	4b09      	ldr	r3, [pc, #36]	; (80045a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f7fd fdf8 	bl	800217c <HAL_InitTick>

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40023c00 	.word	0x40023c00
 800459c:	40023800 	.word	0x40023800
 80045a0:	080089d8 	.word	0x080089d8
 80045a4:	20000014 	.word	0x20000014
 80045a8:	20000018 	.word	0x20000018

080045ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045ac:	b5b0      	push	{r4, r5, r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045b2:	2100      	movs	r1, #0
 80045b4:	6079      	str	r1, [r7, #4]
 80045b6:	2100      	movs	r1, #0
 80045b8:	60f9      	str	r1, [r7, #12]
 80045ba:	2100      	movs	r1, #0
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80045be:	2100      	movs	r1, #0
 80045c0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045c2:	4952      	ldr	r1, [pc, #328]	; (800470c <HAL_RCC_GetSysClockFreq+0x160>)
 80045c4:	6889      	ldr	r1, [r1, #8]
 80045c6:	f001 010c 	and.w	r1, r1, #12
 80045ca:	2908      	cmp	r1, #8
 80045cc:	d00d      	beq.n	80045ea <HAL_RCC_GetSysClockFreq+0x3e>
 80045ce:	2908      	cmp	r1, #8
 80045d0:	f200 8094 	bhi.w	80046fc <HAL_RCC_GetSysClockFreq+0x150>
 80045d4:	2900      	cmp	r1, #0
 80045d6:	d002      	beq.n	80045de <HAL_RCC_GetSysClockFreq+0x32>
 80045d8:	2904      	cmp	r1, #4
 80045da:	d003      	beq.n	80045e4 <HAL_RCC_GetSysClockFreq+0x38>
 80045dc:	e08e      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045de:	4b4c      	ldr	r3, [pc, #304]	; (8004710 <HAL_RCC_GetSysClockFreq+0x164>)
 80045e0:	60bb      	str	r3, [r7, #8]
       break;
 80045e2:	e08e      	b.n	8004702 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045e4:	4b4b      	ldr	r3, [pc, #300]	; (8004714 <HAL_RCC_GetSysClockFreq+0x168>)
 80045e6:	60bb      	str	r3, [r7, #8]
      break;
 80045e8:	e08b      	b.n	8004702 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045ea:	4948      	ldr	r1, [pc, #288]	; (800470c <HAL_RCC_GetSysClockFreq+0x160>)
 80045ec:	6849      	ldr	r1, [r1, #4]
 80045ee:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80045f2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045f4:	4945      	ldr	r1, [pc, #276]	; (800470c <HAL_RCC_GetSysClockFreq+0x160>)
 80045f6:	6849      	ldr	r1, [r1, #4]
 80045f8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80045fc:	2900      	cmp	r1, #0
 80045fe:	d024      	beq.n	800464a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004600:	4942      	ldr	r1, [pc, #264]	; (800470c <HAL_RCC_GetSysClockFreq+0x160>)
 8004602:	6849      	ldr	r1, [r1, #4]
 8004604:	0989      	lsrs	r1, r1, #6
 8004606:	4608      	mov	r0, r1
 8004608:	f04f 0100 	mov.w	r1, #0
 800460c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004610:	f04f 0500 	mov.w	r5, #0
 8004614:	ea00 0204 	and.w	r2, r0, r4
 8004618:	ea01 0305 	and.w	r3, r1, r5
 800461c:	493d      	ldr	r1, [pc, #244]	; (8004714 <HAL_RCC_GetSysClockFreq+0x168>)
 800461e:	fb01 f003 	mul.w	r0, r1, r3
 8004622:	2100      	movs	r1, #0
 8004624:	fb01 f102 	mul.w	r1, r1, r2
 8004628:	1844      	adds	r4, r0, r1
 800462a:	493a      	ldr	r1, [pc, #232]	; (8004714 <HAL_RCC_GetSysClockFreq+0x168>)
 800462c:	fba2 0101 	umull	r0, r1, r2, r1
 8004630:	1863      	adds	r3, r4, r1
 8004632:	4619      	mov	r1, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	461a      	mov	r2, r3
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	f7fc fab4 	bl	8000ba8 <__aeabi_uldivmod>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4613      	mov	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	e04a      	b.n	80046e0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800464a:	4b30      	ldr	r3, [pc, #192]	; (800470c <HAL_RCC_GetSysClockFreq+0x160>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	099b      	lsrs	r3, r3, #6
 8004650:	461a      	mov	r2, r3
 8004652:	f04f 0300 	mov.w	r3, #0
 8004656:	f240 10ff 	movw	r0, #511	; 0x1ff
 800465a:	f04f 0100 	mov.w	r1, #0
 800465e:	ea02 0400 	and.w	r4, r2, r0
 8004662:	ea03 0501 	and.w	r5, r3, r1
 8004666:	4620      	mov	r0, r4
 8004668:	4629      	mov	r1, r5
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	014b      	lsls	r3, r1, #5
 8004674:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004678:	0142      	lsls	r2, r0, #5
 800467a:	4610      	mov	r0, r2
 800467c:	4619      	mov	r1, r3
 800467e:	1b00      	subs	r0, r0, r4
 8004680:	eb61 0105 	sbc.w	r1, r1, r5
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	018b      	lsls	r3, r1, #6
 800468e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004692:	0182      	lsls	r2, r0, #6
 8004694:	1a12      	subs	r2, r2, r0
 8004696:	eb63 0301 	sbc.w	r3, r3, r1
 800469a:	f04f 0000 	mov.w	r0, #0
 800469e:	f04f 0100 	mov.w	r1, #0
 80046a2:	00d9      	lsls	r1, r3, #3
 80046a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046a8:	00d0      	lsls	r0, r2, #3
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	1912      	adds	r2, r2, r4
 80046b0:	eb45 0303 	adc.w	r3, r5, r3
 80046b4:	f04f 0000 	mov.w	r0, #0
 80046b8:	f04f 0100 	mov.w	r1, #0
 80046bc:	0299      	lsls	r1, r3, #10
 80046be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80046c2:	0290      	lsls	r0, r2, #10
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4610      	mov	r0, r2
 80046ca:	4619      	mov	r1, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	461a      	mov	r2, r3
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	f7fc fa68 	bl	8000ba8 <__aeabi_uldivmod>
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	4613      	mov	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046e0:	4b0a      	ldr	r3, [pc, #40]	; (800470c <HAL_RCC_GetSysClockFreq+0x160>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	0c1b      	lsrs	r3, r3, #16
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	3301      	adds	r3, #1
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f8:	60bb      	str	r3, [r7, #8]
      break;
 80046fa:	e002      	b.n	8004702 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046fc:	4b04      	ldr	r3, [pc, #16]	; (8004710 <HAL_RCC_GetSysClockFreq+0x164>)
 80046fe:	60bb      	str	r3, [r7, #8]
      break;
 8004700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004702:	68bb      	ldr	r3, [r7, #8]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bdb0      	pop	{r4, r5, r7, pc}
 800470c:	40023800 	.word	0x40023800
 8004710:	00f42400 	.word	0x00f42400
 8004714:	017d7840 	.word	0x017d7840

08004718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800471c:	4b03      	ldr	r3, [pc, #12]	; (800472c <HAL_RCC_GetHCLKFreq+0x14>)
 800471e:	681b      	ldr	r3, [r3, #0]
}
 8004720:	4618      	mov	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000014 	.word	0x20000014

08004730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004734:	f7ff fff0 	bl	8004718 <HAL_RCC_GetHCLKFreq>
 8004738:	4602      	mov	r2, r0
 800473a:	4b05      	ldr	r3, [pc, #20]	; (8004750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	0a9b      	lsrs	r3, r3, #10
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	4903      	ldr	r1, [pc, #12]	; (8004754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004746:	5ccb      	ldrb	r3, [r1, r3]
 8004748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800474c:	4618      	mov	r0, r3
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40023800 	.word	0x40023800
 8004754:	080089e8 	.word	0x080089e8

08004758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800475c:	f7ff ffdc 	bl	8004718 <HAL_RCC_GetHCLKFreq>
 8004760:	4602      	mov	r2, r0
 8004762:	4b05      	ldr	r3, [pc, #20]	; (8004778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	0b5b      	lsrs	r3, r3, #13
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	4903      	ldr	r1, [pc, #12]	; (800477c <HAL_RCC_GetPCLK2Freq+0x24>)
 800476e:	5ccb      	ldrb	r3, [r1, r3]
 8004770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004774:	4618      	mov	r0, r3
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40023800 	.word	0x40023800
 800477c:	080089e8 	.word	0x080089e8

08004780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e03f      	b.n	8004812 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fd fae4 	bl	8001d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2224      	movs	r2, #36	; 0x24
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 ff65 	bl	8005694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695a      	ldr	r2, [r3, #20]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b08a      	sub	sp, #40	; 0x28
 800481e:	af02      	add	r7, sp, #8
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	603b      	str	r3, [r7, #0]
 8004826:	4613      	mov	r3, r2
 8004828:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b20      	cmp	r3, #32
 8004838:	d17c      	bne.n	8004934 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <HAL_UART_Transmit+0x2c>
 8004840:	88fb      	ldrh	r3, [r7, #6]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e075      	b.n	8004936 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_UART_Transmit+0x3e>
 8004854:	2302      	movs	r3, #2
 8004856:	e06e      	b.n	8004936 <HAL_UART_Transmit+0x11c>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2221      	movs	r2, #33	; 0x21
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800486e:	f7fd fcc9 	bl	8002204 <HAL_GetTick>
 8004872:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	88fa      	ldrh	r2, [r7, #6]
 8004878:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	88fa      	ldrh	r2, [r7, #6]
 800487e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004888:	d108      	bne.n	800489c <HAL_UART_Transmit+0x82>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d104      	bne.n	800489c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004892:	2300      	movs	r3, #0
 8004894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	61bb      	str	r3, [r7, #24]
 800489a:	e003      	b.n	80048a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80048ac:	e02a      	b.n	8004904 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2200      	movs	r2, #0
 80048b6:	2180      	movs	r1, #128	; 0x80
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 fc21 	bl	8005100 <UART_WaitOnFlagUntilTimeout>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e036      	b.n	8004936 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10b      	bne.n	80048e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	3302      	adds	r3, #2
 80048e2:	61bb      	str	r3, [r7, #24]
 80048e4:	e007      	b.n	80048f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	781a      	ldrb	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	3301      	adds	r3, #1
 80048f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004908:	b29b      	uxth	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1cf      	bne.n	80048ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2200      	movs	r2, #0
 8004916:	2140      	movs	r1, #64	; 0x40
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 fbf1 	bl	8005100 <UART_WaitOnFlagUntilTimeout>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e006      	b.n	8004936 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004930:	2300      	movs	r3, #0
 8004932:	e000      	b.n	8004936 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004934:	2302      	movs	r3, #2
  }
}
 8004936:	4618      	mov	r0, r3
 8004938:	3720      	adds	r7, #32
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	4613      	mov	r3, r2
 800494a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b20      	cmp	r3, #32
 8004956:	d11d      	bne.n	8004994 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <HAL_UART_Receive_DMA+0x26>
 800495e:	88fb      	ldrh	r3, [r7, #6]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e016      	b.n	8004996 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496e:	2b01      	cmp	r3, #1
 8004970:	d101      	bne.n	8004976 <HAL_UART_Receive_DMA+0x38>
 8004972:	2302      	movs	r3, #2
 8004974:	e00f      	b.n	8004996 <HAL_UART_Receive_DMA+0x58>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	461a      	mov	r2, r3
 8004988:	68b9      	ldr	r1, [r7, #8]
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 fc26 	bl	80051dc <UART_Start_Receive_DMA>
 8004990:	4603      	mov	r3, r0
 8004992:	e000      	b.n	8004996 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004994:	2302      	movs	r3, #2
  }
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b0ba      	sub	sp, #232	; 0xe8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80049de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10f      	bne.n	8004a06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d009      	beq.n	8004a06 <HAL_UART_IRQHandler+0x66>
 80049f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fd8d 	bl	800551e <UART_Receive_IT>
      return;
 8004a04:	e256      	b.n	8004eb4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 80de 	beq.w	8004bcc <HAL_UART_IRQHandler+0x22c>
 8004a10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d106      	bne.n	8004a2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 80d1 	beq.w	8004bcc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00b      	beq.n	8004a4e <HAL_UART_IRQHandler+0xae>
 8004a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	f043 0201 	orr.w	r2, r3, #1
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00b      	beq.n	8004a72 <HAL_UART_IRQHandler+0xd2>
 8004a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d005      	beq.n	8004a72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	f043 0202 	orr.w	r2, r3, #2
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00b      	beq.n	8004a96 <HAL_UART_IRQHandler+0xf6>
 8004a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d005      	beq.n	8004a96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f043 0204 	orr.w	r2, r3, #4
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d011      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x126>
 8004aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d105      	bne.n	8004aba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	f043 0208 	orr.w	r2, r3, #8
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 81ed 	beq.w	8004eaa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d008      	beq.n	8004aee <HAL_UART_IRQHandler+0x14e>
 8004adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ae0:	f003 0320 	and.w	r3, r3, #32
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 fd18 	bl	800551e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af8:	2b40      	cmp	r3, #64	; 0x40
 8004afa:	bf0c      	ite	eq
 8004afc:	2301      	moveq	r3, #1
 8004afe:	2300      	movne	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d103      	bne.n	8004b1a <HAL_UART_IRQHandler+0x17a>
 8004b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d04f      	beq.n	8004bba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fc20 	bl	8005360 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2a:	2b40      	cmp	r3, #64	; 0x40
 8004b2c:	d141      	bne.n	8004bb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3314      	adds	r3, #20
 8004b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b3c:	e853 3f00 	ldrex	r3, [r3]
 8004b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3314      	adds	r3, #20
 8004b56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b6a:	e841 2300 	strex	r3, r2, [r1]
 8004b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1d9      	bne.n	8004b2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d013      	beq.n	8004baa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b86:	4a7d      	ldr	r2, [pc, #500]	; (8004d7c <HAL_UART_IRQHandler+0x3dc>)
 8004b88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fd fdf0 	bl	8002774 <HAL_DMA_Abort_IT>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d016      	beq.n	8004bc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba8:	e00e      	b.n	8004bc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f99a 	bl	8004ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb0:	e00a      	b.n	8004bc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f996 	bl	8004ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb8:	e006      	b.n	8004bc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f992 	bl	8004ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004bc6:	e170      	b.n	8004eaa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc8:	bf00      	nop
    return;
 8004bca:	e16e      	b.n	8004eaa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	f040 814a 	bne.w	8004e6a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bda:	f003 0310 	and.w	r3, r3, #16
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 8143 	beq.w	8004e6a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be8:	f003 0310 	and.w	r3, r3, #16
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 813c 	beq.w	8004e6a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60bb      	str	r3, [r7, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c12:	2b40      	cmp	r3, #64	; 0x40
 8004c14:	f040 80b4 	bne.w	8004d80 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8140 	beq.w	8004eae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c36:	429a      	cmp	r2, r3
 8004c38:	f080 8139 	bcs.w	8004eae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4e:	f000 8088 	beq.w	8004d62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	330c      	adds	r3, #12
 8004c58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c60:	e853 3f00 	ldrex	r3, [r3]
 8004c64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	330c      	adds	r3, #12
 8004c7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1d9      	bne.n	8004c52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3314      	adds	r3, #20
 8004ca4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ca8:	e853 3f00 	ldrex	r3, [r3]
 8004cac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004cae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cb0:	f023 0301 	bic.w	r3, r3, #1
 8004cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3314      	adds	r3, #20
 8004cbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004cc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004cc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004cca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cce:	e841 2300 	strex	r3, r2, [r1]
 8004cd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004cd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1e1      	bne.n	8004c9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3314      	adds	r3, #20
 8004ce0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ce4:	e853 3f00 	ldrex	r3, [r3]
 8004ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3314      	adds	r3, #20
 8004cfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004cfe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d06:	e841 2300 	strex	r3, r2, [r1]
 8004d0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1e3      	bne.n	8004cda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	330c      	adds	r3, #12
 8004d26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d2a:	e853 3f00 	ldrex	r3, [r3]
 8004d2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d32:	f023 0310 	bic.w	r3, r3, #16
 8004d36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	330c      	adds	r3, #12
 8004d40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d44:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e3      	bne.n	8004d20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fd fc99 	bl	8002694 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	4619      	mov	r1, r3
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f8c0 	bl	8004ef8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d78:	e099      	b.n	8004eae <HAL_UART_IRQHandler+0x50e>
 8004d7a:	bf00      	nop
 8004d7c:	08005427 	.word	0x08005427
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 808b 	beq.w	8004eb2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004d9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 8086 	beq.w	8004eb2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	330c      	adds	r3, #12
 8004dac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db0:	e853 3f00 	ldrex	r3, [r3]
 8004db4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004dca:	647a      	str	r2, [r7, #68]	; 0x44
 8004dcc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dd2:	e841 2300 	strex	r3, r2, [r1]
 8004dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1e3      	bne.n	8004da6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3314      	adds	r3, #20
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	623b      	str	r3, [r7, #32]
   return(result);
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	f023 0301 	bic.w	r3, r3, #1
 8004df4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3314      	adds	r3, #20
 8004dfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e02:	633a      	str	r2, [r7, #48]	; 0x30
 8004e04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e0a:	e841 2300 	strex	r3, r2, [r1]
 8004e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1e3      	bne.n	8004dde <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	330c      	adds	r3, #12
 8004e2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	e853 3f00 	ldrex	r3, [r3]
 8004e32:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0310 	bic.w	r3, r3, #16
 8004e3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	330c      	adds	r3, #12
 8004e44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e48:	61fa      	str	r2, [r7, #28]
 8004e4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	69b9      	ldr	r1, [r7, #24]
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	617b      	str	r3, [r7, #20]
   return(result);
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e3      	bne.n	8004e24 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e60:	4619      	mov	r1, r3
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f848 	bl	8004ef8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e68:	e023      	b.n	8004eb2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d009      	beq.n	8004e8a <HAL_UART_IRQHandler+0x4ea>
 8004e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fae3 	bl	800544e <UART_Transmit_IT>
    return;
 8004e88:	e014      	b.n	8004eb4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00e      	beq.n	8004eb4 <HAL_UART_IRQHandler+0x514>
 8004e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d008      	beq.n	8004eb4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fb23 	bl	80054ee <UART_EndTransmit_IT>
    return;
 8004ea8:	e004      	b.n	8004eb4 <HAL_UART_IRQHandler+0x514>
    return;
 8004eaa:	bf00      	nop
 8004eac:	e002      	b.n	8004eb4 <HAL_UART_IRQHandler+0x514>
      return;
 8004eae:	bf00      	nop
 8004eb0:	e000      	b.n	8004eb4 <HAL_UART_IRQHandler+0x514>
      return;
 8004eb2:	bf00      	nop
  }
}
 8004eb4:	37e8      	adds	r7, #232	; 0xe8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop

08004ebc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	460b      	mov	r3, r1
 8004f02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b09c      	sub	sp, #112	; 0x70
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d172      	bne.n	8005012 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2e:	2200      	movs	r2, #0
 8004f30:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	330c      	adds	r3, #12
 8004f38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f3c:	e853 3f00 	ldrex	r3, [r3]
 8004f40:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f48:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	330c      	adds	r3, #12
 8004f50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f52:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f54:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f5a:	e841 2300 	strex	r3, r2, [r1]
 8004f5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1e5      	bne.n	8004f32 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3314      	adds	r3, #20
 8004f6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f70:	e853 3f00 	ldrex	r3, [r3]
 8004f74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f78:	f023 0301 	bic.w	r3, r3, #1
 8004f7c:	667b      	str	r3, [r7, #100]	; 0x64
 8004f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3314      	adds	r3, #20
 8004f84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f86:	647a      	str	r2, [r7, #68]	; 0x44
 8004f88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f8e:	e841 2300 	strex	r3, r2, [r1]
 8004f92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1e5      	bne.n	8004f66 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3314      	adds	r3, #20
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	623b      	str	r3, [r7, #32]
   return(result);
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb0:	663b      	str	r3, [r7, #96]	; 0x60
 8004fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3314      	adds	r3, #20
 8004fb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fba:	633a      	str	r2, [r7, #48]	; 0x30
 8004fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fc2:	e841 2300 	strex	r3, r2, [r1]
 8004fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1e5      	bne.n	8004f9a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d119      	bne.n	8005012 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	330c      	adds	r3, #12
 8004fe4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	e853 3f00 	ldrex	r3, [r3]
 8004fec:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f023 0310 	bic.w	r3, r3, #16
 8004ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	330c      	adds	r3, #12
 8004ffc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ffe:	61fa      	str	r2, [r7, #28]
 8005000:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005002:	69b9      	ldr	r1, [r7, #24]
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	e841 2300 	strex	r3, r2, [r1]
 800500a:	617b      	str	r3, [r7, #20]
   return(result);
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1e5      	bne.n	8004fde <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	2b01      	cmp	r3, #1
 8005018:	d106      	bne.n	8005028 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800501a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800501e:	4619      	mov	r1, r3
 8005020:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005022:	f7ff ff69 	bl	8004ef8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005026:	e002      	b.n	800502e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005028:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800502a:	f7fc fb51 	bl	80016d0 <HAL_UART_RxCpltCallback>
}
 800502e:	bf00      	nop
 8005030:	3770      	adds	r7, #112	; 0x70
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005048:	2b01      	cmp	r3, #1
 800504a:	d108      	bne.n	800505e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005050:	085b      	lsrs	r3, r3, #1
 8005052:	b29b      	uxth	r3, r3
 8005054:	4619      	mov	r1, r3
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7ff ff4e 	bl	8004ef8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800505c:	e002      	b.n	8005064 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f7ff ff36 	bl	8004ed0 <HAL_UART_RxHalfCpltCallback>
}
 8005064:	bf00      	nop
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005074:	2300      	movs	r3, #0
 8005076:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005088:	2b80      	cmp	r3, #128	; 0x80
 800508a:	bf0c      	ite	eq
 800508c:	2301      	moveq	r3, #1
 800508e:	2300      	movne	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b21      	cmp	r3, #33	; 0x21
 800509e:	d108      	bne.n	80050b2 <UART_DMAError+0x46>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2200      	movs	r2, #0
 80050aa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80050ac:	68b8      	ldr	r0, [r7, #8]
 80050ae:	f000 f92f 	bl	8005310 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050bc:	2b40      	cmp	r3, #64	; 0x40
 80050be:	bf0c      	ite	eq
 80050c0:	2301      	moveq	r3, #1
 80050c2:	2300      	movne	r3, #0
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b22      	cmp	r3, #34	; 0x22
 80050d2:	d108      	bne.n	80050e6 <UART_DMAError+0x7a>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d005      	beq.n	80050e6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2200      	movs	r2, #0
 80050de:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80050e0:	68b8      	ldr	r0, [r7, #8]
 80050e2:	f000 f93d 	bl	8005360 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	f043 0210 	orr.w	r2, r3, #16
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050f2:	68b8      	ldr	r0, [r7, #8]
 80050f4:	f7ff fef6 	bl	8004ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b090      	sub	sp, #64	; 0x40
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	4613      	mov	r3, r2
 800510e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005110:	e050      	b.n	80051b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005118:	d04c      	beq.n	80051b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800511a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800511c:	2b00      	cmp	r3, #0
 800511e:	d007      	beq.n	8005130 <UART_WaitOnFlagUntilTimeout+0x30>
 8005120:	f7fd f870 	bl	8002204 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800512c:	429a      	cmp	r2, r3
 800512e:	d241      	bcs.n	80051b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	330c      	adds	r3, #12
 8005136:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	330c      	adds	r3, #12
 800514e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005150:	637a      	str	r2, [r7, #52]	; 0x34
 8005152:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800515e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e5      	bne.n	8005130 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3314      	adds	r3, #20
 800516a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	e853 3f00 	ldrex	r3, [r3]
 8005172:	613b      	str	r3, [r7, #16]
   return(result);
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f023 0301 	bic.w	r3, r3, #1
 800517a:	63bb      	str	r3, [r7, #56]	; 0x38
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3314      	adds	r3, #20
 8005182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005184:	623a      	str	r2, [r7, #32]
 8005186:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005188:	69f9      	ldr	r1, [r7, #28]
 800518a:	6a3a      	ldr	r2, [r7, #32]
 800518c:	e841 2300 	strex	r3, r2, [r1]
 8005190:	61bb      	str	r3, [r7, #24]
   return(result);
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1e5      	bne.n	8005164 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e00f      	b.n	80051d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	4013      	ands	r3, r2
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	bf0c      	ite	eq
 80051c4:	2301      	moveq	r3, #1
 80051c6:	2300      	movne	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	461a      	mov	r2, r3
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d09f      	beq.n	8005112 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3740      	adds	r7, #64	; 0x40
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b098      	sub	sp, #96	; 0x60
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	4613      	mov	r3, r2
 80051e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	88fa      	ldrh	r2, [r7, #6]
 80051f4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2222      	movs	r2, #34	; 0x22
 8005200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	4a3e      	ldr	r2, [pc, #248]	; (8005304 <UART_Start_Receive_DMA+0x128>)
 800520a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	4a3d      	ldr	r2, [pc, #244]	; (8005308 <UART_Start_Receive_DMA+0x12c>)
 8005212:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	4a3c      	ldr	r2, [pc, #240]	; (800530c <UART_Start_Receive_DMA+0x130>)
 800521a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	2200      	movs	r2, #0
 8005222:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005224:	f107 0308 	add.w	r3, r7, #8
 8005228:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3304      	adds	r3, #4
 8005234:	4619      	mov	r1, r3
 8005236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	88fb      	ldrh	r3, [r7, #6]
 800523c:	f7fd f9d2 	bl	80025e4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005240:	2300      	movs	r3, #0
 8005242:	613b      	str	r3, [r7, #16]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	330c      	adds	r3, #12
 8005264:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800526e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005274:	65bb      	str	r3, [r7, #88]	; 0x58
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	330c      	adds	r3, #12
 800527c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800527e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005280:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005284:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800528c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e5      	bne.n	800525e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3314      	adds	r3, #20
 8005298:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a4:	f043 0301 	orr.w	r3, r3, #1
 80052a8:	657b      	str	r3, [r7, #84]	; 0x54
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3314      	adds	r3, #20
 80052b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052b2:	63ba      	str	r2, [r7, #56]	; 0x38
 80052b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e5      	bne.n	8005292 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3314      	adds	r3, #20
 80052cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	617b      	str	r3, [r7, #20]
   return(result);
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052dc:	653b      	str	r3, [r7, #80]	; 0x50
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3314      	adds	r3, #20
 80052e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80052e6:	627a      	str	r2, [r7, #36]	; 0x24
 80052e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	6a39      	ldr	r1, [r7, #32]
 80052ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1e5      	bne.n	80052c6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3760      	adds	r7, #96	; 0x60
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	08004f11 	.word	0x08004f11
 8005308:	08005037 	.word	0x08005037
 800530c:	0800506d 	.word	0x0800506d

08005310 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005310:	b480      	push	{r7}
 8005312:	b089      	sub	sp, #36	; 0x24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	330c      	adds	r3, #12
 800531e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	60bb      	str	r3, [r7, #8]
   return(result);
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800532e:	61fb      	str	r3, [r7, #28]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	330c      	adds	r3, #12
 8005336:	69fa      	ldr	r2, [r7, #28]
 8005338:	61ba      	str	r2, [r7, #24]
 800533a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	6979      	ldr	r1, [r7, #20]
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	e841 2300 	strex	r3, r2, [r1]
 8005344:	613b      	str	r3, [r7, #16]
   return(result);
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e5      	bne.n	8005318 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005354:	bf00      	nop
 8005356:	3724      	adds	r7, #36	; 0x24
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005360:	b480      	push	{r7}
 8005362:	b095      	sub	sp, #84	; 0x54
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	330c      	adds	r3, #12
 800536e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005372:	e853 3f00 	ldrex	r3, [r3]
 8005376:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800537e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	330c      	adds	r3, #12
 8005386:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005388:	643a      	str	r2, [r7, #64]	; 0x40
 800538a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800538e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005390:	e841 2300 	strex	r3, r2, [r1]
 8005394:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e5      	bne.n	8005368 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3314      	adds	r3, #20
 80053a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f023 0301 	bic.w	r3, r3, #1
 80053b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3314      	adds	r3, #20
 80053ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e5      	bne.n	800539c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d119      	bne.n	800540c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	330c      	adds	r3, #12
 80053de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	e853 3f00 	ldrex	r3, [r3]
 80053e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f023 0310 	bic.w	r3, r3, #16
 80053ee:	647b      	str	r3, [r7, #68]	; 0x44
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	330c      	adds	r3, #12
 80053f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053f8:	61ba      	str	r2, [r7, #24]
 80053fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fc:	6979      	ldr	r1, [r7, #20]
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	e841 2300 	strex	r3, r2, [r1]
 8005404:	613b      	str	r3, [r7, #16]
   return(result);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1e5      	bne.n	80053d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	631a      	str	r2, [r3, #48]	; 0x30
}
 800541a:	bf00      	nop
 800541c:	3754      	adds	r7, #84	; 0x54
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b084      	sub	sp, #16
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f7ff fd4f 	bl	8004ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005446:	bf00      	nop
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800544e:	b480      	push	{r7}
 8005450:	b085      	sub	sp, #20
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b21      	cmp	r3, #33	; 0x21
 8005460:	d13e      	bne.n	80054e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546a:	d114      	bne.n	8005496 <UART_Transmit_IT+0x48>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d110      	bne.n	8005496 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005488:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	1c9a      	adds	r2, r3, #2
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	621a      	str	r2, [r3, #32]
 8005494:	e008      	b.n	80054a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	1c59      	adds	r1, r3, #1
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6211      	str	r1, [r2, #32]
 80054a0:	781a      	ldrb	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	4619      	mov	r1, r3
 80054b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10f      	bne.n	80054dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	e000      	b.n	80054e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054e0:	2302      	movs	r3, #2
  }
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b082      	sub	sp, #8
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005504:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff fcd4 	bl	8004ebc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b08c      	sub	sp, #48	; 0x30
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b22      	cmp	r3, #34	; 0x22
 8005530:	f040 80ab 	bne.w	800568a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800553c:	d117      	bne.n	800556e <UART_Receive_IT+0x50>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d113      	bne.n	800556e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005546:	2300      	movs	r3, #0
 8005548:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	b29b      	uxth	r3, r3
 8005558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555c:	b29a      	uxth	r2, r3
 800555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005560:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	1c9a      	adds	r2, r3, #2
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	629a      	str	r2, [r3, #40]	; 0x28
 800556c:	e026      	b.n	80055bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005572:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005574:	2300      	movs	r3, #0
 8005576:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005580:	d007      	beq.n	8005592 <UART_Receive_IT+0x74>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10a      	bne.n	80055a0 <UART_Receive_IT+0x82>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d106      	bne.n	80055a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	b2da      	uxtb	r2, r3
 800559a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559c:	701a      	strb	r2, [r3, #0]
 800559e:	e008      	b.n	80055b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	4619      	mov	r1, r3
 80055ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d15a      	bne.n	8005686 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0220 	bic.w	r2, r2, #32
 80055de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695a      	ldr	r2, [r3, #20]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0201 	bic.w	r2, r2, #1
 80055fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560c:	2b01      	cmp	r3, #1
 800560e:	d135      	bne.n	800567c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	330c      	adds	r3, #12
 800561c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	613b      	str	r3, [r7, #16]
   return(result);
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f023 0310 	bic.w	r3, r3, #16
 800562c:	627b      	str	r3, [r7, #36]	; 0x24
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	330c      	adds	r3, #12
 8005634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005636:	623a      	str	r2, [r7, #32]
 8005638:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	69f9      	ldr	r1, [r7, #28]
 800563c:	6a3a      	ldr	r2, [r7, #32]
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	61bb      	str	r3, [r7, #24]
   return(result);
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e5      	bne.n	8005616 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0310 	and.w	r3, r3, #16
 8005654:	2b10      	cmp	r3, #16
 8005656:	d10a      	bne.n	800566e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005658:	2300      	movs	r3, #0
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005672:	4619      	mov	r1, r3
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff fc3f 	bl	8004ef8 <HAL_UARTEx_RxEventCallback>
 800567a:	e002      	b.n	8005682 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7fc f827 	bl	80016d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	e002      	b.n	800568c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	e000      	b.n	800568c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800568a:	2302      	movs	r3, #2
  }
}
 800568c:	4618      	mov	r0, r3
 800568e:	3730      	adds	r7, #48	; 0x30
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005698:	b09f      	sub	sp, #124	; 0x7c
 800569a:	af00      	add	r7, sp, #0
 800569c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800569e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056aa:	68d9      	ldr	r1, [r3, #12]
 80056ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	ea40 0301 	orr.w	r3, r0, r1
 80056b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b8:	689a      	ldr	r2, [r3, #8]
 80056ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	431a      	orrs	r2, r3
 80056c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	431a      	orrs	r2, r3
 80056c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80056ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80056d8:	f021 010c 	bic.w	r1, r1, #12
 80056dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056e2:	430b      	orrs	r3, r1
 80056e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f2:	6999      	ldr	r1, [r3, #24]
 80056f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	ea40 0301 	orr.w	r3, r0, r1
 80056fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4bc5      	ldr	r3, [pc, #788]	; (8005a18 <UART_SetConfig+0x384>)
 8005704:	429a      	cmp	r2, r3
 8005706:	d004      	beq.n	8005712 <UART_SetConfig+0x7e>
 8005708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	4bc3      	ldr	r3, [pc, #780]	; (8005a1c <UART_SetConfig+0x388>)
 800570e:	429a      	cmp	r2, r3
 8005710:	d103      	bne.n	800571a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005712:	f7ff f821 	bl	8004758 <HAL_RCC_GetPCLK2Freq>
 8005716:	6778      	str	r0, [r7, #116]	; 0x74
 8005718:	e002      	b.n	8005720 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800571a:	f7ff f809 	bl	8004730 <HAL_RCC_GetPCLK1Freq>
 800571e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005728:	f040 80b6 	bne.w	8005898 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800572c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800572e:	461c      	mov	r4, r3
 8005730:	f04f 0500 	mov.w	r5, #0
 8005734:	4622      	mov	r2, r4
 8005736:	462b      	mov	r3, r5
 8005738:	1891      	adds	r1, r2, r2
 800573a:	6439      	str	r1, [r7, #64]	; 0x40
 800573c:	415b      	adcs	r3, r3
 800573e:	647b      	str	r3, [r7, #68]	; 0x44
 8005740:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005744:	1912      	adds	r2, r2, r4
 8005746:	eb45 0303 	adc.w	r3, r5, r3
 800574a:	f04f 0000 	mov.w	r0, #0
 800574e:	f04f 0100 	mov.w	r1, #0
 8005752:	00d9      	lsls	r1, r3, #3
 8005754:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005758:	00d0      	lsls	r0, r2, #3
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	1911      	adds	r1, r2, r4
 8005760:	6639      	str	r1, [r7, #96]	; 0x60
 8005762:	416b      	adcs	r3, r5
 8005764:	667b      	str	r3, [r7, #100]	; 0x64
 8005766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	461a      	mov	r2, r3
 800576c:	f04f 0300 	mov.w	r3, #0
 8005770:	1891      	adds	r1, r2, r2
 8005772:	63b9      	str	r1, [r7, #56]	; 0x38
 8005774:	415b      	adcs	r3, r3
 8005776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005778:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800577c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005780:	f7fb fa12 	bl	8000ba8 <__aeabi_uldivmod>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	4ba5      	ldr	r3, [pc, #660]	; (8005a20 <UART_SetConfig+0x38c>)
 800578a:	fba3 2302 	umull	r2, r3, r3, r2
 800578e:	095b      	lsrs	r3, r3, #5
 8005790:	011e      	lsls	r6, r3, #4
 8005792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005794:	461c      	mov	r4, r3
 8005796:	f04f 0500 	mov.w	r5, #0
 800579a:	4622      	mov	r2, r4
 800579c:	462b      	mov	r3, r5
 800579e:	1891      	adds	r1, r2, r2
 80057a0:	6339      	str	r1, [r7, #48]	; 0x30
 80057a2:	415b      	adcs	r3, r3
 80057a4:	637b      	str	r3, [r7, #52]	; 0x34
 80057a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80057aa:	1912      	adds	r2, r2, r4
 80057ac:	eb45 0303 	adc.w	r3, r5, r3
 80057b0:	f04f 0000 	mov.w	r0, #0
 80057b4:	f04f 0100 	mov.w	r1, #0
 80057b8:	00d9      	lsls	r1, r3, #3
 80057ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057be:	00d0      	lsls	r0, r2, #3
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	1911      	adds	r1, r2, r4
 80057c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80057c8:	416b      	adcs	r3, r5
 80057ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	461a      	mov	r2, r3
 80057d2:	f04f 0300 	mov.w	r3, #0
 80057d6:	1891      	adds	r1, r2, r2
 80057d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80057da:	415b      	adcs	r3, r3
 80057dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80057e6:	f7fb f9df 	bl	8000ba8 <__aeabi_uldivmod>
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	4b8c      	ldr	r3, [pc, #560]	; (8005a20 <UART_SetConfig+0x38c>)
 80057f0:	fba3 1302 	umull	r1, r3, r3, r2
 80057f4:	095b      	lsrs	r3, r3, #5
 80057f6:	2164      	movs	r1, #100	; 0x64
 80057f8:	fb01 f303 	mul.w	r3, r1, r3
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	3332      	adds	r3, #50	; 0x32
 8005802:	4a87      	ldr	r2, [pc, #540]	; (8005a20 <UART_SetConfig+0x38c>)
 8005804:	fba2 2303 	umull	r2, r3, r2, r3
 8005808:	095b      	lsrs	r3, r3, #5
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005810:	441e      	add	r6, r3
 8005812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005814:	4618      	mov	r0, r3
 8005816:	f04f 0100 	mov.w	r1, #0
 800581a:	4602      	mov	r2, r0
 800581c:	460b      	mov	r3, r1
 800581e:	1894      	adds	r4, r2, r2
 8005820:	623c      	str	r4, [r7, #32]
 8005822:	415b      	adcs	r3, r3
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
 8005826:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800582a:	1812      	adds	r2, r2, r0
 800582c:	eb41 0303 	adc.w	r3, r1, r3
 8005830:	f04f 0400 	mov.w	r4, #0
 8005834:	f04f 0500 	mov.w	r5, #0
 8005838:	00dd      	lsls	r5, r3, #3
 800583a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800583e:	00d4      	lsls	r4, r2, #3
 8005840:	4622      	mov	r2, r4
 8005842:	462b      	mov	r3, r5
 8005844:	1814      	adds	r4, r2, r0
 8005846:	653c      	str	r4, [r7, #80]	; 0x50
 8005848:	414b      	adcs	r3, r1
 800584a:	657b      	str	r3, [r7, #84]	; 0x54
 800584c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	461a      	mov	r2, r3
 8005852:	f04f 0300 	mov.w	r3, #0
 8005856:	1891      	adds	r1, r2, r2
 8005858:	61b9      	str	r1, [r7, #24]
 800585a:	415b      	adcs	r3, r3
 800585c:	61fb      	str	r3, [r7, #28]
 800585e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005862:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005866:	f7fb f99f 	bl	8000ba8 <__aeabi_uldivmod>
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	4b6c      	ldr	r3, [pc, #432]	; (8005a20 <UART_SetConfig+0x38c>)
 8005870:	fba3 1302 	umull	r1, r3, r3, r2
 8005874:	095b      	lsrs	r3, r3, #5
 8005876:	2164      	movs	r1, #100	; 0x64
 8005878:	fb01 f303 	mul.w	r3, r1, r3
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	3332      	adds	r3, #50	; 0x32
 8005882:	4a67      	ldr	r2, [pc, #412]	; (8005a20 <UART_SetConfig+0x38c>)
 8005884:	fba2 2303 	umull	r2, r3, r2, r3
 8005888:	095b      	lsrs	r3, r3, #5
 800588a:	f003 0207 	and.w	r2, r3, #7
 800588e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4432      	add	r2, r6
 8005894:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005896:	e0b9      	b.n	8005a0c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005898:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800589a:	461c      	mov	r4, r3
 800589c:	f04f 0500 	mov.w	r5, #0
 80058a0:	4622      	mov	r2, r4
 80058a2:	462b      	mov	r3, r5
 80058a4:	1891      	adds	r1, r2, r2
 80058a6:	6139      	str	r1, [r7, #16]
 80058a8:	415b      	adcs	r3, r3
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80058b0:	1912      	adds	r2, r2, r4
 80058b2:	eb45 0303 	adc.w	r3, r5, r3
 80058b6:	f04f 0000 	mov.w	r0, #0
 80058ba:	f04f 0100 	mov.w	r1, #0
 80058be:	00d9      	lsls	r1, r3, #3
 80058c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058c4:	00d0      	lsls	r0, r2, #3
 80058c6:	4602      	mov	r2, r0
 80058c8:	460b      	mov	r3, r1
 80058ca:	eb12 0804 	adds.w	r8, r2, r4
 80058ce:	eb43 0905 	adc.w	r9, r3, r5
 80058d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f04f 0100 	mov.w	r1, #0
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	f04f 0300 	mov.w	r3, #0
 80058e4:	008b      	lsls	r3, r1, #2
 80058e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058ea:	0082      	lsls	r2, r0, #2
 80058ec:	4640      	mov	r0, r8
 80058ee:	4649      	mov	r1, r9
 80058f0:	f7fb f95a 	bl	8000ba8 <__aeabi_uldivmod>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	4b49      	ldr	r3, [pc, #292]	; (8005a20 <UART_SetConfig+0x38c>)
 80058fa:	fba3 2302 	umull	r2, r3, r3, r2
 80058fe:	095b      	lsrs	r3, r3, #5
 8005900:	011e      	lsls	r6, r3, #4
 8005902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005904:	4618      	mov	r0, r3
 8005906:	f04f 0100 	mov.w	r1, #0
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	1894      	adds	r4, r2, r2
 8005910:	60bc      	str	r4, [r7, #8]
 8005912:	415b      	adcs	r3, r3
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800591a:	1812      	adds	r2, r2, r0
 800591c:	eb41 0303 	adc.w	r3, r1, r3
 8005920:	f04f 0400 	mov.w	r4, #0
 8005924:	f04f 0500 	mov.w	r5, #0
 8005928:	00dd      	lsls	r5, r3, #3
 800592a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800592e:	00d4      	lsls	r4, r2, #3
 8005930:	4622      	mov	r2, r4
 8005932:	462b      	mov	r3, r5
 8005934:	1814      	adds	r4, r2, r0
 8005936:	64bc      	str	r4, [r7, #72]	; 0x48
 8005938:	414b      	adcs	r3, r1
 800593a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800593c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	4618      	mov	r0, r3
 8005942:	f04f 0100 	mov.w	r1, #0
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	f04f 0300 	mov.w	r3, #0
 800594e:	008b      	lsls	r3, r1, #2
 8005950:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005954:	0082      	lsls	r2, r0, #2
 8005956:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800595a:	f7fb f925 	bl	8000ba8 <__aeabi_uldivmod>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	4b2f      	ldr	r3, [pc, #188]	; (8005a20 <UART_SetConfig+0x38c>)
 8005964:	fba3 1302 	umull	r1, r3, r3, r2
 8005968:	095b      	lsrs	r3, r3, #5
 800596a:	2164      	movs	r1, #100	; 0x64
 800596c:	fb01 f303 	mul.w	r3, r1, r3
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	011b      	lsls	r3, r3, #4
 8005974:	3332      	adds	r3, #50	; 0x32
 8005976:	4a2a      	ldr	r2, [pc, #168]	; (8005a20 <UART_SetConfig+0x38c>)
 8005978:	fba2 2303 	umull	r2, r3, r2, r3
 800597c:	095b      	lsrs	r3, r3, #5
 800597e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005982:	441e      	add	r6, r3
 8005984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005986:	4618      	mov	r0, r3
 8005988:	f04f 0100 	mov.w	r1, #0
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	1894      	adds	r4, r2, r2
 8005992:	603c      	str	r4, [r7, #0]
 8005994:	415b      	adcs	r3, r3
 8005996:	607b      	str	r3, [r7, #4]
 8005998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800599c:	1812      	adds	r2, r2, r0
 800599e:	eb41 0303 	adc.w	r3, r1, r3
 80059a2:	f04f 0400 	mov.w	r4, #0
 80059a6:	f04f 0500 	mov.w	r5, #0
 80059aa:	00dd      	lsls	r5, r3, #3
 80059ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059b0:	00d4      	lsls	r4, r2, #3
 80059b2:	4622      	mov	r2, r4
 80059b4:	462b      	mov	r3, r5
 80059b6:	eb12 0a00 	adds.w	sl, r2, r0
 80059ba:	eb43 0b01 	adc.w	fp, r3, r1
 80059be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f04f 0100 	mov.w	r1, #0
 80059c8:	f04f 0200 	mov.w	r2, #0
 80059cc:	f04f 0300 	mov.w	r3, #0
 80059d0:	008b      	lsls	r3, r1, #2
 80059d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059d6:	0082      	lsls	r2, r0, #2
 80059d8:	4650      	mov	r0, sl
 80059da:	4659      	mov	r1, fp
 80059dc:	f7fb f8e4 	bl	8000ba8 <__aeabi_uldivmod>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4b0e      	ldr	r3, [pc, #56]	; (8005a20 <UART_SetConfig+0x38c>)
 80059e6:	fba3 1302 	umull	r1, r3, r3, r2
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	2164      	movs	r1, #100	; 0x64
 80059ee:	fb01 f303 	mul.w	r3, r1, r3
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	3332      	adds	r3, #50	; 0x32
 80059f8:	4a09      	ldr	r2, [pc, #36]	; (8005a20 <UART_SetConfig+0x38c>)
 80059fa:	fba2 2303 	umull	r2, r3, r2, r3
 80059fe:	095b      	lsrs	r3, r3, #5
 8005a00:	f003 020f 	and.w	r2, r3, #15
 8005a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4432      	add	r2, r6
 8005a0a:	609a      	str	r2, [r3, #8]
}
 8005a0c:	bf00      	nop
 8005a0e:	377c      	adds	r7, #124	; 0x7c
 8005a10:	46bd      	mov	sp, r7
 8005a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a16:	bf00      	nop
 8005a18:	40011000 	.word	0x40011000
 8005a1c:	40011400 	.word	0x40011400
 8005a20:	51eb851f 	.word	0x51eb851f

08005a24 <__errno>:
 8005a24:	4b01      	ldr	r3, [pc, #4]	; (8005a2c <__errno+0x8>)
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	20000020 	.word	0x20000020

08005a30 <__libc_init_array>:
 8005a30:	b570      	push	{r4, r5, r6, lr}
 8005a32:	4d0d      	ldr	r5, [pc, #52]	; (8005a68 <__libc_init_array+0x38>)
 8005a34:	4c0d      	ldr	r4, [pc, #52]	; (8005a6c <__libc_init_array+0x3c>)
 8005a36:	1b64      	subs	r4, r4, r5
 8005a38:	10a4      	asrs	r4, r4, #2
 8005a3a:	2600      	movs	r6, #0
 8005a3c:	42a6      	cmp	r6, r4
 8005a3e:	d109      	bne.n	8005a54 <__libc_init_array+0x24>
 8005a40:	4d0b      	ldr	r5, [pc, #44]	; (8005a70 <__libc_init_array+0x40>)
 8005a42:	4c0c      	ldr	r4, [pc, #48]	; (8005a74 <__libc_init_array+0x44>)
 8005a44:	f002 fed8 	bl	80087f8 <_init>
 8005a48:	1b64      	subs	r4, r4, r5
 8005a4a:	10a4      	asrs	r4, r4, #2
 8005a4c:	2600      	movs	r6, #0
 8005a4e:	42a6      	cmp	r6, r4
 8005a50:	d105      	bne.n	8005a5e <__libc_init_array+0x2e>
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
 8005a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a58:	4798      	blx	r3
 8005a5a:	3601      	adds	r6, #1
 8005a5c:	e7ee      	b.n	8005a3c <__libc_init_array+0xc>
 8005a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a62:	4798      	blx	r3
 8005a64:	3601      	adds	r6, #1
 8005a66:	e7f2      	b.n	8005a4e <__libc_init_array+0x1e>
 8005a68:	08008de4 	.word	0x08008de4
 8005a6c:	08008de4 	.word	0x08008de4
 8005a70:	08008de4 	.word	0x08008de4
 8005a74:	08008de8 	.word	0x08008de8

08005a78 <memcpy>:
 8005a78:	440a      	add	r2, r1
 8005a7a:	4291      	cmp	r1, r2
 8005a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a80:	d100      	bne.n	8005a84 <memcpy+0xc>
 8005a82:	4770      	bx	lr
 8005a84:	b510      	push	{r4, lr}
 8005a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a8e:	4291      	cmp	r1, r2
 8005a90:	d1f9      	bne.n	8005a86 <memcpy+0xe>
 8005a92:	bd10      	pop	{r4, pc}

08005a94 <memset>:
 8005a94:	4402      	add	r2, r0
 8005a96:	4603      	mov	r3, r0
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d100      	bne.n	8005a9e <memset+0xa>
 8005a9c:	4770      	bx	lr
 8005a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005aa2:	e7f9      	b.n	8005a98 <memset+0x4>

08005aa4 <__cvt>:
 8005aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa8:	ec55 4b10 	vmov	r4, r5, d0
 8005aac:	2d00      	cmp	r5, #0
 8005aae:	460e      	mov	r6, r1
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	462b      	mov	r3, r5
 8005ab4:	bfbb      	ittet	lt
 8005ab6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005aba:	461d      	movlt	r5, r3
 8005abc:	2300      	movge	r3, #0
 8005abe:	232d      	movlt	r3, #45	; 0x2d
 8005ac0:	700b      	strb	r3, [r1, #0]
 8005ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ac4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ac8:	4691      	mov	r9, r2
 8005aca:	f023 0820 	bic.w	r8, r3, #32
 8005ace:	bfbc      	itt	lt
 8005ad0:	4622      	movlt	r2, r4
 8005ad2:	4614      	movlt	r4, r2
 8005ad4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ad8:	d005      	beq.n	8005ae6 <__cvt+0x42>
 8005ada:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005ade:	d100      	bne.n	8005ae2 <__cvt+0x3e>
 8005ae0:	3601      	adds	r6, #1
 8005ae2:	2102      	movs	r1, #2
 8005ae4:	e000      	b.n	8005ae8 <__cvt+0x44>
 8005ae6:	2103      	movs	r1, #3
 8005ae8:	ab03      	add	r3, sp, #12
 8005aea:	9301      	str	r3, [sp, #4]
 8005aec:	ab02      	add	r3, sp, #8
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	ec45 4b10 	vmov	d0, r4, r5
 8005af4:	4653      	mov	r3, sl
 8005af6:	4632      	mov	r2, r6
 8005af8:	f000 fd0e 	bl	8006518 <_dtoa_r>
 8005afc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b00:	4607      	mov	r7, r0
 8005b02:	d102      	bne.n	8005b0a <__cvt+0x66>
 8005b04:	f019 0f01 	tst.w	r9, #1
 8005b08:	d022      	beq.n	8005b50 <__cvt+0xac>
 8005b0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b0e:	eb07 0906 	add.w	r9, r7, r6
 8005b12:	d110      	bne.n	8005b36 <__cvt+0x92>
 8005b14:	783b      	ldrb	r3, [r7, #0]
 8005b16:	2b30      	cmp	r3, #48	; 0x30
 8005b18:	d10a      	bne.n	8005b30 <__cvt+0x8c>
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	4620      	mov	r0, r4
 8005b20:	4629      	mov	r1, r5
 8005b22:	f7fa ffd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b26:	b918      	cbnz	r0, 8005b30 <__cvt+0x8c>
 8005b28:	f1c6 0601 	rsb	r6, r6, #1
 8005b2c:	f8ca 6000 	str.w	r6, [sl]
 8005b30:	f8da 3000 	ldr.w	r3, [sl]
 8005b34:	4499      	add	r9, r3
 8005b36:	2200      	movs	r2, #0
 8005b38:	2300      	movs	r3, #0
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	f7fa ffc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b42:	b108      	cbz	r0, 8005b48 <__cvt+0xa4>
 8005b44:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b48:	2230      	movs	r2, #48	; 0x30
 8005b4a:	9b03      	ldr	r3, [sp, #12]
 8005b4c:	454b      	cmp	r3, r9
 8005b4e:	d307      	bcc.n	8005b60 <__cvt+0xbc>
 8005b50:	9b03      	ldr	r3, [sp, #12]
 8005b52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b54:	1bdb      	subs	r3, r3, r7
 8005b56:	4638      	mov	r0, r7
 8005b58:	6013      	str	r3, [r2, #0]
 8005b5a:	b004      	add	sp, #16
 8005b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b60:	1c59      	adds	r1, r3, #1
 8005b62:	9103      	str	r1, [sp, #12]
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	e7f0      	b.n	8005b4a <__cvt+0xa6>

08005b68 <__exponent>:
 8005b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2900      	cmp	r1, #0
 8005b6e:	bfb8      	it	lt
 8005b70:	4249      	neglt	r1, r1
 8005b72:	f803 2b02 	strb.w	r2, [r3], #2
 8005b76:	bfb4      	ite	lt
 8005b78:	222d      	movlt	r2, #45	; 0x2d
 8005b7a:	222b      	movge	r2, #43	; 0x2b
 8005b7c:	2909      	cmp	r1, #9
 8005b7e:	7042      	strb	r2, [r0, #1]
 8005b80:	dd2a      	ble.n	8005bd8 <__exponent+0x70>
 8005b82:	f10d 0407 	add.w	r4, sp, #7
 8005b86:	46a4      	mov	ip, r4
 8005b88:	270a      	movs	r7, #10
 8005b8a:	46a6      	mov	lr, r4
 8005b8c:	460a      	mov	r2, r1
 8005b8e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005b92:	fb07 1516 	mls	r5, r7, r6, r1
 8005b96:	3530      	adds	r5, #48	; 0x30
 8005b98:	2a63      	cmp	r2, #99	; 0x63
 8005b9a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005b9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	dcf1      	bgt.n	8005b8a <__exponent+0x22>
 8005ba6:	3130      	adds	r1, #48	; 0x30
 8005ba8:	f1ae 0502 	sub.w	r5, lr, #2
 8005bac:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005bb0:	1c44      	adds	r4, r0, #1
 8005bb2:	4629      	mov	r1, r5
 8005bb4:	4561      	cmp	r1, ip
 8005bb6:	d30a      	bcc.n	8005bce <__exponent+0x66>
 8005bb8:	f10d 0209 	add.w	r2, sp, #9
 8005bbc:	eba2 020e 	sub.w	r2, r2, lr
 8005bc0:	4565      	cmp	r5, ip
 8005bc2:	bf88      	it	hi
 8005bc4:	2200      	movhi	r2, #0
 8005bc6:	4413      	add	r3, r2
 8005bc8:	1a18      	subs	r0, r3, r0
 8005bca:	b003      	add	sp, #12
 8005bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bd2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005bd6:	e7ed      	b.n	8005bb4 <__exponent+0x4c>
 8005bd8:	2330      	movs	r3, #48	; 0x30
 8005bda:	3130      	adds	r1, #48	; 0x30
 8005bdc:	7083      	strb	r3, [r0, #2]
 8005bde:	70c1      	strb	r1, [r0, #3]
 8005be0:	1d03      	adds	r3, r0, #4
 8005be2:	e7f1      	b.n	8005bc8 <__exponent+0x60>

08005be4 <_printf_float>:
 8005be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be8:	ed2d 8b02 	vpush	{d8}
 8005bec:	b08d      	sub	sp, #52	; 0x34
 8005bee:	460c      	mov	r4, r1
 8005bf0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005bf4:	4616      	mov	r6, r2
 8005bf6:	461f      	mov	r7, r3
 8005bf8:	4605      	mov	r5, r0
 8005bfa:	f001 fa79 	bl	80070f0 <_localeconv_r>
 8005bfe:	f8d0 a000 	ldr.w	sl, [r0]
 8005c02:	4650      	mov	r0, sl
 8005c04:	f7fa fae4 	bl	80001d0 <strlen>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	930a      	str	r3, [sp, #40]	; 0x28
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	9305      	str	r3, [sp, #20]
 8005c10:	f8d8 3000 	ldr.w	r3, [r8]
 8005c14:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005c18:	3307      	adds	r3, #7
 8005c1a:	f023 0307 	bic.w	r3, r3, #7
 8005c1e:	f103 0208 	add.w	r2, r3, #8
 8005c22:	f8c8 2000 	str.w	r2, [r8]
 8005c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c2e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005c32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c36:	9307      	str	r3, [sp, #28]
 8005c38:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c3c:	ee08 0a10 	vmov	s16, r0
 8005c40:	4b9f      	ldr	r3, [pc, #636]	; (8005ec0 <_printf_float+0x2dc>)
 8005c42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c46:	f04f 32ff 	mov.w	r2, #4294967295
 8005c4a:	f7fa ff6f 	bl	8000b2c <__aeabi_dcmpun>
 8005c4e:	bb88      	cbnz	r0, 8005cb4 <_printf_float+0xd0>
 8005c50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c54:	4b9a      	ldr	r3, [pc, #616]	; (8005ec0 <_printf_float+0x2dc>)
 8005c56:	f04f 32ff 	mov.w	r2, #4294967295
 8005c5a:	f7fa ff49 	bl	8000af0 <__aeabi_dcmple>
 8005c5e:	bb48      	cbnz	r0, 8005cb4 <_printf_float+0xd0>
 8005c60:	2200      	movs	r2, #0
 8005c62:	2300      	movs	r3, #0
 8005c64:	4640      	mov	r0, r8
 8005c66:	4649      	mov	r1, r9
 8005c68:	f7fa ff38 	bl	8000adc <__aeabi_dcmplt>
 8005c6c:	b110      	cbz	r0, 8005c74 <_printf_float+0x90>
 8005c6e:	232d      	movs	r3, #45	; 0x2d
 8005c70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c74:	4b93      	ldr	r3, [pc, #588]	; (8005ec4 <_printf_float+0x2e0>)
 8005c76:	4894      	ldr	r0, [pc, #592]	; (8005ec8 <_printf_float+0x2e4>)
 8005c78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005c7c:	bf94      	ite	ls
 8005c7e:	4698      	movls	r8, r3
 8005c80:	4680      	movhi	r8, r0
 8005c82:	2303      	movs	r3, #3
 8005c84:	6123      	str	r3, [r4, #16]
 8005c86:	9b05      	ldr	r3, [sp, #20]
 8005c88:	f023 0204 	bic.w	r2, r3, #4
 8005c8c:	6022      	str	r2, [r4, #0]
 8005c8e:	f04f 0900 	mov.w	r9, #0
 8005c92:	9700      	str	r7, [sp, #0]
 8005c94:	4633      	mov	r3, r6
 8005c96:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c98:	4621      	mov	r1, r4
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f000 f9d8 	bl	8006050 <_printf_common>
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	f040 8090 	bne.w	8005dc6 <_printf_float+0x1e2>
 8005ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8005caa:	b00d      	add	sp, #52	; 0x34
 8005cac:	ecbd 8b02 	vpop	{d8}
 8005cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb4:	4642      	mov	r2, r8
 8005cb6:	464b      	mov	r3, r9
 8005cb8:	4640      	mov	r0, r8
 8005cba:	4649      	mov	r1, r9
 8005cbc:	f7fa ff36 	bl	8000b2c <__aeabi_dcmpun>
 8005cc0:	b140      	cbz	r0, 8005cd4 <_printf_float+0xf0>
 8005cc2:	464b      	mov	r3, r9
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	bfbc      	itt	lt
 8005cc8:	232d      	movlt	r3, #45	; 0x2d
 8005cca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005cce:	487f      	ldr	r0, [pc, #508]	; (8005ecc <_printf_float+0x2e8>)
 8005cd0:	4b7f      	ldr	r3, [pc, #508]	; (8005ed0 <_printf_float+0x2ec>)
 8005cd2:	e7d1      	b.n	8005c78 <_printf_float+0x94>
 8005cd4:	6863      	ldr	r3, [r4, #4]
 8005cd6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005cda:	9206      	str	r2, [sp, #24]
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	d13f      	bne.n	8005d60 <_printf_float+0x17c>
 8005ce0:	2306      	movs	r3, #6
 8005ce2:	6063      	str	r3, [r4, #4]
 8005ce4:	9b05      	ldr	r3, [sp, #20]
 8005ce6:	6861      	ldr	r1, [r4, #4]
 8005ce8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005cec:	2300      	movs	r3, #0
 8005cee:	9303      	str	r3, [sp, #12]
 8005cf0:	ab0a      	add	r3, sp, #40	; 0x28
 8005cf2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005cf6:	ab09      	add	r3, sp, #36	; 0x24
 8005cf8:	ec49 8b10 	vmov	d0, r8, r9
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	6022      	str	r2, [r4, #0]
 8005d00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005d04:	4628      	mov	r0, r5
 8005d06:	f7ff fecd 	bl	8005aa4 <__cvt>
 8005d0a:	9b06      	ldr	r3, [sp, #24]
 8005d0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d0e:	2b47      	cmp	r3, #71	; 0x47
 8005d10:	4680      	mov	r8, r0
 8005d12:	d108      	bne.n	8005d26 <_printf_float+0x142>
 8005d14:	1cc8      	adds	r0, r1, #3
 8005d16:	db02      	blt.n	8005d1e <_printf_float+0x13a>
 8005d18:	6863      	ldr	r3, [r4, #4]
 8005d1a:	4299      	cmp	r1, r3
 8005d1c:	dd41      	ble.n	8005da2 <_printf_float+0x1be>
 8005d1e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005d22:	fa5f fb8b 	uxtb.w	fp, fp
 8005d26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d2a:	d820      	bhi.n	8005d6e <_printf_float+0x18a>
 8005d2c:	3901      	subs	r1, #1
 8005d2e:	465a      	mov	r2, fp
 8005d30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d34:	9109      	str	r1, [sp, #36]	; 0x24
 8005d36:	f7ff ff17 	bl	8005b68 <__exponent>
 8005d3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d3c:	1813      	adds	r3, r2, r0
 8005d3e:	2a01      	cmp	r2, #1
 8005d40:	4681      	mov	r9, r0
 8005d42:	6123      	str	r3, [r4, #16]
 8005d44:	dc02      	bgt.n	8005d4c <_printf_float+0x168>
 8005d46:	6822      	ldr	r2, [r4, #0]
 8005d48:	07d2      	lsls	r2, r2, #31
 8005d4a:	d501      	bpl.n	8005d50 <_printf_float+0x16c>
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	6123      	str	r3, [r4, #16]
 8005d50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d09c      	beq.n	8005c92 <_printf_float+0xae>
 8005d58:	232d      	movs	r3, #45	; 0x2d
 8005d5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d5e:	e798      	b.n	8005c92 <_printf_float+0xae>
 8005d60:	9a06      	ldr	r2, [sp, #24]
 8005d62:	2a47      	cmp	r2, #71	; 0x47
 8005d64:	d1be      	bne.n	8005ce4 <_printf_float+0x100>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1bc      	bne.n	8005ce4 <_printf_float+0x100>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e7b9      	b.n	8005ce2 <_printf_float+0xfe>
 8005d6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005d72:	d118      	bne.n	8005da6 <_printf_float+0x1c2>
 8005d74:	2900      	cmp	r1, #0
 8005d76:	6863      	ldr	r3, [r4, #4]
 8005d78:	dd0b      	ble.n	8005d92 <_printf_float+0x1ae>
 8005d7a:	6121      	str	r1, [r4, #16]
 8005d7c:	b913      	cbnz	r3, 8005d84 <_printf_float+0x1a0>
 8005d7e:	6822      	ldr	r2, [r4, #0]
 8005d80:	07d0      	lsls	r0, r2, #31
 8005d82:	d502      	bpl.n	8005d8a <_printf_float+0x1a6>
 8005d84:	3301      	adds	r3, #1
 8005d86:	440b      	add	r3, r1
 8005d88:	6123      	str	r3, [r4, #16]
 8005d8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d8c:	f04f 0900 	mov.w	r9, #0
 8005d90:	e7de      	b.n	8005d50 <_printf_float+0x16c>
 8005d92:	b913      	cbnz	r3, 8005d9a <_printf_float+0x1b6>
 8005d94:	6822      	ldr	r2, [r4, #0]
 8005d96:	07d2      	lsls	r2, r2, #31
 8005d98:	d501      	bpl.n	8005d9e <_printf_float+0x1ba>
 8005d9a:	3302      	adds	r3, #2
 8005d9c:	e7f4      	b.n	8005d88 <_printf_float+0x1a4>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e7f2      	b.n	8005d88 <_printf_float+0x1a4>
 8005da2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005da8:	4299      	cmp	r1, r3
 8005daa:	db05      	blt.n	8005db8 <_printf_float+0x1d4>
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	6121      	str	r1, [r4, #16]
 8005db0:	07d8      	lsls	r0, r3, #31
 8005db2:	d5ea      	bpl.n	8005d8a <_printf_float+0x1a6>
 8005db4:	1c4b      	adds	r3, r1, #1
 8005db6:	e7e7      	b.n	8005d88 <_printf_float+0x1a4>
 8005db8:	2900      	cmp	r1, #0
 8005dba:	bfd4      	ite	le
 8005dbc:	f1c1 0202 	rsble	r2, r1, #2
 8005dc0:	2201      	movgt	r2, #1
 8005dc2:	4413      	add	r3, r2
 8005dc4:	e7e0      	b.n	8005d88 <_printf_float+0x1a4>
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	055a      	lsls	r2, r3, #21
 8005dca:	d407      	bmi.n	8005ddc <_printf_float+0x1f8>
 8005dcc:	6923      	ldr	r3, [r4, #16]
 8005dce:	4642      	mov	r2, r8
 8005dd0:	4631      	mov	r1, r6
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	47b8      	blx	r7
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	d12c      	bne.n	8005e34 <_printf_float+0x250>
 8005dda:	e764      	b.n	8005ca6 <_printf_float+0xc2>
 8005ddc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005de0:	f240 80e0 	bls.w	8005fa4 <_printf_float+0x3c0>
 8005de4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005de8:	2200      	movs	r2, #0
 8005dea:	2300      	movs	r3, #0
 8005dec:	f7fa fe6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	d034      	beq.n	8005e5e <_printf_float+0x27a>
 8005df4:	4a37      	ldr	r2, [pc, #220]	; (8005ed4 <_printf_float+0x2f0>)
 8005df6:	2301      	movs	r3, #1
 8005df8:	4631      	mov	r1, r6
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	47b8      	blx	r7
 8005dfe:	3001      	adds	r0, #1
 8005e00:	f43f af51 	beq.w	8005ca6 <_printf_float+0xc2>
 8005e04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	db02      	blt.n	8005e12 <_printf_float+0x22e>
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	07d8      	lsls	r0, r3, #31
 8005e10:	d510      	bpl.n	8005e34 <_printf_float+0x250>
 8005e12:	ee18 3a10 	vmov	r3, s16
 8005e16:	4652      	mov	r2, sl
 8005e18:	4631      	mov	r1, r6
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	47b8      	blx	r7
 8005e1e:	3001      	adds	r0, #1
 8005e20:	f43f af41 	beq.w	8005ca6 <_printf_float+0xc2>
 8005e24:	f04f 0800 	mov.w	r8, #0
 8005e28:	f104 091a 	add.w	r9, r4, #26
 8005e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	4543      	cmp	r3, r8
 8005e32:	dc09      	bgt.n	8005e48 <_printf_float+0x264>
 8005e34:	6823      	ldr	r3, [r4, #0]
 8005e36:	079b      	lsls	r3, r3, #30
 8005e38:	f100 8105 	bmi.w	8006046 <_printf_float+0x462>
 8005e3c:	68e0      	ldr	r0, [r4, #12]
 8005e3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e40:	4298      	cmp	r0, r3
 8005e42:	bfb8      	it	lt
 8005e44:	4618      	movlt	r0, r3
 8005e46:	e730      	b.n	8005caa <_printf_float+0xc6>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	464a      	mov	r2, r9
 8005e4c:	4631      	mov	r1, r6
 8005e4e:	4628      	mov	r0, r5
 8005e50:	47b8      	blx	r7
 8005e52:	3001      	adds	r0, #1
 8005e54:	f43f af27 	beq.w	8005ca6 <_printf_float+0xc2>
 8005e58:	f108 0801 	add.w	r8, r8, #1
 8005e5c:	e7e6      	b.n	8005e2c <_printf_float+0x248>
 8005e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	dc39      	bgt.n	8005ed8 <_printf_float+0x2f4>
 8005e64:	4a1b      	ldr	r2, [pc, #108]	; (8005ed4 <_printf_float+0x2f0>)
 8005e66:	2301      	movs	r3, #1
 8005e68:	4631      	mov	r1, r6
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	47b8      	blx	r7
 8005e6e:	3001      	adds	r0, #1
 8005e70:	f43f af19 	beq.w	8005ca6 <_printf_float+0xc2>
 8005e74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	d102      	bne.n	8005e82 <_printf_float+0x29e>
 8005e7c:	6823      	ldr	r3, [r4, #0]
 8005e7e:	07d9      	lsls	r1, r3, #31
 8005e80:	d5d8      	bpl.n	8005e34 <_printf_float+0x250>
 8005e82:	ee18 3a10 	vmov	r3, s16
 8005e86:	4652      	mov	r2, sl
 8005e88:	4631      	mov	r1, r6
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	47b8      	blx	r7
 8005e8e:	3001      	adds	r0, #1
 8005e90:	f43f af09 	beq.w	8005ca6 <_printf_float+0xc2>
 8005e94:	f04f 0900 	mov.w	r9, #0
 8005e98:	f104 0a1a 	add.w	sl, r4, #26
 8005e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e9e:	425b      	negs	r3, r3
 8005ea0:	454b      	cmp	r3, r9
 8005ea2:	dc01      	bgt.n	8005ea8 <_printf_float+0x2c4>
 8005ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ea6:	e792      	b.n	8005dce <_printf_float+0x1ea>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	4652      	mov	r2, sl
 8005eac:	4631      	mov	r1, r6
 8005eae:	4628      	mov	r0, r5
 8005eb0:	47b8      	blx	r7
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	f43f aef7 	beq.w	8005ca6 <_printf_float+0xc2>
 8005eb8:	f109 0901 	add.w	r9, r9, #1
 8005ebc:	e7ee      	b.n	8005e9c <_printf_float+0x2b8>
 8005ebe:	bf00      	nop
 8005ec0:	7fefffff 	.word	0x7fefffff
 8005ec4:	080089fc 	.word	0x080089fc
 8005ec8:	08008a00 	.word	0x08008a00
 8005ecc:	08008a08 	.word	0x08008a08
 8005ed0:	08008a04 	.word	0x08008a04
 8005ed4:	08008a0c 	.word	0x08008a0c
 8005ed8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005eda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005edc:	429a      	cmp	r2, r3
 8005ede:	bfa8      	it	ge
 8005ee0:	461a      	movge	r2, r3
 8005ee2:	2a00      	cmp	r2, #0
 8005ee4:	4691      	mov	r9, r2
 8005ee6:	dc37      	bgt.n	8005f58 <_printf_float+0x374>
 8005ee8:	f04f 0b00 	mov.w	fp, #0
 8005eec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ef0:	f104 021a 	add.w	r2, r4, #26
 8005ef4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ef6:	9305      	str	r3, [sp, #20]
 8005ef8:	eba3 0309 	sub.w	r3, r3, r9
 8005efc:	455b      	cmp	r3, fp
 8005efe:	dc33      	bgt.n	8005f68 <_printf_float+0x384>
 8005f00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f04:	429a      	cmp	r2, r3
 8005f06:	db3b      	blt.n	8005f80 <_printf_float+0x39c>
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	07da      	lsls	r2, r3, #31
 8005f0c:	d438      	bmi.n	8005f80 <_printf_float+0x39c>
 8005f0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f10:	9b05      	ldr	r3, [sp, #20]
 8005f12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	eba2 0901 	sub.w	r9, r2, r1
 8005f1a:	4599      	cmp	r9, r3
 8005f1c:	bfa8      	it	ge
 8005f1e:	4699      	movge	r9, r3
 8005f20:	f1b9 0f00 	cmp.w	r9, #0
 8005f24:	dc35      	bgt.n	8005f92 <_printf_float+0x3ae>
 8005f26:	f04f 0800 	mov.w	r8, #0
 8005f2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f2e:	f104 0a1a 	add.w	sl, r4, #26
 8005f32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f36:	1a9b      	subs	r3, r3, r2
 8005f38:	eba3 0309 	sub.w	r3, r3, r9
 8005f3c:	4543      	cmp	r3, r8
 8005f3e:	f77f af79 	ble.w	8005e34 <_printf_float+0x250>
 8005f42:	2301      	movs	r3, #1
 8005f44:	4652      	mov	r2, sl
 8005f46:	4631      	mov	r1, r6
 8005f48:	4628      	mov	r0, r5
 8005f4a:	47b8      	blx	r7
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	f43f aeaa 	beq.w	8005ca6 <_printf_float+0xc2>
 8005f52:	f108 0801 	add.w	r8, r8, #1
 8005f56:	e7ec      	b.n	8005f32 <_printf_float+0x34e>
 8005f58:	4613      	mov	r3, r2
 8005f5a:	4631      	mov	r1, r6
 8005f5c:	4642      	mov	r2, r8
 8005f5e:	4628      	mov	r0, r5
 8005f60:	47b8      	blx	r7
 8005f62:	3001      	adds	r0, #1
 8005f64:	d1c0      	bne.n	8005ee8 <_printf_float+0x304>
 8005f66:	e69e      	b.n	8005ca6 <_printf_float+0xc2>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	4631      	mov	r1, r6
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	9205      	str	r2, [sp, #20]
 8005f70:	47b8      	blx	r7
 8005f72:	3001      	adds	r0, #1
 8005f74:	f43f ae97 	beq.w	8005ca6 <_printf_float+0xc2>
 8005f78:	9a05      	ldr	r2, [sp, #20]
 8005f7a:	f10b 0b01 	add.w	fp, fp, #1
 8005f7e:	e7b9      	b.n	8005ef4 <_printf_float+0x310>
 8005f80:	ee18 3a10 	vmov	r3, s16
 8005f84:	4652      	mov	r2, sl
 8005f86:	4631      	mov	r1, r6
 8005f88:	4628      	mov	r0, r5
 8005f8a:	47b8      	blx	r7
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d1be      	bne.n	8005f0e <_printf_float+0x32a>
 8005f90:	e689      	b.n	8005ca6 <_printf_float+0xc2>
 8005f92:	9a05      	ldr	r2, [sp, #20]
 8005f94:	464b      	mov	r3, r9
 8005f96:	4442      	add	r2, r8
 8005f98:	4631      	mov	r1, r6
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	47b8      	blx	r7
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	d1c1      	bne.n	8005f26 <_printf_float+0x342>
 8005fa2:	e680      	b.n	8005ca6 <_printf_float+0xc2>
 8005fa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fa6:	2a01      	cmp	r2, #1
 8005fa8:	dc01      	bgt.n	8005fae <_printf_float+0x3ca>
 8005faa:	07db      	lsls	r3, r3, #31
 8005fac:	d538      	bpl.n	8006020 <_printf_float+0x43c>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	4642      	mov	r2, r8
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	47b8      	blx	r7
 8005fb8:	3001      	adds	r0, #1
 8005fba:	f43f ae74 	beq.w	8005ca6 <_printf_float+0xc2>
 8005fbe:	ee18 3a10 	vmov	r3, s16
 8005fc2:	4652      	mov	r2, sl
 8005fc4:	4631      	mov	r1, r6
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	47b8      	blx	r7
 8005fca:	3001      	adds	r0, #1
 8005fcc:	f43f ae6b 	beq.w	8005ca6 <_printf_float+0xc2>
 8005fd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f7fa fd76 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fdc:	b9d8      	cbnz	r0, 8006016 <_printf_float+0x432>
 8005fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fe0:	f108 0201 	add.w	r2, r8, #1
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	4631      	mov	r1, r6
 8005fe8:	4628      	mov	r0, r5
 8005fea:	47b8      	blx	r7
 8005fec:	3001      	adds	r0, #1
 8005fee:	d10e      	bne.n	800600e <_printf_float+0x42a>
 8005ff0:	e659      	b.n	8005ca6 <_printf_float+0xc2>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	4652      	mov	r2, sl
 8005ff6:	4631      	mov	r1, r6
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	47b8      	blx	r7
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	f43f ae52 	beq.w	8005ca6 <_printf_float+0xc2>
 8006002:	f108 0801 	add.w	r8, r8, #1
 8006006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006008:	3b01      	subs	r3, #1
 800600a:	4543      	cmp	r3, r8
 800600c:	dcf1      	bgt.n	8005ff2 <_printf_float+0x40e>
 800600e:	464b      	mov	r3, r9
 8006010:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006014:	e6dc      	b.n	8005dd0 <_printf_float+0x1ec>
 8006016:	f04f 0800 	mov.w	r8, #0
 800601a:	f104 0a1a 	add.w	sl, r4, #26
 800601e:	e7f2      	b.n	8006006 <_printf_float+0x422>
 8006020:	2301      	movs	r3, #1
 8006022:	4642      	mov	r2, r8
 8006024:	e7df      	b.n	8005fe6 <_printf_float+0x402>
 8006026:	2301      	movs	r3, #1
 8006028:	464a      	mov	r2, r9
 800602a:	4631      	mov	r1, r6
 800602c:	4628      	mov	r0, r5
 800602e:	47b8      	blx	r7
 8006030:	3001      	adds	r0, #1
 8006032:	f43f ae38 	beq.w	8005ca6 <_printf_float+0xc2>
 8006036:	f108 0801 	add.w	r8, r8, #1
 800603a:	68e3      	ldr	r3, [r4, #12]
 800603c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800603e:	1a5b      	subs	r3, r3, r1
 8006040:	4543      	cmp	r3, r8
 8006042:	dcf0      	bgt.n	8006026 <_printf_float+0x442>
 8006044:	e6fa      	b.n	8005e3c <_printf_float+0x258>
 8006046:	f04f 0800 	mov.w	r8, #0
 800604a:	f104 0919 	add.w	r9, r4, #25
 800604e:	e7f4      	b.n	800603a <_printf_float+0x456>

08006050 <_printf_common>:
 8006050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006054:	4616      	mov	r6, r2
 8006056:	4699      	mov	r9, r3
 8006058:	688a      	ldr	r2, [r1, #8]
 800605a:	690b      	ldr	r3, [r1, #16]
 800605c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006060:	4293      	cmp	r3, r2
 8006062:	bfb8      	it	lt
 8006064:	4613      	movlt	r3, r2
 8006066:	6033      	str	r3, [r6, #0]
 8006068:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800606c:	4607      	mov	r7, r0
 800606e:	460c      	mov	r4, r1
 8006070:	b10a      	cbz	r2, 8006076 <_printf_common+0x26>
 8006072:	3301      	adds	r3, #1
 8006074:	6033      	str	r3, [r6, #0]
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	0699      	lsls	r1, r3, #26
 800607a:	bf42      	ittt	mi
 800607c:	6833      	ldrmi	r3, [r6, #0]
 800607e:	3302      	addmi	r3, #2
 8006080:	6033      	strmi	r3, [r6, #0]
 8006082:	6825      	ldr	r5, [r4, #0]
 8006084:	f015 0506 	ands.w	r5, r5, #6
 8006088:	d106      	bne.n	8006098 <_printf_common+0x48>
 800608a:	f104 0a19 	add.w	sl, r4, #25
 800608e:	68e3      	ldr	r3, [r4, #12]
 8006090:	6832      	ldr	r2, [r6, #0]
 8006092:	1a9b      	subs	r3, r3, r2
 8006094:	42ab      	cmp	r3, r5
 8006096:	dc26      	bgt.n	80060e6 <_printf_common+0x96>
 8006098:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800609c:	1e13      	subs	r3, r2, #0
 800609e:	6822      	ldr	r2, [r4, #0]
 80060a0:	bf18      	it	ne
 80060a2:	2301      	movne	r3, #1
 80060a4:	0692      	lsls	r2, r2, #26
 80060a6:	d42b      	bmi.n	8006100 <_printf_common+0xb0>
 80060a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060ac:	4649      	mov	r1, r9
 80060ae:	4638      	mov	r0, r7
 80060b0:	47c0      	blx	r8
 80060b2:	3001      	adds	r0, #1
 80060b4:	d01e      	beq.n	80060f4 <_printf_common+0xa4>
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	68e5      	ldr	r5, [r4, #12]
 80060ba:	6832      	ldr	r2, [r6, #0]
 80060bc:	f003 0306 	and.w	r3, r3, #6
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	bf08      	it	eq
 80060c4:	1aad      	subeq	r5, r5, r2
 80060c6:	68a3      	ldr	r3, [r4, #8]
 80060c8:	6922      	ldr	r2, [r4, #16]
 80060ca:	bf0c      	ite	eq
 80060cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060d0:	2500      	movne	r5, #0
 80060d2:	4293      	cmp	r3, r2
 80060d4:	bfc4      	itt	gt
 80060d6:	1a9b      	subgt	r3, r3, r2
 80060d8:	18ed      	addgt	r5, r5, r3
 80060da:	2600      	movs	r6, #0
 80060dc:	341a      	adds	r4, #26
 80060de:	42b5      	cmp	r5, r6
 80060e0:	d11a      	bne.n	8006118 <_printf_common+0xc8>
 80060e2:	2000      	movs	r0, #0
 80060e4:	e008      	b.n	80060f8 <_printf_common+0xa8>
 80060e6:	2301      	movs	r3, #1
 80060e8:	4652      	mov	r2, sl
 80060ea:	4649      	mov	r1, r9
 80060ec:	4638      	mov	r0, r7
 80060ee:	47c0      	blx	r8
 80060f0:	3001      	adds	r0, #1
 80060f2:	d103      	bne.n	80060fc <_printf_common+0xac>
 80060f4:	f04f 30ff 	mov.w	r0, #4294967295
 80060f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060fc:	3501      	adds	r5, #1
 80060fe:	e7c6      	b.n	800608e <_printf_common+0x3e>
 8006100:	18e1      	adds	r1, r4, r3
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	2030      	movs	r0, #48	; 0x30
 8006106:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800610a:	4422      	add	r2, r4
 800610c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006110:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006114:	3302      	adds	r3, #2
 8006116:	e7c7      	b.n	80060a8 <_printf_common+0x58>
 8006118:	2301      	movs	r3, #1
 800611a:	4622      	mov	r2, r4
 800611c:	4649      	mov	r1, r9
 800611e:	4638      	mov	r0, r7
 8006120:	47c0      	blx	r8
 8006122:	3001      	adds	r0, #1
 8006124:	d0e6      	beq.n	80060f4 <_printf_common+0xa4>
 8006126:	3601      	adds	r6, #1
 8006128:	e7d9      	b.n	80060de <_printf_common+0x8e>
	...

0800612c <_printf_i>:
 800612c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006130:	460c      	mov	r4, r1
 8006132:	4691      	mov	r9, r2
 8006134:	7e27      	ldrb	r7, [r4, #24]
 8006136:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006138:	2f78      	cmp	r7, #120	; 0x78
 800613a:	4680      	mov	r8, r0
 800613c:	469a      	mov	sl, r3
 800613e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006142:	d807      	bhi.n	8006154 <_printf_i+0x28>
 8006144:	2f62      	cmp	r7, #98	; 0x62
 8006146:	d80a      	bhi.n	800615e <_printf_i+0x32>
 8006148:	2f00      	cmp	r7, #0
 800614a:	f000 80d8 	beq.w	80062fe <_printf_i+0x1d2>
 800614e:	2f58      	cmp	r7, #88	; 0x58
 8006150:	f000 80a3 	beq.w	800629a <_printf_i+0x16e>
 8006154:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006158:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800615c:	e03a      	b.n	80061d4 <_printf_i+0xa8>
 800615e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006162:	2b15      	cmp	r3, #21
 8006164:	d8f6      	bhi.n	8006154 <_printf_i+0x28>
 8006166:	a001      	add	r0, pc, #4	; (adr r0, 800616c <_printf_i+0x40>)
 8006168:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800616c:	080061c5 	.word	0x080061c5
 8006170:	080061d9 	.word	0x080061d9
 8006174:	08006155 	.word	0x08006155
 8006178:	08006155 	.word	0x08006155
 800617c:	08006155 	.word	0x08006155
 8006180:	08006155 	.word	0x08006155
 8006184:	080061d9 	.word	0x080061d9
 8006188:	08006155 	.word	0x08006155
 800618c:	08006155 	.word	0x08006155
 8006190:	08006155 	.word	0x08006155
 8006194:	08006155 	.word	0x08006155
 8006198:	080062e5 	.word	0x080062e5
 800619c:	08006209 	.word	0x08006209
 80061a0:	080062c7 	.word	0x080062c7
 80061a4:	08006155 	.word	0x08006155
 80061a8:	08006155 	.word	0x08006155
 80061ac:	08006307 	.word	0x08006307
 80061b0:	08006155 	.word	0x08006155
 80061b4:	08006209 	.word	0x08006209
 80061b8:	08006155 	.word	0x08006155
 80061bc:	08006155 	.word	0x08006155
 80061c0:	080062cf 	.word	0x080062cf
 80061c4:	680b      	ldr	r3, [r1, #0]
 80061c6:	1d1a      	adds	r2, r3, #4
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	600a      	str	r2, [r1, #0]
 80061cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061d4:	2301      	movs	r3, #1
 80061d6:	e0a3      	b.n	8006320 <_printf_i+0x1f4>
 80061d8:	6825      	ldr	r5, [r4, #0]
 80061da:	6808      	ldr	r0, [r1, #0]
 80061dc:	062e      	lsls	r6, r5, #24
 80061de:	f100 0304 	add.w	r3, r0, #4
 80061e2:	d50a      	bpl.n	80061fa <_printf_i+0xce>
 80061e4:	6805      	ldr	r5, [r0, #0]
 80061e6:	600b      	str	r3, [r1, #0]
 80061e8:	2d00      	cmp	r5, #0
 80061ea:	da03      	bge.n	80061f4 <_printf_i+0xc8>
 80061ec:	232d      	movs	r3, #45	; 0x2d
 80061ee:	426d      	negs	r5, r5
 80061f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061f4:	485e      	ldr	r0, [pc, #376]	; (8006370 <_printf_i+0x244>)
 80061f6:	230a      	movs	r3, #10
 80061f8:	e019      	b.n	800622e <_printf_i+0x102>
 80061fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80061fe:	6805      	ldr	r5, [r0, #0]
 8006200:	600b      	str	r3, [r1, #0]
 8006202:	bf18      	it	ne
 8006204:	b22d      	sxthne	r5, r5
 8006206:	e7ef      	b.n	80061e8 <_printf_i+0xbc>
 8006208:	680b      	ldr	r3, [r1, #0]
 800620a:	6825      	ldr	r5, [r4, #0]
 800620c:	1d18      	adds	r0, r3, #4
 800620e:	6008      	str	r0, [r1, #0]
 8006210:	0628      	lsls	r0, r5, #24
 8006212:	d501      	bpl.n	8006218 <_printf_i+0xec>
 8006214:	681d      	ldr	r5, [r3, #0]
 8006216:	e002      	b.n	800621e <_printf_i+0xf2>
 8006218:	0669      	lsls	r1, r5, #25
 800621a:	d5fb      	bpl.n	8006214 <_printf_i+0xe8>
 800621c:	881d      	ldrh	r5, [r3, #0]
 800621e:	4854      	ldr	r0, [pc, #336]	; (8006370 <_printf_i+0x244>)
 8006220:	2f6f      	cmp	r7, #111	; 0x6f
 8006222:	bf0c      	ite	eq
 8006224:	2308      	moveq	r3, #8
 8006226:	230a      	movne	r3, #10
 8006228:	2100      	movs	r1, #0
 800622a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800622e:	6866      	ldr	r6, [r4, #4]
 8006230:	60a6      	str	r6, [r4, #8]
 8006232:	2e00      	cmp	r6, #0
 8006234:	bfa2      	ittt	ge
 8006236:	6821      	ldrge	r1, [r4, #0]
 8006238:	f021 0104 	bicge.w	r1, r1, #4
 800623c:	6021      	strge	r1, [r4, #0]
 800623e:	b90d      	cbnz	r5, 8006244 <_printf_i+0x118>
 8006240:	2e00      	cmp	r6, #0
 8006242:	d04d      	beq.n	80062e0 <_printf_i+0x1b4>
 8006244:	4616      	mov	r6, r2
 8006246:	fbb5 f1f3 	udiv	r1, r5, r3
 800624a:	fb03 5711 	mls	r7, r3, r1, r5
 800624e:	5dc7      	ldrb	r7, [r0, r7]
 8006250:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006254:	462f      	mov	r7, r5
 8006256:	42bb      	cmp	r3, r7
 8006258:	460d      	mov	r5, r1
 800625a:	d9f4      	bls.n	8006246 <_printf_i+0x11a>
 800625c:	2b08      	cmp	r3, #8
 800625e:	d10b      	bne.n	8006278 <_printf_i+0x14c>
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	07df      	lsls	r7, r3, #31
 8006264:	d508      	bpl.n	8006278 <_printf_i+0x14c>
 8006266:	6923      	ldr	r3, [r4, #16]
 8006268:	6861      	ldr	r1, [r4, #4]
 800626a:	4299      	cmp	r1, r3
 800626c:	bfde      	ittt	le
 800626e:	2330      	movle	r3, #48	; 0x30
 8006270:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006274:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006278:	1b92      	subs	r2, r2, r6
 800627a:	6122      	str	r2, [r4, #16]
 800627c:	f8cd a000 	str.w	sl, [sp]
 8006280:	464b      	mov	r3, r9
 8006282:	aa03      	add	r2, sp, #12
 8006284:	4621      	mov	r1, r4
 8006286:	4640      	mov	r0, r8
 8006288:	f7ff fee2 	bl	8006050 <_printf_common>
 800628c:	3001      	adds	r0, #1
 800628e:	d14c      	bne.n	800632a <_printf_i+0x1fe>
 8006290:	f04f 30ff 	mov.w	r0, #4294967295
 8006294:	b004      	add	sp, #16
 8006296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800629a:	4835      	ldr	r0, [pc, #212]	; (8006370 <_printf_i+0x244>)
 800629c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	680e      	ldr	r6, [r1, #0]
 80062a4:	061f      	lsls	r7, r3, #24
 80062a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80062aa:	600e      	str	r6, [r1, #0]
 80062ac:	d514      	bpl.n	80062d8 <_printf_i+0x1ac>
 80062ae:	07d9      	lsls	r1, r3, #31
 80062b0:	bf44      	itt	mi
 80062b2:	f043 0320 	orrmi.w	r3, r3, #32
 80062b6:	6023      	strmi	r3, [r4, #0]
 80062b8:	b91d      	cbnz	r5, 80062c2 <_printf_i+0x196>
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	f023 0320 	bic.w	r3, r3, #32
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	2310      	movs	r3, #16
 80062c4:	e7b0      	b.n	8006228 <_printf_i+0xfc>
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	f043 0320 	orr.w	r3, r3, #32
 80062cc:	6023      	str	r3, [r4, #0]
 80062ce:	2378      	movs	r3, #120	; 0x78
 80062d0:	4828      	ldr	r0, [pc, #160]	; (8006374 <_printf_i+0x248>)
 80062d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062d6:	e7e3      	b.n	80062a0 <_printf_i+0x174>
 80062d8:	065e      	lsls	r6, r3, #25
 80062da:	bf48      	it	mi
 80062dc:	b2ad      	uxthmi	r5, r5
 80062de:	e7e6      	b.n	80062ae <_printf_i+0x182>
 80062e0:	4616      	mov	r6, r2
 80062e2:	e7bb      	b.n	800625c <_printf_i+0x130>
 80062e4:	680b      	ldr	r3, [r1, #0]
 80062e6:	6826      	ldr	r6, [r4, #0]
 80062e8:	6960      	ldr	r0, [r4, #20]
 80062ea:	1d1d      	adds	r5, r3, #4
 80062ec:	600d      	str	r5, [r1, #0]
 80062ee:	0635      	lsls	r5, r6, #24
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	d501      	bpl.n	80062f8 <_printf_i+0x1cc>
 80062f4:	6018      	str	r0, [r3, #0]
 80062f6:	e002      	b.n	80062fe <_printf_i+0x1d2>
 80062f8:	0671      	lsls	r1, r6, #25
 80062fa:	d5fb      	bpl.n	80062f4 <_printf_i+0x1c8>
 80062fc:	8018      	strh	r0, [r3, #0]
 80062fe:	2300      	movs	r3, #0
 8006300:	6123      	str	r3, [r4, #16]
 8006302:	4616      	mov	r6, r2
 8006304:	e7ba      	b.n	800627c <_printf_i+0x150>
 8006306:	680b      	ldr	r3, [r1, #0]
 8006308:	1d1a      	adds	r2, r3, #4
 800630a:	600a      	str	r2, [r1, #0]
 800630c:	681e      	ldr	r6, [r3, #0]
 800630e:	6862      	ldr	r2, [r4, #4]
 8006310:	2100      	movs	r1, #0
 8006312:	4630      	mov	r0, r6
 8006314:	f7f9 ff64 	bl	80001e0 <memchr>
 8006318:	b108      	cbz	r0, 800631e <_printf_i+0x1f2>
 800631a:	1b80      	subs	r0, r0, r6
 800631c:	6060      	str	r0, [r4, #4]
 800631e:	6863      	ldr	r3, [r4, #4]
 8006320:	6123      	str	r3, [r4, #16]
 8006322:	2300      	movs	r3, #0
 8006324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006328:	e7a8      	b.n	800627c <_printf_i+0x150>
 800632a:	6923      	ldr	r3, [r4, #16]
 800632c:	4632      	mov	r2, r6
 800632e:	4649      	mov	r1, r9
 8006330:	4640      	mov	r0, r8
 8006332:	47d0      	blx	sl
 8006334:	3001      	adds	r0, #1
 8006336:	d0ab      	beq.n	8006290 <_printf_i+0x164>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	079b      	lsls	r3, r3, #30
 800633c:	d413      	bmi.n	8006366 <_printf_i+0x23a>
 800633e:	68e0      	ldr	r0, [r4, #12]
 8006340:	9b03      	ldr	r3, [sp, #12]
 8006342:	4298      	cmp	r0, r3
 8006344:	bfb8      	it	lt
 8006346:	4618      	movlt	r0, r3
 8006348:	e7a4      	b.n	8006294 <_printf_i+0x168>
 800634a:	2301      	movs	r3, #1
 800634c:	4632      	mov	r2, r6
 800634e:	4649      	mov	r1, r9
 8006350:	4640      	mov	r0, r8
 8006352:	47d0      	blx	sl
 8006354:	3001      	adds	r0, #1
 8006356:	d09b      	beq.n	8006290 <_printf_i+0x164>
 8006358:	3501      	adds	r5, #1
 800635a:	68e3      	ldr	r3, [r4, #12]
 800635c:	9903      	ldr	r1, [sp, #12]
 800635e:	1a5b      	subs	r3, r3, r1
 8006360:	42ab      	cmp	r3, r5
 8006362:	dcf2      	bgt.n	800634a <_printf_i+0x21e>
 8006364:	e7eb      	b.n	800633e <_printf_i+0x212>
 8006366:	2500      	movs	r5, #0
 8006368:	f104 0619 	add.w	r6, r4, #25
 800636c:	e7f5      	b.n	800635a <_printf_i+0x22e>
 800636e:	bf00      	nop
 8006370:	08008a0e 	.word	0x08008a0e
 8006374:	08008a1f 	.word	0x08008a1f

08006378 <siprintf>:
 8006378:	b40e      	push	{r1, r2, r3}
 800637a:	b500      	push	{lr}
 800637c:	b09c      	sub	sp, #112	; 0x70
 800637e:	ab1d      	add	r3, sp, #116	; 0x74
 8006380:	9002      	str	r0, [sp, #8]
 8006382:	9006      	str	r0, [sp, #24]
 8006384:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006388:	4809      	ldr	r0, [pc, #36]	; (80063b0 <siprintf+0x38>)
 800638a:	9107      	str	r1, [sp, #28]
 800638c:	9104      	str	r1, [sp, #16]
 800638e:	4909      	ldr	r1, [pc, #36]	; (80063b4 <siprintf+0x3c>)
 8006390:	f853 2b04 	ldr.w	r2, [r3], #4
 8006394:	9105      	str	r1, [sp, #20]
 8006396:	6800      	ldr	r0, [r0, #0]
 8006398:	9301      	str	r3, [sp, #4]
 800639a:	a902      	add	r1, sp, #8
 800639c:	f001 fb48 	bl	8007a30 <_svfiprintf_r>
 80063a0:	9b02      	ldr	r3, [sp, #8]
 80063a2:	2200      	movs	r2, #0
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	b01c      	add	sp, #112	; 0x70
 80063a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80063ac:	b003      	add	sp, #12
 80063ae:	4770      	bx	lr
 80063b0:	20000020 	.word	0x20000020
 80063b4:	ffff0208 	.word	0xffff0208

080063b8 <strchr>:
 80063b8:	b2c9      	uxtb	r1, r1
 80063ba:	4603      	mov	r3, r0
 80063bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063c0:	b11a      	cbz	r2, 80063ca <strchr+0x12>
 80063c2:	428a      	cmp	r2, r1
 80063c4:	d1f9      	bne.n	80063ba <strchr+0x2>
 80063c6:	4618      	mov	r0, r3
 80063c8:	4770      	bx	lr
 80063ca:	2900      	cmp	r1, #0
 80063cc:	bf18      	it	ne
 80063ce:	2300      	movne	r3, #0
 80063d0:	e7f9      	b.n	80063c6 <strchr+0xe>

080063d2 <strstr>:
 80063d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063d4:	780c      	ldrb	r4, [r1, #0]
 80063d6:	b164      	cbz	r4, 80063f2 <strstr+0x20>
 80063d8:	4603      	mov	r3, r0
 80063da:	781a      	ldrb	r2, [r3, #0]
 80063dc:	4618      	mov	r0, r3
 80063de:	1c5e      	adds	r6, r3, #1
 80063e0:	b90a      	cbnz	r2, 80063e6 <strstr+0x14>
 80063e2:	4610      	mov	r0, r2
 80063e4:	e005      	b.n	80063f2 <strstr+0x20>
 80063e6:	4294      	cmp	r4, r2
 80063e8:	d108      	bne.n	80063fc <strstr+0x2a>
 80063ea:	460d      	mov	r5, r1
 80063ec:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80063f0:	b902      	cbnz	r2, 80063f4 <strstr+0x22>
 80063f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80063f8:	4297      	cmp	r7, r2
 80063fa:	d0f7      	beq.n	80063ec <strstr+0x1a>
 80063fc:	4633      	mov	r3, r6
 80063fe:	e7ec      	b.n	80063da <strstr+0x8>

08006400 <quorem>:
 8006400:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006404:	6903      	ldr	r3, [r0, #16]
 8006406:	690c      	ldr	r4, [r1, #16]
 8006408:	42a3      	cmp	r3, r4
 800640a:	4607      	mov	r7, r0
 800640c:	f2c0 8081 	blt.w	8006512 <quorem+0x112>
 8006410:	3c01      	subs	r4, #1
 8006412:	f101 0814 	add.w	r8, r1, #20
 8006416:	f100 0514 	add.w	r5, r0, #20
 800641a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800641e:	9301      	str	r3, [sp, #4]
 8006420:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006424:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006428:	3301      	adds	r3, #1
 800642a:	429a      	cmp	r2, r3
 800642c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006430:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006434:	fbb2 f6f3 	udiv	r6, r2, r3
 8006438:	d331      	bcc.n	800649e <quorem+0x9e>
 800643a:	f04f 0e00 	mov.w	lr, #0
 800643e:	4640      	mov	r0, r8
 8006440:	46ac      	mov	ip, r5
 8006442:	46f2      	mov	sl, lr
 8006444:	f850 2b04 	ldr.w	r2, [r0], #4
 8006448:	b293      	uxth	r3, r2
 800644a:	fb06 e303 	mla	r3, r6, r3, lr
 800644e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006452:	b29b      	uxth	r3, r3
 8006454:	ebaa 0303 	sub.w	r3, sl, r3
 8006458:	0c12      	lsrs	r2, r2, #16
 800645a:	f8dc a000 	ldr.w	sl, [ip]
 800645e:	fb06 e202 	mla	r2, r6, r2, lr
 8006462:	fa13 f38a 	uxtah	r3, r3, sl
 8006466:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800646a:	fa1f fa82 	uxth.w	sl, r2
 800646e:	f8dc 2000 	ldr.w	r2, [ip]
 8006472:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006476:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800647a:	b29b      	uxth	r3, r3
 800647c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006480:	4581      	cmp	r9, r0
 8006482:	f84c 3b04 	str.w	r3, [ip], #4
 8006486:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800648a:	d2db      	bcs.n	8006444 <quorem+0x44>
 800648c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006490:	b92b      	cbnz	r3, 800649e <quorem+0x9e>
 8006492:	9b01      	ldr	r3, [sp, #4]
 8006494:	3b04      	subs	r3, #4
 8006496:	429d      	cmp	r5, r3
 8006498:	461a      	mov	r2, r3
 800649a:	d32e      	bcc.n	80064fa <quorem+0xfa>
 800649c:	613c      	str	r4, [r7, #16]
 800649e:	4638      	mov	r0, r7
 80064a0:	f001 f8b0 	bl	8007604 <__mcmp>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	db24      	blt.n	80064f2 <quorem+0xf2>
 80064a8:	3601      	adds	r6, #1
 80064aa:	4628      	mov	r0, r5
 80064ac:	f04f 0c00 	mov.w	ip, #0
 80064b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80064b4:	f8d0 e000 	ldr.w	lr, [r0]
 80064b8:	b293      	uxth	r3, r2
 80064ba:	ebac 0303 	sub.w	r3, ip, r3
 80064be:	0c12      	lsrs	r2, r2, #16
 80064c0:	fa13 f38e 	uxtah	r3, r3, lr
 80064c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80064c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064d2:	45c1      	cmp	r9, r8
 80064d4:	f840 3b04 	str.w	r3, [r0], #4
 80064d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80064dc:	d2e8      	bcs.n	80064b0 <quorem+0xb0>
 80064de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064e6:	b922      	cbnz	r2, 80064f2 <quorem+0xf2>
 80064e8:	3b04      	subs	r3, #4
 80064ea:	429d      	cmp	r5, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	d30a      	bcc.n	8006506 <quorem+0x106>
 80064f0:	613c      	str	r4, [r7, #16]
 80064f2:	4630      	mov	r0, r6
 80064f4:	b003      	add	sp, #12
 80064f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fa:	6812      	ldr	r2, [r2, #0]
 80064fc:	3b04      	subs	r3, #4
 80064fe:	2a00      	cmp	r2, #0
 8006500:	d1cc      	bne.n	800649c <quorem+0x9c>
 8006502:	3c01      	subs	r4, #1
 8006504:	e7c7      	b.n	8006496 <quorem+0x96>
 8006506:	6812      	ldr	r2, [r2, #0]
 8006508:	3b04      	subs	r3, #4
 800650a:	2a00      	cmp	r2, #0
 800650c:	d1f0      	bne.n	80064f0 <quorem+0xf0>
 800650e:	3c01      	subs	r4, #1
 8006510:	e7eb      	b.n	80064ea <quorem+0xea>
 8006512:	2000      	movs	r0, #0
 8006514:	e7ee      	b.n	80064f4 <quorem+0xf4>
	...

08006518 <_dtoa_r>:
 8006518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651c:	ed2d 8b02 	vpush	{d8}
 8006520:	ec57 6b10 	vmov	r6, r7, d0
 8006524:	b095      	sub	sp, #84	; 0x54
 8006526:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006528:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800652c:	9105      	str	r1, [sp, #20]
 800652e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006532:	4604      	mov	r4, r0
 8006534:	9209      	str	r2, [sp, #36]	; 0x24
 8006536:	930f      	str	r3, [sp, #60]	; 0x3c
 8006538:	b975      	cbnz	r5, 8006558 <_dtoa_r+0x40>
 800653a:	2010      	movs	r0, #16
 800653c:	f000 fddc 	bl	80070f8 <malloc>
 8006540:	4602      	mov	r2, r0
 8006542:	6260      	str	r0, [r4, #36]	; 0x24
 8006544:	b920      	cbnz	r0, 8006550 <_dtoa_r+0x38>
 8006546:	4bb2      	ldr	r3, [pc, #712]	; (8006810 <_dtoa_r+0x2f8>)
 8006548:	21ea      	movs	r1, #234	; 0xea
 800654a:	48b2      	ldr	r0, [pc, #712]	; (8006814 <_dtoa_r+0x2fc>)
 800654c:	f001 fb80 	bl	8007c50 <__assert_func>
 8006550:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006554:	6005      	str	r5, [r0, #0]
 8006556:	60c5      	str	r5, [r0, #12]
 8006558:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800655a:	6819      	ldr	r1, [r3, #0]
 800655c:	b151      	cbz	r1, 8006574 <_dtoa_r+0x5c>
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	604a      	str	r2, [r1, #4]
 8006562:	2301      	movs	r3, #1
 8006564:	4093      	lsls	r3, r2
 8006566:	608b      	str	r3, [r1, #8]
 8006568:	4620      	mov	r0, r4
 800656a:	f000 fe0d 	bl	8007188 <_Bfree>
 800656e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	1e3b      	subs	r3, r7, #0
 8006576:	bfb9      	ittee	lt
 8006578:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800657c:	9303      	strlt	r3, [sp, #12]
 800657e:	2300      	movge	r3, #0
 8006580:	f8c8 3000 	strge.w	r3, [r8]
 8006584:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006588:	4ba3      	ldr	r3, [pc, #652]	; (8006818 <_dtoa_r+0x300>)
 800658a:	bfbc      	itt	lt
 800658c:	2201      	movlt	r2, #1
 800658e:	f8c8 2000 	strlt.w	r2, [r8]
 8006592:	ea33 0309 	bics.w	r3, r3, r9
 8006596:	d11b      	bne.n	80065d0 <_dtoa_r+0xb8>
 8006598:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800659a:	f242 730f 	movw	r3, #9999	; 0x270f
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80065a4:	4333      	orrs	r3, r6
 80065a6:	f000 857a 	beq.w	800709e <_dtoa_r+0xb86>
 80065aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065ac:	b963      	cbnz	r3, 80065c8 <_dtoa_r+0xb0>
 80065ae:	4b9b      	ldr	r3, [pc, #620]	; (800681c <_dtoa_r+0x304>)
 80065b0:	e024      	b.n	80065fc <_dtoa_r+0xe4>
 80065b2:	4b9b      	ldr	r3, [pc, #620]	; (8006820 <_dtoa_r+0x308>)
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	3308      	adds	r3, #8
 80065b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	9800      	ldr	r0, [sp, #0]
 80065be:	b015      	add	sp, #84	; 0x54
 80065c0:	ecbd 8b02 	vpop	{d8}
 80065c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c8:	4b94      	ldr	r3, [pc, #592]	; (800681c <_dtoa_r+0x304>)
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	3303      	adds	r3, #3
 80065ce:	e7f3      	b.n	80065b8 <_dtoa_r+0xa0>
 80065d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80065d4:	2200      	movs	r2, #0
 80065d6:	ec51 0b17 	vmov	r0, r1, d7
 80065da:	2300      	movs	r3, #0
 80065dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80065e0:	f7fa fa72 	bl	8000ac8 <__aeabi_dcmpeq>
 80065e4:	4680      	mov	r8, r0
 80065e6:	b158      	cbz	r0, 8006600 <_dtoa_r+0xe8>
 80065e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80065ea:	2301      	movs	r3, #1
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 8551 	beq.w	8007098 <_dtoa_r+0xb80>
 80065f6:	488b      	ldr	r0, [pc, #556]	; (8006824 <_dtoa_r+0x30c>)
 80065f8:	6018      	str	r0, [r3, #0]
 80065fa:	1e43      	subs	r3, r0, #1
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	e7dd      	b.n	80065bc <_dtoa_r+0xa4>
 8006600:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006604:	aa12      	add	r2, sp, #72	; 0x48
 8006606:	a913      	add	r1, sp, #76	; 0x4c
 8006608:	4620      	mov	r0, r4
 800660a:	f001 f89f 	bl	800774c <__d2b>
 800660e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006612:	4683      	mov	fp, r0
 8006614:	2d00      	cmp	r5, #0
 8006616:	d07c      	beq.n	8006712 <_dtoa_r+0x1fa>
 8006618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800661a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800661e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006622:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006626:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800662a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800662e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006632:	4b7d      	ldr	r3, [pc, #500]	; (8006828 <_dtoa_r+0x310>)
 8006634:	2200      	movs	r2, #0
 8006636:	4630      	mov	r0, r6
 8006638:	4639      	mov	r1, r7
 800663a:	f7f9 fe25 	bl	8000288 <__aeabi_dsub>
 800663e:	a36e      	add	r3, pc, #440	; (adr r3, 80067f8 <_dtoa_r+0x2e0>)
 8006640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006644:	f7f9 ffd8 	bl	80005f8 <__aeabi_dmul>
 8006648:	a36d      	add	r3, pc, #436	; (adr r3, 8006800 <_dtoa_r+0x2e8>)
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	f7f9 fe1d 	bl	800028c <__adddf3>
 8006652:	4606      	mov	r6, r0
 8006654:	4628      	mov	r0, r5
 8006656:	460f      	mov	r7, r1
 8006658:	f7f9 ff64 	bl	8000524 <__aeabi_i2d>
 800665c:	a36a      	add	r3, pc, #424	; (adr r3, 8006808 <_dtoa_r+0x2f0>)
 800665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006662:	f7f9 ffc9 	bl	80005f8 <__aeabi_dmul>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	4630      	mov	r0, r6
 800666c:	4639      	mov	r1, r7
 800666e:	f7f9 fe0d 	bl	800028c <__adddf3>
 8006672:	4606      	mov	r6, r0
 8006674:	460f      	mov	r7, r1
 8006676:	f7fa fa6f 	bl	8000b58 <__aeabi_d2iz>
 800667a:	2200      	movs	r2, #0
 800667c:	4682      	mov	sl, r0
 800667e:	2300      	movs	r3, #0
 8006680:	4630      	mov	r0, r6
 8006682:	4639      	mov	r1, r7
 8006684:	f7fa fa2a 	bl	8000adc <__aeabi_dcmplt>
 8006688:	b148      	cbz	r0, 800669e <_dtoa_r+0x186>
 800668a:	4650      	mov	r0, sl
 800668c:	f7f9 ff4a 	bl	8000524 <__aeabi_i2d>
 8006690:	4632      	mov	r2, r6
 8006692:	463b      	mov	r3, r7
 8006694:	f7fa fa18 	bl	8000ac8 <__aeabi_dcmpeq>
 8006698:	b908      	cbnz	r0, 800669e <_dtoa_r+0x186>
 800669a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800669e:	f1ba 0f16 	cmp.w	sl, #22
 80066a2:	d854      	bhi.n	800674e <_dtoa_r+0x236>
 80066a4:	4b61      	ldr	r3, [pc, #388]	; (800682c <_dtoa_r+0x314>)
 80066a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80066aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066b2:	f7fa fa13 	bl	8000adc <__aeabi_dcmplt>
 80066b6:	2800      	cmp	r0, #0
 80066b8:	d04b      	beq.n	8006752 <_dtoa_r+0x23a>
 80066ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066be:	2300      	movs	r3, #0
 80066c0:	930e      	str	r3, [sp, #56]	; 0x38
 80066c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066c4:	1b5d      	subs	r5, r3, r5
 80066c6:	1e6b      	subs	r3, r5, #1
 80066c8:	9304      	str	r3, [sp, #16]
 80066ca:	bf43      	ittte	mi
 80066cc:	2300      	movmi	r3, #0
 80066ce:	f1c5 0801 	rsbmi	r8, r5, #1
 80066d2:	9304      	strmi	r3, [sp, #16]
 80066d4:	f04f 0800 	movpl.w	r8, #0
 80066d8:	f1ba 0f00 	cmp.w	sl, #0
 80066dc:	db3b      	blt.n	8006756 <_dtoa_r+0x23e>
 80066de:	9b04      	ldr	r3, [sp, #16]
 80066e0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80066e4:	4453      	add	r3, sl
 80066e6:	9304      	str	r3, [sp, #16]
 80066e8:	2300      	movs	r3, #0
 80066ea:	9306      	str	r3, [sp, #24]
 80066ec:	9b05      	ldr	r3, [sp, #20]
 80066ee:	2b09      	cmp	r3, #9
 80066f0:	d869      	bhi.n	80067c6 <_dtoa_r+0x2ae>
 80066f2:	2b05      	cmp	r3, #5
 80066f4:	bfc4      	itt	gt
 80066f6:	3b04      	subgt	r3, #4
 80066f8:	9305      	strgt	r3, [sp, #20]
 80066fa:	9b05      	ldr	r3, [sp, #20]
 80066fc:	f1a3 0302 	sub.w	r3, r3, #2
 8006700:	bfcc      	ite	gt
 8006702:	2500      	movgt	r5, #0
 8006704:	2501      	movle	r5, #1
 8006706:	2b03      	cmp	r3, #3
 8006708:	d869      	bhi.n	80067de <_dtoa_r+0x2c6>
 800670a:	e8df f003 	tbb	[pc, r3]
 800670e:	4e2c      	.short	0x4e2c
 8006710:	5a4c      	.short	0x5a4c
 8006712:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006716:	441d      	add	r5, r3
 8006718:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800671c:	2b20      	cmp	r3, #32
 800671e:	bfc1      	itttt	gt
 8006720:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006724:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006728:	fa09 f303 	lslgt.w	r3, r9, r3
 800672c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006730:	bfda      	itte	le
 8006732:	f1c3 0320 	rsble	r3, r3, #32
 8006736:	fa06 f003 	lslle.w	r0, r6, r3
 800673a:	4318      	orrgt	r0, r3
 800673c:	f7f9 fee2 	bl	8000504 <__aeabi_ui2d>
 8006740:	2301      	movs	r3, #1
 8006742:	4606      	mov	r6, r0
 8006744:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006748:	3d01      	subs	r5, #1
 800674a:	9310      	str	r3, [sp, #64]	; 0x40
 800674c:	e771      	b.n	8006632 <_dtoa_r+0x11a>
 800674e:	2301      	movs	r3, #1
 8006750:	e7b6      	b.n	80066c0 <_dtoa_r+0x1a8>
 8006752:	900e      	str	r0, [sp, #56]	; 0x38
 8006754:	e7b5      	b.n	80066c2 <_dtoa_r+0x1aa>
 8006756:	f1ca 0300 	rsb	r3, sl, #0
 800675a:	9306      	str	r3, [sp, #24]
 800675c:	2300      	movs	r3, #0
 800675e:	eba8 080a 	sub.w	r8, r8, sl
 8006762:	930d      	str	r3, [sp, #52]	; 0x34
 8006764:	e7c2      	b.n	80066ec <_dtoa_r+0x1d4>
 8006766:	2300      	movs	r3, #0
 8006768:	9308      	str	r3, [sp, #32]
 800676a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800676c:	2b00      	cmp	r3, #0
 800676e:	dc39      	bgt.n	80067e4 <_dtoa_r+0x2cc>
 8006770:	f04f 0901 	mov.w	r9, #1
 8006774:	f8cd 9004 	str.w	r9, [sp, #4]
 8006778:	464b      	mov	r3, r9
 800677a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800677e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006780:	2200      	movs	r2, #0
 8006782:	6042      	str	r2, [r0, #4]
 8006784:	2204      	movs	r2, #4
 8006786:	f102 0614 	add.w	r6, r2, #20
 800678a:	429e      	cmp	r6, r3
 800678c:	6841      	ldr	r1, [r0, #4]
 800678e:	d92f      	bls.n	80067f0 <_dtoa_r+0x2d8>
 8006790:	4620      	mov	r0, r4
 8006792:	f000 fcb9 	bl	8007108 <_Balloc>
 8006796:	9000      	str	r0, [sp, #0]
 8006798:	2800      	cmp	r0, #0
 800679a:	d14b      	bne.n	8006834 <_dtoa_r+0x31c>
 800679c:	4b24      	ldr	r3, [pc, #144]	; (8006830 <_dtoa_r+0x318>)
 800679e:	4602      	mov	r2, r0
 80067a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80067a4:	e6d1      	b.n	800654a <_dtoa_r+0x32>
 80067a6:	2301      	movs	r3, #1
 80067a8:	e7de      	b.n	8006768 <_dtoa_r+0x250>
 80067aa:	2300      	movs	r3, #0
 80067ac:	9308      	str	r3, [sp, #32]
 80067ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b0:	eb0a 0903 	add.w	r9, sl, r3
 80067b4:	f109 0301 	add.w	r3, r9, #1
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	9301      	str	r3, [sp, #4]
 80067bc:	bfb8      	it	lt
 80067be:	2301      	movlt	r3, #1
 80067c0:	e7dd      	b.n	800677e <_dtoa_r+0x266>
 80067c2:	2301      	movs	r3, #1
 80067c4:	e7f2      	b.n	80067ac <_dtoa_r+0x294>
 80067c6:	2501      	movs	r5, #1
 80067c8:	2300      	movs	r3, #0
 80067ca:	9305      	str	r3, [sp, #20]
 80067cc:	9508      	str	r5, [sp, #32]
 80067ce:	f04f 39ff 	mov.w	r9, #4294967295
 80067d2:	2200      	movs	r2, #0
 80067d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80067d8:	2312      	movs	r3, #18
 80067da:	9209      	str	r2, [sp, #36]	; 0x24
 80067dc:	e7cf      	b.n	800677e <_dtoa_r+0x266>
 80067de:	2301      	movs	r3, #1
 80067e0:	9308      	str	r3, [sp, #32]
 80067e2:	e7f4      	b.n	80067ce <_dtoa_r+0x2b6>
 80067e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80067e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80067ec:	464b      	mov	r3, r9
 80067ee:	e7c6      	b.n	800677e <_dtoa_r+0x266>
 80067f0:	3101      	adds	r1, #1
 80067f2:	6041      	str	r1, [r0, #4]
 80067f4:	0052      	lsls	r2, r2, #1
 80067f6:	e7c6      	b.n	8006786 <_dtoa_r+0x26e>
 80067f8:	636f4361 	.word	0x636f4361
 80067fc:	3fd287a7 	.word	0x3fd287a7
 8006800:	8b60c8b3 	.word	0x8b60c8b3
 8006804:	3fc68a28 	.word	0x3fc68a28
 8006808:	509f79fb 	.word	0x509f79fb
 800680c:	3fd34413 	.word	0x3fd34413
 8006810:	08008a3d 	.word	0x08008a3d
 8006814:	08008a54 	.word	0x08008a54
 8006818:	7ff00000 	.word	0x7ff00000
 800681c:	08008a39 	.word	0x08008a39
 8006820:	08008a30 	.word	0x08008a30
 8006824:	08008a0d 	.word	0x08008a0d
 8006828:	3ff80000 	.word	0x3ff80000
 800682c:	08008b50 	.word	0x08008b50
 8006830:	08008ab3 	.word	0x08008ab3
 8006834:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006836:	9a00      	ldr	r2, [sp, #0]
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	9b01      	ldr	r3, [sp, #4]
 800683c:	2b0e      	cmp	r3, #14
 800683e:	f200 80ad 	bhi.w	800699c <_dtoa_r+0x484>
 8006842:	2d00      	cmp	r5, #0
 8006844:	f000 80aa 	beq.w	800699c <_dtoa_r+0x484>
 8006848:	f1ba 0f00 	cmp.w	sl, #0
 800684c:	dd36      	ble.n	80068bc <_dtoa_r+0x3a4>
 800684e:	4ac3      	ldr	r2, [pc, #780]	; (8006b5c <_dtoa_r+0x644>)
 8006850:	f00a 030f 	and.w	r3, sl, #15
 8006854:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006858:	ed93 7b00 	vldr	d7, [r3]
 800685c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006860:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006864:	eeb0 8a47 	vmov.f32	s16, s14
 8006868:	eef0 8a67 	vmov.f32	s17, s15
 800686c:	d016      	beq.n	800689c <_dtoa_r+0x384>
 800686e:	4bbc      	ldr	r3, [pc, #752]	; (8006b60 <_dtoa_r+0x648>)
 8006870:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006874:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006878:	f7f9 ffe8 	bl	800084c <__aeabi_ddiv>
 800687c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006880:	f007 070f 	and.w	r7, r7, #15
 8006884:	2503      	movs	r5, #3
 8006886:	4eb6      	ldr	r6, [pc, #728]	; (8006b60 <_dtoa_r+0x648>)
 8006888:	b957      	cbnz	r7, 80068a0 <_dtoa_r+0x388>
 800688a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800688e:	ec53 2b18 	vmov	r2, r3, d8
 8006892:	f7f9 ffdb 	bl	800084c <__aeabi_ddiv>
 8006896:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800689a:	e029      	b.n	80068f0 <_dtoa_r+0x3d8>
 800689c:	2502      	movs	r5, #2
 800689e:	e7f2      	b.n	8006886 <_dtoa_r+0x36e>
 80068a0:	07f9      	lsls	r1, r7, #31
 80068a2:	d508      	bpl.n	80068b6 <_dtoa_r+0x39e>
 80068a4:	ec51 0b18 	vmov	r0, r1, d8
 80068a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80068ac:	f7f9 fea4 	bl	80005f8 <__aeabi_dmul>
 80068b0:	ec41 0b18 	vmov	d8, r0, r1
 80068b4:	3501      	adds	r5, #1
 80068b6:	107f      	asrs	r7, r7, #1
 80068b8:	3608      	adds	r6, #8
 80068ba:	e7e5      	b.n	8006888 <_dtoa_r+0x370>
 80068bc:	f000 80a6 	beq.w	8006a0c <_dtoa_r+0x4f4>
 80068c0:	f1ca 0600 	rsb	r6, sl, #0
 80068c4:	4ba5      	ldr	r3, [pc, #660]	; (8006b5c <_dtoa_r+0x644>)
 80068c6:	4fa6      	ldr	r7, [pc, #664]	; (8006b60 <_dtoa_r+0x648>)
 80068c8:	f006 020f 	and.w	r2, r6, #15
 80068cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80068d8:	f7f9 fe8e 	bl	80005f8 <__aeabi_dmul>
 80068dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068e0:	1136      	asrs	r6, r6, #4
 80068e2:	2300      	movs	r3, #0
 80068e4:	2502      	movs	r5, #2
 80068e6:	2e00      	cmp	r6, #0
 80068e8:	f040 8085 	bne.w	80069f6 <_dtoa_r+0x4de>
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1d2      	bne.n	8006896 <_dtoa_r+0x37e>
 80068f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 808c 	beq.w	8006a10 <_dtoa_r+0x4f8>
 80068f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80068fc:	4b99      	ldr	r3, [pc, #612]	; (8006b64 <_dtoa_r+0x64c>)
 80068fe:	2200      	movs	r2, #0
 8006900:	4630      	mov	r0, r6
 8006902:	4639      	mov	r1, r7
 8006904:	f7fa f8ea 	bl	8000adc <__aeabi_dcmplt>
 8006908:	2800      	cmp	r0, #0
 800690a:	f000 8081 	beq.w	8006a10 <_dtoa_r+0x4f8>
 800690e:	9b01      	ldr	r3, [sp, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d07d      	beq.n	8006a10 <_dtoa_r+0x4f8>
 8006914:	f1b9 0f00 	cmp.w	r9, #0
 8006918:	dd3c      	ble.n	8006994 <_dtoa_r+0x47c>
 800691a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800691e:	9307      	str	r3, [sp, #28]
 8006920:	2200      	movs	r2, #0
 8006922:	4b91      	ldr	r3, [pc, #580]	; (8006b68 <_dtoa_r+0x650>)
 8006924:	4630      	mov	r0, r6
 8006926:	4639      	mov	r1, r7
 8006928:	f7f9 fe66 	bl	80005f8 <__aeabi_dmul>
 800692c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006930:	3501      	adds	r5, #1
 8006932:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006936:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800693a:	4628      	mov	r0, r5
 800693c:	f7f9 fdf2 	bl	8000524 <__aeabi_i2d>
 8006940:	4632      	mov	r2, r6
 8006942:	463b      	mov	r3, r7
 8006944:	f7f9 fe58 	bl	80005f8 <__aeabi_dmul>
 8006948:	4b88      	ldr	r3, [pc, #544]	; (8006b6c <_dtoa_r+0x654>)
 800694a:	2200      	movs	r2, #0
 800694c:	f7f9 fc9e 	bl	800028c <__adddf3>
 8006950:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006958:	9303      	str	r3, [sp, #12]
 800695a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800695c:	2b00      	cmp	r3, #0
 800695e:	d15c      	bne.n	8006a1a <_dtoa_r+0x502>
 8006960:	4b83      	ldr	r3, [pc, #524]	; (8006b70 <_dtoa_r+0x658>)
 8006962:	2200      	movs	r2, #0
 8006964:	4630      	mov	r0, r6
 8006966:	4639      	mov	r1, r7
 8006968:	f7f9 fc8e 	bl	8000288 <__aeabi_dsub>
 800696c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006970:	4606      	mov	r6, r0
 8006972:	460f      	mov	r7, r1
 8006974:	f7fa f8d0 	bl	8000b18 <__aeabi_dcmpgt>
 8006978:	2800      	cmp	r0, #0
 800697a:	f040 8296 	bne.w	8006eaa <_dtoa_r+0x992>
 800697e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006982:	4630      	mov	r0, r6
 8006984:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006988:	4639      	mov	r1, r7
 800698a:	f7fa f8a7 	bl	8000adc <__aeabi_dcmplt>
 800698e:	2800      	cmp	r0, #0
 8006990:	f040 8288 	bne.w	8006ea4 <_dtoa_r+0x98c>
 8006994:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006998:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800699c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f2c0 8158 	blt.w	8006c54 <_dtoa_r+0x73c>
 80069a4:	f1ba 0f0e 	cmp.w	sl, #14
 80069a8:	f300 8154 	bgt.w	8006c54 <_dtoa_r+0x73c>
 80069ac:	4b6b      	ldr	r3, [pc, #428]	; (8006b5c <_dtoa_r+0x644>)
 80069ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80069b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f280 80e3 	bge.w	8006b84 <_dtoa_r+0x66c>
 80069be:	9b01      	ldr	r3, [sp, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f300 80df 	bgt.w	8006b84 <_dtoa_r+0x66c>
 80069c6:	f040 826d 	bne.w	8006ea4 <_dtoa_r+0x98c>
 80069ca:	4b69      	ldr	r3, [pc, #420]	; (8006b70 <_dtoa_r+0x658>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	4640      	mov	r0, r8
 80069d0:	4649      	mov	r1, r9
 80069d2:	f7f9 fe11 	bl	80005f8 <__aeabi_dmul>
 80069d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069da:	f7fa f893 	bl	8000b04 <__aeabi_dcmpge>
 80069de:	9e01      	ldr	r6, [sp, #4]
 80069e0:	4637      	mov	r7, r6
 80069e2:	2800      	cmp	r0, #0
 80069e4:	f040 8243 	bne.w	8006e6e <_dtoa_r+0x956>
 80069e8:	9d00      	ldr	r5, [sp, #0]
 80069ea:	2331      	movs	r3, #49	; 0x31
 80069ec:	f805 3b01 	strb.w	r3, [r5], #1
 80069f0:	f10a 0a01 	add.w	sl, sl, #1
 80069f4:	e23f      	b.n	8006e76 <_dtoa_r+0x95e>
 80069f6:	07f2      	lsls	r2, r6, #31
 80069f8:	d505      	bpl.n	8006a06 <_dtoa_r+0x4ee>
 80069fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069fe:	f7f9 fdfb 	bl	80005f8 <__aeabi_dmul>
 8006a02:	3501      	adds	r5, #1
 8006a04:	2301      	movs	r3, #1
 8006a06:	1076      	asrs	r6, r6, #1
 8006a08:	3708      	adds	r7, #8
 8006a0a:	e76c      	b.n	80068e6 <_dtoa_r+0x3ce>
 8006a0c:	2502      	movs	r5, #2
 8006a0e:	e76f      	b.n	80068f0 <_dtoa_r+0x3d8>
 8006a10:	9b01      	ldr	r3, [sp, #4]
 8006a12:	f8cd a01c 	str.w	sl, [sp, #28]
 8006a16:	930c      	str	r3, [sp, #48]	; 0x30
 8006a18:	e78d      	b.n	8006936 <_dtoa_r+0x41e>
 8006a1a:	9900      	ldr	r1, [sp, #0]
 8006a1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006a1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a20:	4b4e      	ldr	r3, [pc, #312]	; (8006b5c <_dtoa_r+0x644>)
 8006a22:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a26:	4401      	add	r1, r0
 8006a28:	9102      	str	r1, [sp, #8]
 8006a2a:	9908      	ldr	r1, [sp, #32]
 8006a2c:	eeb0 8a47 	vmov.f32	s16, s14
 8006a30:	eef0 8a67 	vmov.f32	s17, s15
 8006a34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a3c:	2900      	cmp	r1, #0
 8006a3e:	d045      	beq.n	8006acc <_dtoa_r+0x5b4>
 8006a40:	494c      	ldr	r1, [pc, #304]	; (8006b74 <_dtoa_r+0x65c>)
 8006a42:	2000      	movs	r0, #0
 8006a44:	f7f9 ff02 	bl	800084c <__aeabi_ddiv>
 8006a48:	ec53 2b18 	vmov	r2, r3, d8
 8006a4c:	f7f9 fc1c 	bl	8000288 <__aeabi_dsub>
 8006a50:	9d00      	ldr	r5, [sp, #0]
 8006a52:	ec41 0b18 	vmov	d8, r0, r1
 8006a56:	4639      	mov	r1, r7
 8006a58:	4630      	mov	r0, r6
 8006a5a:	f7fa f87d 	bl	8000b58 <__aeabi_d2iz>
 8006a5e:	900c      	str	r0, [sp, #48]	; 0x30
 8006a60:	f7f9 fd60 	bl	8000524 <__aeabi_i2d>
 8006a64:	4602      	mov	r2, r0
 8006a66:	460b      	mov	r3, r1
 8006a68:	4630      	mov	r0, r6
 8006a6a:	4639      	mov	r1, r7
 8006a6c:	f7f9 fc0c 	bl	8000288 <__aeabi_dsub>
 8006a70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a72:	3330      	adds	r3, #48	; 0x30
 8006a74:	f805 3b01 	strb.w	r3, [r5], #1
 8006a78:	ec53 2b18 	vmov	r2, r3, d8
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	460f      	mov	r7, r1
 8006a80:	f7fa f82c 	bl	8000adc <__aeabi_dcmplt>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	d165      	bne.n	8006b54 <_dtoa_r+0x63c>
 8006a88:	4632      	mov	r2, r6
 8006a8a:	463b      	mov	r3, r7
 8006a8c:	4935      	ldr	r1, [pc, #212]	; (8006b64 <_dtoa_r+0x64c>)
 8006a8e:	2000      	movs	r0, #0
 8006a90:	f7f9 fbfa 	bl	8000288 <__aeabi_dsub>
 8006a94:	ec53 2b18 	vmov	r2, r3, d8
 8006a98:	f7fa f820 	bl	8000adc <__aeabi_dcmplt>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	f040 80b9 	bne.w	8006c14 <_dtoa_r+0x6fc>
 8006aa2:	9b02      	ldr	r3, [sp, #8]
 8006aa4:	429d      	cmp	r5, r3
 8006aa6:	f43f af75 	beq.w	8006994 <_dtoa_r+0x47c>
 8006aaa:	4b2f      	ldr	r3, [pc, #188]	; (8006b68 <_dtoa_r+0x650>)
 8006aac:	ec51 0b18 	vmov	r0, r1, d8
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f7f9 fda1 	bl	80005f8 <__aeabi_dmul>
 8006ab6:	4b2c      	ldr	r3, [pc, #176]	; (8006b68 <_dtoa_r+0x650>)
 8006ab8:	ec41 0b18 	vmov	d8, r0, r1
 8006abc:	2200      	movs	r2, #0
 8006abe:	4630      	mov	r0, r6
 8006ac0:	4639      	mov	r1, r7
 8006ac2:	f7f9 fd99 	bl	80005f8 <__aeabi_dmul>
 8006ac6:	4606      	mov	r6, r0
 8006ac8:	460f      	mov	r7, r1
 8006aca:	e7c4      	b.n	8006a56 <_dtoa_r+0x53e>
 8006acc:	ec51 0b17 	vmov	r0, r1, d7
 8006ad0:	f7f9 fd92 	bl	80005f8 <__aeabi_dmul>
 8006ad4:	9b02      	ldr	r3, [sp, #8]
 8006ad6:	9d00      	ldr	r5, [sp, #0]
 8006ad8:	930c      	str	r3, [sp, #48]	; 0x30
 8006ada:	ec41 0b18 	vmov	d8, r0, r1
 8006ade:	4639      	mov	r1, r7
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	f7fa f839 	bl	8000b58 <__aeabi_d2iz>
 8006ae6:	9011      	str	r0, [sp, #68]	; 0x44
 8006ae8:	f7f9 fd1c 	bl	8000524 <__aeabi_i2d>
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4630      	mov	r0, r6
 8006af2:	4639      	mov	r1, r7
 8006af4:	f7f9 fbc8 	bl	8000288 <__aeabi_dsub>
 8006af8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006afa:	3330      	adds	r3, #48	; 0x30
 8006afc:	f805 3b01 	strb.w	r3, [r5], #1
 8006b00:	9b02      	ldr	r3, [sp, #8]
 8006b02:	429d      	cmp	r5, r3
 8006b04:	4606      	mov	r6, r0
 8006b06:	460f      	mov	r7, r1
 8006b08:	f04f 0200 	mov.w	r2, #0
 8006b0c:	d134      	bne.n	8006b78 <_dtoa_r+0x660>
 8006b0e:	4b19      	ldr	r3, [pc, #100]	; (8006b74 <_dtoa_r+0x65c>)
 8006b10:	ec51 0b18 	vmov	r0, r1, d8
 8006b14:	f7f9 fbba 	bl	800028c <__adddf3>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	4639      	mov	r1, r7
 8006b20:	f7f9 fffa 	bl	8000b18 <__aeabi_dcmpgt>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d175      	bne.n	8006c14 <_dtoa_r+0x6fc>
 8006b28:	ec53 2b18 	vmov	r2, r3, d8
 8006b2c:	4911      	ldr	r1, [pc, #68]	; (8006b74 <_dtoa_r+0x65c>)
 8006b2e:	2000      	movs	r0, #0
 8006b30:	f7f9 fbaa 	bl	8000288 <__aeabi_dsub>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	4630      	mov	r0, r6
 8006b3a:	4639      	mov	r1, r7
 8006b3c:	f7f9 ffce 	bl	8000adc <__aeabi_dcmplt>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	f43f af27 	beq.w	8006994 <_dtoa_r+0x47c>
 8006b46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b48:	1e6b      	subs	r3, r5, #1
 8006b4a:	930c      	str	r3, [sp, #48]	; 0x30
 8006b4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b50:	2b30      	cmp	r3, #48	; 0x30
 8006b52:	d0f8      	beq.n	8006b46 <_dtoa_r+0x62e>
 8006b54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006b58:	e04a      	b.n	8006bf0 <_dtoa_r+0x6d8>
 8006b5a:	bf00      	nop
 8006b5c:	08008b50 	.word	0x08008b50
 8006b60:	08008b28 	.word	0x08008b28
 8006b64:	3ff00000 	.word	0x3ff00000
 8006b68:	40240000 	.word	0x40240000
 8006b6c:	401c0000 	.word	0x401c0000
 8006b70:	40140000 	.word	0x40140000
 8006b74:	3fe00000 	.word	0x3fe00000
 8006b78:	4baf      	ldr	r3, [pc, #700]	; (8006e38 <_dtoa_r+0x920>)
 8006b7a:	f7f9 fd3d 	bl	80005f8 <__aeabi_dmul>
 8006b7e:	4606      	mov	r6, r0
 8006b80:	460f      	mov	r7, r1
 8006b82:	e7ac      	b.n	8006ade <_dtoa_r+0x5c6>
 8006b84:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b88:	9d00      	ldr	r5, [sp, #0]
 8006b8a:	4642      	mov	r2, r8
 8006b8c:	464b      	mov	r3, r9
 8006b8e:	4630      	mov	r0, r6
 8006b90:	4639      	mov	r1, r7
 8006b92:	f7f9 fe5b 	bl	800084c <__aeabi_ddiv>
 8006b96:	f7f9 ffdf 	bl	8000b58 <__aeabi_d2iz>
 8006b9a:	9002      	str	r0, [sp, #8]
 8006b9c:	f7f9 fcc2 	bl	8000524 <__aeabi_i2d>
 8006ba0:	4642      	mov	r2, r8
 8006ba2:	464b      	mov	r3, r9
 8006ba4:	f7f9 fd28 	bl	80005f8 <__aeabi_dmul>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	4630      	mov	r0, r6
 8006bae:	4639      	mov	r1, r7
 8006bb0:	f7f9 fb6a 	bl	8000288 <__aeabi_dsub>
 8006bb4:	9e02      	ldr	r6, [sp, #8]
 8006bb6:	9f01      	ldr	r7, [sp, #4]
 8006bb8:	3630      	adds	r6, #48	; 0x30
 8006bba:	f805 6b01 	strb.w	r6, [r5], #1
 8006bbe:	9e00      	ldr	r6, [sp, #0]
 8006bc0:	1bae      	subs	r6, r5, r6
 8006bc2:	42b7      	cmp	r7, r6
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	d137      	bne.n	8006c3a <_dtoa_r+0x722>
 8006bca:	f7f9 fb5f 	bl	800028c <__adddf3>
 8006bce:	4642      	mov	r2, r8
 8006bd0:	464b      	mov	r3, r9
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	460f      	mov	r7, r1
 8006bd6:	f7f9 ff9f 	bl	8000b18 <__aeabi_dcmpgt>
 8006bda:	b9c8      	cbnz	r0, 8006c10 <_dtoa_r+0x6f8>
 8006bdc:	4642      	mov	r2, r8
 8006bde:	464b      	mov	r3, r9
 8006be0:	4630      	mov	r0, r6
 8006be2:	4639      	mov	r1, r7
 8006be4:	f7f9 ff70 	bl	8000ac8 <__aeabi_dcmpeq>
 8006be8:	b110      	cbz	r0, 8006bf0 <_dtoa_r+0x6d8>
 8006bea:	9b02      	ldr	r3, [sp, #8]
 8006bec:	07d9      	lsls	r1, r3, #31
 8006bee:	d40f      	bmi.n	8006c10 <_dtoa_r+0x6f8>
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	4659      	mov	r1, fp
 8006bf4:	f000 fac8 	bl	8007188 <_Bfree>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	702b      	strb	r3, [r5, #0]
 8006bfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bfe:	f10a 0001 	add.w	r0, sl, #1
 8006c02:	6018      	str	r0, [r3, #0]
 8006c04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f43f acd8 	beq.w	80065bc <_dtoa_r+0xa4>
 8006c0c:	601d      	str	r5, [r3, #0]
 8006c0e:	e4d5      	b.n	80065bc <_dtoa_r+0xa4>
 8006c10:	f8cd a01c 	str.w	sl, [sp, #28]
 8006c14:	462b      	mov	r3, r5
 8006c16:	461d      	mov	r5, r3
 8006c18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c1c:	2a39      	cmp	r2, #57	; 0x39
 8006c1e:	d108      	bne.n	8006c32 <_dtoa_r+0x71a>
 8006c20:	9a00      	ldr	r2, [sp, #0]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d1f7      	bne.n	8006c16 <_dtoa_r+0x6fe>
 8006c26:	9a07      	ldr	r2, [sp, #28]
 8006c28:	9900      	ldr	r1, [sp, #0]
 8006c2a:	3201      	adds	r2, #1
 8006c2c:	9207      	str	r2, [sp, #28]
 8006c2e:	2230      	movs	r2, #48	; 0x30
 8006c30:	700a      	strb	r2, [r1, #0]
 8006c32:	781a      	ldrb	r2, [r3, #0]
 8006c34:	3201      	adds	r2, #1
 8006c36:	701a      	strb	r2, [r3, #0]
 8006c38:	e78c      	b.n	8006b54 <_dtoa_r+0x63c>
 8006c3a:	4b7f      	ldr	r3, [pc, #508]	; (8006e38 <_dtoa_r+0x920>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f7f9 fcdb 	bl	80005f8 <__aeabi_dmul>
 8006c42:	2200      	movs	r2, #0
 8006c44:	2300      	movs	r3, #0
 8006c46:	4606      	mov	r6, r0
 8006c48:	460f      	mov	r7, r1
 8006c4a:	f7f9 ff3d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	d09b      	beq.n	8006b8a <_dtoa_r+0x672>
 8006c52:	e7cd      	b.n	8006bf0 <_dtoa_r+0x6d8>
 8006c54:	9a08      	ldr	r2, [sp, #32]
 8006c56:	2a00      	cmp	r2, #0
 8006c58:	f000 80c4 	beq.w	8006de4 <_dtoa_r+0x8cc>
 8006c5c:	9a05      	ldr	r2, [sp, #20]
 8006c5e:	2a01      	cmp	r2, #1
 8006c60:	f300 80a8 	bgt.w	8006db4 <_dtoa_r+0x89c>
 8006c64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c66:	2a00      	cmp	r2, #0
 8006c68:	f000 80a0 	beq.w	8006dac <_dtoa_r+0x894>
 8006c6c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006c70:	9e06      	ldr	r6, [sp, #24]
 8006c72:	4645      	mov	r5, r8
 8006c74:	9a04      	ldr	r2, [sp, #16]
 8006c76:	2101      	movs	r1, #1
 8006c78:	441a      	add	r2, r3
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	4498      	add	r8, r3
 8006c7e:	9204      	str	r2, [sp, #16]
 8006c80:	f000 fb3e 	bl	8007300 <__i2b>
 8006c84:	4607      	mov	r7, r0
 8006c86:	2d00      	cmp	r5, #0
 8006c88:	dd0b      	ble.n	8006ca2 <_dtoa_r+0x78a>
 8006c8a:	9b04      	ldr	r3, [sp, #16]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	dd08      	ble.n	8006ca2 <_dtoa_r+0x78a>
 8006c90:	42ab      	cmp	r3, r5
 8006c92:	9a04      	ldr	r2, [sp, #16]
 8006c94:	bfa8      	it	ge
 8006c96:	462b      	movge	r3, r5
 8006c98:	eba8 0803 	sub.w	r8, r8, r3
 8006c9c:	1aed      	subs	r5, r5, r3
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	9304      	str	r3, [sp, #16]
 8006ca2:	9b06      	ldr	r3, [sp, #24]
 8006ca4:	b1fb      	cbz	r3, 8006ce6 <_dtoa_r+0x7ce>
 8006ca6:	9b08      	ldr	r3, [sp, #32]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 809f 	beq.w	8006dec <_dtoa_r+0x8d4>
 8006cae:	2e00      	cmp	r6, #0
 8006cb0:	dd11      	ble.n	8006cd6 <_dtoa_r+0x7be>
 8006cb2:	4639      	mov	r1, r7
 8006cb4:	4632      	mov	r2, r6
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f000 fbde 	bl	8007478 <__pow5mult>
 8006cbc:	465a      	mov	r2, fp
 8006cbe:	4601      	mov	r1, r0
 8006cc0:	4607      	mov	r7, r0
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f000 fb32 	bl	800732c <__multiply>
 8006cc8:	4659      	mov	r1, fp
 8006cca:	9007      	str	r0, [sp, #28]
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f000 fa5b 	bl	8007188 <_Bfree>
 8006cd2:	9b07      	ldr	r3, [sp, #28]
 8006cd4:	469b      	mov	fp, r3
 8006cd6:	9b06      	ldr	r3, [sp, #24]
 8006cd8:	1b9a      	subs	r2, r3, r6
 8006cda:	d004      	beq.n	8006ce6 <_dtoa_r+0x7ce>
 8006cdc:	4659      	mov	r1, fp
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f000 fbca 	bl	8007478 <__pow5mult>
 8006ce4:	4683      	mov	fp, r0
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f000 fb09 	bl	8007300 <__i2b>
 8006cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	4606      	mov	r6, r0
 8006cf4:	dd7c      	ble.n	8006df0 <_dtoa_r+0x8d8>
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	4601      	mov	r1, r0
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f000 fbbc 	bl	8007478 <__pow5mult>
 8006d00:	9b05      	ldr	r3, [sp, #20]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	4606      	mov	r6, r0
 8006d06:	dd76      	ble.n	8006df6 <_dtoa_r+0x8de>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	9306      	str	r3, [sp, #24]
 8006d0c:	6933      	ldr	r3, [r6, #16]
 8006d0e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006d12:	6918      	ldr	r0, [r3, #16]
 8006d14:	f000 faa4 	bl	8007260 <__hi0bits>
 8006d18:	f1c0 0020 	rsb	r0, r0, #32
 8006d1c:	9b04      	ldr	r3, [sp, #16]
 8006d1e:	4418      	add	r0, r3
 8006d20:	f010 001f 	ands.w	r0, r0, #31
 8006d24:	f000 8086 	beq.w	8006e34 <_dtoa_r+0x91c>
 8006d28:	f1c0 0320 	rsb	r3, r0, #32
 8006d2c:	2b04      	cmp	r3, #4
 8006d2e:	dd7f      	ble.n	8006e30 <_dtoa_r+0x918>
 8006d30:	f1c0 001c 	rsb	r0, r0, #28
 8006d34:	9b04      	ldr	r3, [sp, #16]
 8006d36:	4403      	add	r3, r0
 8006d38:	4480      	add	r8, r0
 8006d3a:	4405      	add	r5, r0
 8006d3c:	9304      	str	r3, [sp, #16]
 8006d3e:	f1b8 0f00 	cmp.w	r8, #0
 8006d42:	dd05      	ble.n	8006d50 <_dtoa_r+0x838>
 8006d44:	4659      	mov	r1, fp
 8006d46:	4642      	mov	r2, r8
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f000 fbef 	bl	800752c <__lshift>
 8006d4e:	4683      	mov	fp, r0
 8006d50:	9b04      	ldr	r3, [sp, #16]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	dd05      	ble.n	8006d62 <_dtoa_r+0x84a>
 8006d56:	4631      	mov	r1, r6
 8006d58:	461a      	mov	r2, r3
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f000 fbe6 	bl	800752c <__lshift>
 8006d60:	4606      	mov	r6, r0
 8006d62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d069      	beq.n	8006e3c <_dtoa_r+0x924>
 8006d68:	4631      	mov	r1, r6
 8006d6a:	4658      	mov	r0, fp
 8006d6c:	f000 fc4a 	bl	8007604 <__mcmp>
 8006d70:	2800      	cmp	r0, #0
 8006d72:	da63      	bge.n	8006e3c <_dtoa_r+0x924>
 8006d74:	2300      	movs	r3, #0
 8006d76:	4659      	mov	r1, fp
 8006d78:	220a      	movs	r2, #10
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	f000 fa26 	bl	80071cc <__multadd>
 8006d80:	9b08      	ldr	r3, [sp, #32]
 8006d82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d86:	4683      	mov	fp, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 818f 	beq.w	80070ac <_dtoa_r+0xb94>
 8006d8e:	4639      	mov	r1, r7
 8006d90:	2300      	movs	r3, #0
 8006d92:	220a      	movs	r2, #10
 8006d94:	4620      	mov	r0, r4
 8006d96:	f000 fa19 	bl	80071cc <__multadd>
 8006d9a:	f1b9 0f00 	cmp.w	r9, #0
 8006d9e:	4607      	mov	r7, r0
 8006da0:	f300 808e 	bgt.w	8006ec0 <_dtoa_r+0x9a8>
 8006da4:	9b05      	ldr	r3, [sp, #20]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	dc50      	bgt.n	8006e4c <_dtoa_r+0x934>
 8006daa:	e089      	b.n	8006ec0 <_dtoa_r+0x9a8>
 8006dac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006db2:	e75d      	b.n	8006c70 <_dtoa_r+0x758>
 8006db4:	9b01      	ldr	r3, [sp, #4]
 8006db6:	1e5e      	subs	r6, r3, #1
 8006db8:	9b06      	ldr	r3, [sp, #24]
 8006dba:	42b3      	cmp	r3, r6
 8006dbc:	bfbf      	itttt	lt
 8006dbe:	9b06      	ldrlt	r3, [sp, #24]
 8006dc0:	9606      	strlt	r6, [sp, #24]
 8006dc2:	1af2      	sublt	r2, r6, r3
 8006dc4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006dc6:	bfb6      	itet	lt
 8006dc8:	189b      	addlt	r3, r3, r2
 8006dca:	1b9e      	subge	r6, r3, r6
 8006dcc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006dce:	9b01      	ldr	r3, [sp, #4]
 8006dd0:	bfb8      	it	lt
 8006dd2:	2600      	movlt	r6, #0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	bfb5      	itete	lt
 8006dd8:	eba8 0503 	sublt.w	r5, r8, r3
 8006ddc:	9b01      	ldrge	r3, [sp, #4]
 8006dde:	2300      	movlt	r3, #0
 8006de0:	4645      	movge	r5, r8
 8006de2:	e747      	b.n	8006c74 <_dtoa_r+0x75c>
 8006de4:	9e06      	ldr	r6, [sp, #24]
 8006de6:	9f08      	ldr	r7, [sp, #32]
 8006de8:	4645      	mov	r5, r8
 8006dea:	e74c      	b.n	8006c86 <_dtoa_r+0x76e>
 8006dec:	9a06      	ldr	r2, [sp, #24]
 8006dee:	e775      	b.n	8006cdc <_dtoa_r+0x7c4>
 8006df0:	9b05      	ldr	r3, [sp, #20]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	dc18      	bgt.n	8006e28 <_dtoa_r+0x910>
 8006df6:	9b02      	ldr	r3, [sp, #8]
 8006df8:	b9b3      	cbnz	r3, 8006e28 <_dtoa_r+0x910>
 8006dfa:	9b03      	ldr	r3, [sp, #12]
 8006dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e00:	b9a3      	cbnz	r3, 8006e2c <_dtoa_r+0x914>
 8006e02:	9b03      	ldr	r3, [sp, #12]
 8006e04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e08:	0d1b      	lsrs	r3, r3, #20
 8006e0a:	051b      	lsls	r3, r3, #20
 8006e0c:	b12b      	cbz	r3, 8006e1a <_dtoa_r+0x902>
 8006e0e:	9b04      	ldr	r3, [sp, #16]
 8006e10:	3301      	adds	r3, #1
 8006e12:	9304      	str	r3, [sp, #16]
 8006e14:	f108 0801 	add.w	r8, r8, #1
 8006e18:	2301      	movs	r3, #1
 8006e1a:	9306      	str	r3, [sp, #24]
 8006e1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f47f af74 	bne.w	8006d0c <_dtoa_r+0x7f4>
 8006e24:	2001      	movs	r0, #1
 8006e26:	e779      	b.n	8006d1c <_dtoa_r+0x804>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	e7f6      	b.n	8006e1a <_dtoa_r+0x902>
 8006e2c:	9b02      	ldr	r3, [sp, #8]
 8006e2e:	e7f4      	b.n	8006e1a <_dtoa_r+0x902>
 8006e30:	d085      	beq.n	8006d3e <_dtoa_r+0x826>
 8006e32:	4618      	mov	r0, r3
 8006e34:	301c      	adds	r0, #28
 8006e36:	e77d      	b.n	8006d34 <_dtoa_r+0x81c>
 8006e38:	40240000 	.word	0x40240000
 8006e3c:	9b01      	ldr	r3, [sp, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	dc38      	bgt.n	8006eb4 <_dtoa_r+0x99c>
 8006e42:	9b05      	ldr	r3, [sp, #20]
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	dd35      	ble.n	8006eb4 <_dtoa_r+0x99c>
 8006e48:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006e4c:	f1b9 0f00 	cmp.w	r9, #0
 8006e50:	d10d      	bne.n	8006e6e <_dtoa_r+0x956>
 8006e52:	4631      	mov	r1, r6
 8006e54:	464b      	mov	r3, r9
 8006e56:	2205      	movs	r2, #5
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f000 f9b7 	bl	80071cc <__multadd>
 8006e5e:	4601      	mov	r1, r0
 8006e60:	4606      	mov	r6, r0
 8006e62:	4658      	mov	r0, fp
 8006e64:	f000 fbce 	bl	8007604 <__mcmp>
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	f73f adbd 	bgt.w	80069e8 <_dtoa_r+0x4d0>
 8006e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e70:	9d00      	ldr	r5, [sp, #0]
 8006e72:	ea6f 0a03 	mvn.w	sl, r3
 8006e76:	f04f 0800 	mov.w	r8, #0
 8006e7a:	4631      	mov	r1, r6
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	f000 f983 	bl	8007188 <_Bfree>
 8006e82:	2f00      	cmp	r7, #0
 8006e84:	f43f aeb4 	beq.w	8006bf0 <_dtoa_r+0x6d8>
 8006e88:	f1b8 0f00 	cmp.w	r8, #0
 8006e8c:	d005      	beq.n	8006e9a <_dtoa_r+0x982>
 8006e8e:	45b8      	cmp	r8, r7
 8006e90:	d003      	beq.n	8006e9a <_dtoa_r+0x982>
 8006e92:	4641      	mov	r1, r8
 8006e94:	4620      	mov	r0, r4
 8006e96:	f000 f977 	bl	8007188 <_Bfree>
 8006e9a:	4639      	mov	r1, r7
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f000 f973 	bl	8007188 <_Bfree>
 8006ea2:	e6a5      	b.n	8006bf0 <_dtoa_r+0x6d8>
 8006ea4:	2600      	movs	r6, #0
 8006ea6:	4637      	mov	r7, r6
 8006ea8:	e7e1      	b.n	8006e6e <_dtoa_r+0x956>
 8006eaa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006eac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006eb0:	4637      	mov	r7, r6
 8006eb2:	e599      	b.n	80069e8 <_dtoa_r+0x4d0>
 8006eb4:	9b08      	ldr	r3, [sp, #32]
 8006eb6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f000 80fd 	beq.w	80070ba <_dtoa_r+0xba2>
 8006ec0:	2d00      	cmp	r5, #0
 8006ec2:	dd05      	ble.n	8006ed0 <_dtoa_r+0x9b8>
 8006ec4:	4639      	mov	r1, r7
 8006ec6:	462a      	mov	r2, r5
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f000 fb2f 	bl	800752c <__lshift>
 8006ece:	4607      	mov	r7, r0
 8006ed0:	9b06      	ldr	r3, [sp, #24]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d05c      	beq.n	8006f90 <_dtoa_r+0xa78>
 8006ed6:	6879      	ldr	r1, [r7, #4]
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f000 f915 	bl	8007108 <_Balloc>
 8006ede:	4605      	mov	r5, r0
 8006ee0:	b928      	cbnz	r0, 8006eee <_dtoa_r+0x9d6>
 8006ee2:	4b80      	ldr	r3, [pc, #512]	; (80070e4 <_dtoa_r+0xbcc>)
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006eea:	f7ff bb2e 	b.w	800654a <_dtoa_r+0x32>
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	3202      	adds	r2, #2
 8006ef2:	0092      	lsls	r2, r2, #2
 8006ef4:	f107 010c 	add.w	r1, r7, #12
 8006ef8:	300c      	adds	r0, #12
 8006efa:	f7fe fdbd 	bl	8005a78 <memcpy>
 8006efe:	2201      	movs	r2, #1
 8006f00:	4629      	mov	r1, r5
 8006f02:	4620      	mov	r0, r4
 8006f04:	f000 fb12 	bl	800752c <__lshift>
 8006f08:	9b00      	ldr	r3, [sp, #0]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	9301      	str	r3, [sp, #4]
 8006f0e:	9b00      	ldr	r3, [sp, #0]
 8006f10:	444b      	add	r3, r9
 8006f12:	9307      	str	r3, [sp, #28]
 8006f14:	9b02      	ldr	r3, [sp, #8]
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	46b8      	mov	r8, r7
 8006f1c:	9306      	str	r3, [sp, #24]
 8006f1e:	4607      	mov	r7, r0
 8006f20:	9b01      	ldr	r3, [sp, #4]
 8006f22:	4631      	mov	r1, r6
 8006f24:	3b01      	subs	r3, #1
 8006f26:	4658      	mov	r0, fp
 8006f28:	9302      	str	r3, [sp, #8]
 8006f2a:	f7ff fa69 	bl	8006400 <quorem>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	3330      	adds	r3, #48	; 0x30
 8006f32:	9004      	str	r0, [sp, #16]
 8006f34:	4641      	mov	r1, r8
 8006f36:	4658      	mov	r0, fp
 8006f38:	9308      	str	r3, [sp, #32]
 8006f3a:	f000 fb63 	bl	8007604 <__mcmp>
 8006f3e:	463a      	mov	r2, r7
 8006f40:	4681      	mov	r9, r0
 8006f42:	4631      	mov	r1, r6
 8006f44:	4620      	mov	r0, r4
 8006f46:	f000 fb79 	bl	800763c <__mdiff>
 8006f4a:	68c2      	ldr	r2, [r0, #12]
 8006f4c:	9b08      	ldr	r3, [sp, #32]
 8006f4e:	4605      	mov	r5, r0
 8006f50:	bb02      	cbnz	r2, 8006f94 <_dtoa_r+0xa7c>
 8006f52:	4601      	mov	r1, r0
 8006f54:	4658      	mov	r0, fp
 8006f56:	f000 fb55 	bl	8007604 <__mcmp>
 8006f5a:	9b08      	ldr	r3, [sp, #32]
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	4629      	mov	r1, r5
 8006f60:	4620      	mov	r0, r4
 8006f62:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006f66:	f000 f90f 	bl	8007188 <_Bfree>
 8006f6a:	9b05      	ldr	r3, [sp, #20]
 8006f6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f6e:	9d01      	ldr	r5, [sp, #4]
 8006f70:	ea43 0102 	orr.w	r1, r3, r2
 8006f74:	9b06      	ldr	r3, [sp, #24]
 8006f76:	430b      	orrs	r3, r1
 8006f78:	9b08      	ldr	r3, [sp, #32]
 8006f7a:	d10d      	bne.n	8006f98 <_dtoa_r+0xa80>
 8006f7c:	2b39      	cmp	r3, #57	; 0x39
 8006f7e:	d029      	beq.n	8006fd4 <_dtoa_r+0xabc>
 8006f80:	f1b9 0f00 	cmp.w	r9, #0
 8006f84:	dd01      	ble.n	8006f8a <_dtoa_r+0xa72>
 8006f86:	9b04      	ldr	r3, [sp, #16]
 8006f88:	3331      	adds	r3, #49	; 0x31
 8006f8a:	9a02      	ldr	r2, [sp, #8]
 8006f8c:	7013      	strb	r3, [r2, #0]
 8006f8e:	e774      	b.n	8006e7a <_dtoa_r+0x962>
 8006f90:	4638      	mov	r0, r7
 8006f92:	e7b9      	b.n	8006f08 <_dtoa_r+0x9f0>
 8006f94:	2201      	movs	r2, #1
 8006f96:	e7e2      	b.n	8006f5e <_dtoa_r+0xa46>
 8006f98:	f1b9 0f00 	cmp.w	r9, #0
 8006f9c:	db06      	blt.n	8006fac <_dtoa_r+0xa94>
 8006f9e:	9905      	ldr	r1, [sp, #20]
 8006fa0:	ea41 0909 	orr.w	r9, r1, r9
 8006fa4:	9906      	ldr	r1, [sp, #24]
 8006fa6:	ea59 0101 	orrs.w	r1, r9, r1
 8006faa:	d120      	bne.n	8006fee <_dtoa_r+0xad6>
 8006fac:	2a00      	cmp	r2, #0
 8006fae:	ddec      	ble.n	8006f8a <_dtoa_r+0xa72>
 8006fb0:	4659      	mov	r1, fp
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	9301      	str	r3, [sp, #4]
 8006fb8:	f000 fab8 	bl	800752c <__lshift>
 8006fbc:	4631      	mov	r1, r6
 8006fbe:	4683      	mov	fp, r0
 8006fc0:	f000 fb20 	bl	8007604 <__mcmp>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	9b01      	ldr	r3, [sp, #4]
 8006fc8:	dc02      	bgt.n	8006fd0 <_dtoa_r+0xab8>
 8006fca:	d1de      	bne.n	8006f8a <_dtoa_r+0xa72>
 8006fcc:	07da      	lsls	r2, r3, #31
 8006fce:	d5dc      	bpl.n	8006f8a <_dtoa_r+0xa72>
 8006fd0:	2b39      	cmp	r3, #57	; 0x39
 8006fd2:	d1d8      	bne.n	8006f86 <_dtoa_r+0xa6e>
 8006fd4:	9a02      	ldr	r2, [sp, #8]
 8006fd6:	2339      	movs	r3, #57	; 0x39
 8006fd8:	7013      	strb	r3, [r2, #0]
 8006fda:	462b      	mov	r3, r5
 8006fdc:	461d      	mov	r5, r3
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006fe4:	2a39      	cmp	r2, #57	; 0x39
 8006fe6:	d050      	beq.n	800708a <_dtoa_r+0xb72>
 8006fe8:	3201      	adds	r2, #1
 8006fea:	701a      	strb	r2, [r3, #0]
 8006fec:	e745      	b.n	8006e7a <_dtoa_r+0x962>
 8006fee:	2a00      	cmp	r2, #0
 8006ff0:	dd03      	ble.n	8006ffa <_dtoa_r+0xae2>
 8006ff2:	2b39      	cmp	r3, #57	; 0x39
 8006ff4:	d0ee      	beq.n	8006fd4 <_dtoa_r+0xabc>
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	e7c7      	b.n	8006f8a <_dtoa_r+0xa72>
 8006ffa:	9a01      	ldr	r2, [sp, #4]
 8006ffc:	9907      	ldr	r1, [sp, #28]
 8006ffe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007002:	428a      	cmp	r2, r1
 8007004:	d02a      	beq.n	800705c <_dtoa_r+0xb44>
 8007006:	4659      	mov	r1, fp
 8007008:	2300      	movs	r3, #0
 800700a:	220a      	movs	r2, #10
 800700c:	4620      	mov	r0, r4
 800700e:	f000 f8dd 	bl	80071cc <__multadd>
 8007012:	45b8      	cmp	r8, r7
 8007014:	4683      	mov	fp, r0
 8007016:	f04f 0300 	mov.w	r3, #0
 800701a:	f04f 020a 	mov.w	r2, #10
 800701e:	4641      	mov	r1, r8
 8007020:	4620      	mov	r0, r4
 8007022:	d107      	bne.n	8007034 <_dtoa_r+0xb1c>
 8007024:	f000 f8d2 	bl	80071cc <__multadd>
 8007028:	4680      	mov	r8, r0
 800702a:	4607      	mov	r7, r0
 800702c:	9b01      	ldr	r3, [sp, #4]
 800702e:	3301      	adds	r3, #1
 8007030:	9301      	str	r3, [sp, #4]
 8007032:	e775      	b.n	8006f20 <_dtoa_r+0xa08>
 8007034:	f000 f8ca 	bl	80071cc <__multadd>
 8007038:	4639      	mov	r1, r7
 800703a:	4680      	mov	r8, r0
 800703c:	2300      	movs	r3, #0
 800703e:	220a      	movs	r2, #10
 8007040:	4620      	mov	r0, r4
 8007042:	f000 f8c3 	bl	80071cc <__multadd>
 8007046:	4607      	mov	r7, r0
 8007048:	e7f0      	b.n	800702c <_dtoa_r+0xb14>
 800704a:	f1b9 0f00 	cmp.w	r9, #0
 800704e:	9a00      	ldr	r2, [sp, #0]
 8007050:	bfcc      	ite	gt
 8007052:	464d      	movgt	r5, r9
 8007054:	2501      	movle	r5, #1
 8007056:	4415      	add	r5, r2
 8007058:	f04f 0800 	mov.w	r8, #0
 800705c:	4659      	mov	r1, fp
 800705e:	2201      	movs	r2, #1
 8007060:	4620      	mov	r0, r4
 8007062:	9301      	str	r3, [sp, #4]
 8007064:	f000 fa62 	bl	800752c <__lshift>
 8007068:	4631      	mov	r1, r6
 800706a:	4683      	mov	fp, r0
 800706c:	f000 faca 	bl	8007604 <__mcmp>
 8007070:	2800      	cmp	r0, #0
 8007072:	dcb2      	bgt.n	8006fda <_dtoa_r+0xac2>
 8007074:	d102      	bne.n	800707c <_dtoa_r+0xb64>
 8007076:	9b01      	ldr	r3, [sp, #4]
 8007078:	07db      	lsls	r3, r3, #31
 800707a:	d4ae      	bmi.n	8006fda <_dtoa_r+0xac2>
 800707c:	462b      	mov	r3, r5
 800707e:	461d      	mov	r5, r3
 8007080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007084:	2a30      	cmp	r2, #48	; 0x30
 8007086:	d0fa      	beq.n	800707e <_dtoa_r+0xb66>
 8007088:	e6f7      	b.n	8006e7a <_dtoa_r+0x962>
 800708a:	9a00      	ldr	r2, [sp, #0]
 800708c:	429a      	cmp	r2, r3
 800708e:	d1a5      	bne.n	8006fdc <_dtoa_r+0xac4>
 8007090:	f10a 0a01 	add.w	sl, sl, #1
 8007094:	2331      	movs	r3, #49	; 0x31
 8007096:	e779      	b.n	8006f8c <_dtoa_r+0xa74>
 8007098:	4b13      	ldr	r3, [pc, #76]	; (80070e8 <_dtoa_r+0xbd0>)
 800709a:	f7ff baaf 	b.w	80065fc <_dtoa_r+0xe4>
 800709e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f47f aa86 	bne.w	80065b2 <_dtoa_r+0x9a>
 80070a6:	4b11      	ldr	r3, [pc, #68]	; (80070ec <_dtoa_r+0xbd4>)
 80070a8:	f7ff baa8 	b.w	80065fc <_dtoa_r+0xe4>
 80070ac:	f1b9 0f00 	cmp.w	r9, #0
 80070b0:	dc03      	bgt.n	80070ba <_dtoa_r+0xba2>
 80070b2:	9b05      	ldr	r3, [sp, #20]
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	f73f aec9 	bgt.w	8006e4c <_dtoa_r+0x934>
 80070ba:	9d00      	ldr	r5, [sp, #0]
 80070bc:	4631      	mov	r1, r6
 80070be:	4658      	mov	r0, fp
 80070c0:	f7ff f99e 	bl	8006400 <quorem>
 80070c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80070c8:	f805 3b01 	strb.w	r3, [r5], #1
 80070cc:	9a00      	ldr	r2, [sp, #0]
 80070ce:	1aaa      	subs	r2, r5, r2
 80070d0:	4591      	cmp	r9, r2
 80070d2:	ddba      	ble.n	800704a <_dtoa_r+0xb32>
 80070d4:	4659      	mov	r1, fp
 80070d6:	2300      	movs	r3, #0
 80070d8:	220a      	movs	r2, #10
 80070da:	4620      	mov	r0, r4
 80070dc:	f000 f876 	bl	80071cc <__multadd>
 80070e0:	4683      	mov	fp, r0
 80070e2:	e7eb      	b.n	80070bc <_dtoa_r+0xba4>
 80070e4:	08008ab3 	.word	0x08008ab3
 80070e8:	08008a0c 	.word	0x08008a0c
 80070ec:	08008a30 	.word	0x08008a30

080070f0 <_localeconv_r>:
 80070f0:	4800      	ldr	r0, [pc, #0]	; (80070f4 <_localeconv_r+0x4>)
 80070f2:	4770      	bx	lr
 80070f4:	20000174 	.word	0x20000174

080070f8 <malloc>:
 80070f8:	4b02      	ldr	r3, [pc, #8]	; (8007104 <malloc+0xc>)
 80070fa:	4601      	mov	r1, r0
 80070fc:	6818      	ldr	r0, [r3, #0]
 80070fe:	f000 bbe1 	b.w	80078c4 <_malloc_r>
 8007102:	bf00      	nop
 8007104:	20000020 	.word	0x20000020

08007108 <_Balloc>:
 8007108:	b570      	push	{r4, r5, r6, lr}
 800710a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800710c:	4604      	mov	r4, r0
 800710e:	460d      	mov	r5, r1
 8007110:	b976      	cbnz	r6, 8007130 <_Balloc+0x28>
 8007112:	2010      	movs	r0, #16
 8007114:	f7ff fff0 	bl	80070f8 <malloc>
 8007118:	4602      	mov	r2, r0
 800711a:	6260      	str	r0, [r4, #36]	; 0x24
 800711c:	b920      	cbnz	r0, 8007128 <_Balloc+0x20>
 800711e:	4b18      	ldr	r3, [pc, #96]	; (8007180 <_Balloc+0x78>)
 8007120:	4818      	ldr	r0, [pc, #96]	; (8007184 <_Balloc+0x7c>)
 8007122:	2166      	movs	r1, #102	; 0x66
 8007124:	f000 fd94 	bl	8007c50 <__assert_func>
 8007128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800712c:	6006      	str	r6, [r0, #0]
 800712e:	60c6      	str	r6, [r0, #12]
 8007130:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007132:	68f3      	ldr	r3, [r6, #12]
 8007134:	b183      	cbz	r3, 8007158 <_Balloc+0x50>
 8007136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800713e:	b9b8      	cbnz	r0, 8007170 <_Balloc+0x68>
 8007140:	2101      	movs	r1, #1
 8007142:	fa01 f605 	lsl.w	r6, r1, r5
 8007146:	1d72      	adds	r2, r6, #5
 8007148:	0092      	lsls	r2, r2, #2
 800714a:	4620      	mov	r0, r4
 800714c:	f000 fb5a 	bl	8007804 <_calloc_r>
 8007150:	b160      	cbz	r0, 800716c <_Balloc+0x64>
 8007152:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007156:	e00e      	b.n	8007176 <_Balloc+0x6e>
 8007158:	2221      	movs	r2, #33	; 0x21
 800715a:	2104      	movs	r1, #4
 800715c:	4620      	mov	r0, r4
 800715e:	f000 fb51 	bl	8007804 <_calloc_r>
 8007162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007164:	60f0      	str	r0, [r6, #12]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1e4      	bne.n	8007136 <_Balloc+0x2e>
 800716c:	2000      	movs	r0, #0
 800716e:	bd70      	pop	{r4, r5, r6, pc}
 8007170:	6802      	ldr	r2, [r0, #0]
 8007172:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007176:	2300      	movs	r3, #0
 8007178:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800717c:	e7f7      	b.n	800716e <_Balloc+0x66>
 800717e:	bf00      	nop
 8007180:	08008a3d 	.word	0x08008a3d
 8007184:	08008ac4 	.word	0x08008ac4

08007188 <_Bfree>:
 8007188:	b570      	push	{r4, r5, r6, lr}
 800718a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800718c:	4605      	mov	r5, r0
 800718e:	460c      	mov	r4, r1
 8007190:	b976      	cbnz	r6, 80071b0 <_Bfree+0x28>
 8007192:	2010      	movs	r0, #16
 8007194:	f7ff ffb0 	bl	80070f8 <malloc>
 8007198:	4602      	mov	r2, r0
 800719a:	6268      	str	r0, [r5, #36]	; 0x24
 800719c:	b920      	cbnz	r0, 80071a8 <_Bfree+0x20>
 800719e:	4b09      	ldr	r3, [pc, #36]	; (80071c4 <_Bfree+0x3c>)
 80071a0:	4809      	ldr	r0, [pc, #36]	; (80071c8 <_Bfree+0x40>)
 80071a2:	218a      	movs	r1, #138	; 0x8a
 80071a4:	f000 fd54 	bl	8007c50 <__assert_func>
 80071a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071ac:	6006      	str	r6, [r0, #0]
 80071ae:	60c6      	str	r6, [r0, #12]
 80071b0:	b13c      	cbz	r4, 80071c2 <_Bfree+0x3a>
 80071b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80071b4:	6862      	ldr	r2, [r4, #4]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071bc:	6021      	str	r1, [r4, #0]
 80071be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071c2:	bd70      	pop	{r4, r5, r6, pc}
 80071c4:	08008a3d 	.word	0x08008a3d
 80071c8:	08008ac4 	.word	0x08008ac4

080071cc <__multadd>:
 80071cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071d0:	690e      	ldr	r6, [r1, #16]
 80071d2:	4607      	mov	r7, r0
 80071d4:	4698      	mov	r8, r3
 80071d6:	460c      	mov	r4, r1
 80071d8:	f101 0014 	add.w	r0, r1, #20
 80071dc:	2300      	movs	r3, #0
 80071de:	6805      	ldr	r5, [r0, #0]
 80071e0:	b2a9      	uxth	r1, r5
 80071e2:	fb02 8101 	mla	r1, r2, r1, r8
 80071e6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80071ea:	0c2d      	lsrs	r5, r5, #16
 80071ec:	fb02 c505 	mla	r5, r2, r5, ip
 80071f0:	b289      	uxth	r1, r1
 80071f2:	3301      	adds	r3, #1
 80071f4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80071f8:	429e      	cmp	r6, r3
 80071fa:	f840 1b04 	str.w	r1, [r0], #4
 80071fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007202:	dcec      	bgt.n	80071de <__multadd+0x12>
 8007204:	f1b8 0f00 	cmp.w	r8, #0
 8007208:	d022      	beq.n	8007250 <__multadd+0x84>
 800720a:	68a3      	ldr	r3, [r4, #8]
 800720c:	42b3      	cmp	r3, r6
 800720e:	dc19      	bgt.n	8007244 <__multadd+0x78>
 8007210:	6861      	ldr	r1, [r4, #4]
 8007212:	4638      	mov	r0, r7
 8007214:	3101      	adds	r1, #1
 8007216:	f7ff ff77 	bl	8007108 <_Balloc>
 800721a:	4605      	mov	r5, r0
 800721c:	b928      	cbnz	r0, 800722a <__multadd+0x5e>
 800721e:	4602      	mov	r2, r0
 8007220:	4b0d      	ldr	r3, [pc, #52]	; (8007258 <__multadd+0x8c>)
 8007222:	480e      	ldr	r0, [pc, #56]	; (800725c <__multadd+0x90>)
 8007224:	21b5      	movs	r1, #181	; 0xb5
 8007226:	f000 fd13 	bl	8007c50 <__assert_func>
 800722a:	6922      	ldr	r2, [r4, #16]
 800722c:	3202      	adds	r2, #2
 800722e:	f104 010c 	add.w	r1, r4, #12
 8007232:	0092      	lsls	r2, r2, #2
 8007234:	300c      	adds	r0, #12
 8007236:	f7fe fc1f 	bl	8005a78 <memcpy>
 800723a:	4621      	mov	r1, r4
 800723c:	4638      	mov	r0, r7
 800723e:	f7ff ffa3 	bl	8007188 <_Bfree>
 8007242:	462c      	mov	r4, r5
 8007244:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007248:	3601      	adds	r6, #1
 800724a:	f8c3 8014 	str.w	r8, [r3, #20]
 800724e:	6126      	str	r6, [r4, #16]
 8007250:	4620      	mov	r0, r4
 8007252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007256:	bf00      	nop
 8007258:	08008ab3 	.word	0x08008ab3
 800725c:	08008ac4 	.word	0x08008ac4

08007260 <__hi0bits>:
 8007260:	0c03      	lsrs	r3, r0, #16
 8007262:	041b      	lsls	r3, r3, #16
 8007264:	b9d3      	cbnz	r3, 800729c <__hi0bits+0x3c>
 8007266:	0400      	lsls	r0, r0, #16
 8007268:	2310      	movs	r3, #16
 800726a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800726e:	bf04      	itt	eq
 8007270:	0200      	lsleq	r0, r0, #8
 8007272:	3308      	addeq	r3, #8
 8007274:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007278:	bf04      	itt	eq
 800727a:	0100      	lsleq	r0, r0, #4
 800727c:	3304      	addeq	r3, #4
 800727e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007282:	bf04      	itt	eq
 8007284:	0080      	lsleq	r0, r0, #2
 8007286:	3302      	addeq	r3, #2
 8007288:	2800      	cmp	r0, #0
 800728a:	db05      	blt.n	8007298 <__hi0bits+0x38>
 800728c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007290:	f103 0301 	add.w	r3, r3, #1
 8007294:	bf08      	it	eq
 8007296:	2320      	moveq	r3, #32
 8007298:	4618      	mov	r0, r3
 800729a:	4770      	bx	lr
 800729c:	2300      	movs	r3, #0
 800729e:	e7e4      	b.n	800726a <__hi0bits+0xa>

080072a0 <__lo0bits>:
 80072a0:	6803      	ldr	r3, [r0, #0]
 80072a2:	f013 0207 	ands.w	r2, r3, #7
 80072a6:	4601      	mov	r1, r0
 80072a8:	d00b      	beq.n	80072c2 <__lo0bits+0x22>
 80072aa:	07da      	lsls	r2, r3, #31
 80072ac:	d424      	bmi.n	80072f8 <__lo0bits+0x58>
 80072ae:	0798      	lsls	r0, r3, #30
 80072b0:	bf49      	itett	mi
 80072b2:	085b      	lsrmi	r3, r3, #1
 80072b4:	089b      	lsrpl	r3, r3, #2
 80072b6:	2001      	movmi	r0, #1
 80072b8:	600b      	strmi	r3, [r1, #0]
 80072ba:	bf5c      	itt	pl
 80072bc:	600b      	strpl	r3, [r1, #0]
 80072be:	2002      	movpl	r0, #2
 80072c0:	4770      	bx	lr
 80072c2:	b298      	uxth	r0, r3
 80072c4:	b9b0      	cbnz	r0, 80072f4 <__lo0bits+0x54>
 80072c6:	0c1b      	lsrs	r3, r3, #16
 80072c8:	2010      	movs	r0, #16
 80072ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 80072ce:	bf04      	itt	eq
 80072d0:	0a1b      	lsreq	r3, r3, #8
 80072d2:	3008      	addeq	r0, #8
 80072d4:	071a      	lsls	r2, r3, #28
 80072d6:	bf04      	itt	eq
 80072d8:	091b      	lsreq	r3, r3, #4
 80072da:	3004      	addeq	r0, #4
 80072dc:	079a      	lsls	r2, r3, #30
 80072de:	bf04      	itt	eq
 80072e0:	089b      	lsreq	r3, r3, #2
 80072e2:	3002      	addeq	r0, #2
 80072e4:	07da      	lsls	r2, r3, #31
 80072e6:	d403      	bmi.n	80072f0 <__lo0bits+0x50>
 80072e8:	085b      	lsrs	r3, r3, #1
 80072ea:	f100 0001 	add.w	r0, r0, #1
 80072ee:	d005      	beq.n	80072fc <__lo0bits+0x5c>
 80072f0:	600b      	str	r3, [r1, #0]
 80072f2:	4770      	bx	lr
 80072f4:	4610      	mov	r0, r2
 80072f6:	e7e8      	b.n	80072ca <__lo0bits+0x2a>
 80072f8:	2000      	movs	r0, #0
 80072fa:	4770      	bx	lr
 80072fc:	2020      	movs	r0, #32
 80072fe:	4770      	bx	lr

08007300 <__i2b>:
 8007300:	b510      	push	{r4, lr}
 8007302:	460c      	mov	r4, r1
 8007304:	2101      	movs	r1, #1
 8007306:	f7ff feff 	bl	8007108 <_Balloc>
 800730a:	4602      	mov	r2, r0
 800730c:	b928      	cbnz	r0, 800731a <__i2b+0x1a>
 800730e:	4b05      	ldr	r3, [pc, #20]	; (8007324 <__i2b+0x24>)
 8007310:	4805      	ldr	r0, [pc, #20]	; (8007328 <__i2b+0x28>)
 8007312:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007316:	f000 fc9b 	bl	8007c50 <__assert_func>
 800731a:	2301      	movs	r3, #1
 800731c:	6144      	str	r4, [r0, #20]
 800731e:	6103      	str	r3, [r0, #16]
 8007320:	bd10      	pop	{r4, pc}
 8007322:	bf00      	nop
 8007324:	08008ab3 	.word	0x08008ab3
 8007328:	08008ac4 	.word	0x08008ac4

0800732c <__multiply>:
 800732c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007330:	4614      	mov	r4, r2
 8007332:	690a      	ldr	r2, [r1, #16]
 8007334:	6923      	ldr	r3, [r4, #16]
 8007336:	429a      	cmp	r2, r3
 8007338:	bfb8      	it	lt
 800733a:	460b      	movlt	r3, r1
 800733c:	460d      	mov	r5, r1
 800733e:	bfbc      	itt	lt
 8007340:	4625      	movlt	r5, r4
 8007342:	461c      	movlt	r4, r3
 8007344:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007348:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800734c:	68ab      	ldr	r3, [r5, #8]
 800734e:	6869      	ldr	r1, [r5, #4]
 8007350:	eb0a 0709 	add.w	r7, sl, r9
 8007354:	42bb      	cmp	r3, r7
 8007356:	b085      	sub	sp, #20
 8007358:	bfb8      	it	lt
 800735a:	3101      	addlt	r1, #1
 800735c:	f7ff fed4 	bl	8007108 <_Balloc>
 8007360:	b930      	cbnz	r0, 8007370 <__multiply+0x44>
 8007362:	4602      	mov	r2, r0
 8007364:	4b42      	ldr	r3, [pc, #264]	; (8007470 <__multiply+0x144>)
 8007366:	4843      	ldr	r0, [pc, #268]	; (8007474 <__multiply+0x148>)
 8007368:	f240 115d 	movw	r1, #349	; 0x15d
 800736c:	f000 fc70 	bl	8007c50 <__assert_func>
 8007370:	f100 0614 	add.w	r6, r0, #20
 8007374:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007378:	4633      	mov	r3, r6
 800737a:	2200      	movs	r2, #0
 800737c:	4543      	cmp	r3, r8
 800737e:	d31e      	bcc.n	80073be <__multiply+0x92>
 8007380:	f105 0c14 	add.w	ip, r5, #20
 8007384:	f104 0314 	add.w	r3, r4, #20
 8007388:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800738c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007390:	9202      	str	r2, [sp, #8]
 8007392:	ebac 0205 	sub.w	r2, ip, r5
 8007396:	3a15      	subs	r2, #21
 8007398:	f022 0203 	bic.w	r2, r2, #3
 800739c:	3204      	adds	r2, #4
 800739e:	f105 0115 	add.w	r1, r5, #21
 80073a2:	458c      	cmp	ip, r1
 80073a4:	bf38      	it	cc
 80073a6:	2204      	movcc	r2, #4
 80073a8:	9201      	str	r2, [sp, #4]
 80073aa:	9a02      	ldr	r2, [sp, #8]
 80073ac:	9303      	str	r3, [sp, #12]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d808      	bhi.n	80073c4 <__multiply+0x98>
 80073b2:	2f00      	cmp	r7, #0
 80073b4:	dc55      	bgt.n	8007462 <__multiply+0x136>
 80073b6:	6107      	str	r7, [r0, #16]
 80073b8:	b005      	add	sp, #20
 80073ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073be:	f843 2b04 	str.w	r2, [r3], #4
 80073c2:	e7db      	b.n	800737c <__multiply+0x50>
 80073c4:	f8b3 a000 	ldrh.w	sl, [r3]
 80073c8:	f1ba 0f00 	cmp.w	sl, #0
 80073cc:	d020      	beq.n	8007410 <__multiply+0xe4>
 80073ce:	f105 0e14 	add.w	lr, r5, #20
 80073d2:	46b1      	mov	r9, r6
 80073d4:	2200      	movs	r2, #0
 80073d6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80073da:	f8d9 b000 	ldr.w	fp, [r9]
 80073de:	b2a1      	uxth	r1, r4
 80073e0:	fa1f fb8b 	uxth.w	fp, fp
 80073e4:	fb0a b101 	mla	r1, sl, r1, fp
 80073e8:	4411      	add	r1, r2
 80073ea:	f8d9 2000 	ldr.w	r2, [r9]
 80073ee:	0c24      	lsrs	r4, r4, #16
 80073f0:	0c12      	lsrs	r2, r2, #16
 80073f2:	fb0a 2404 	mla	r4, sl, r4, r2
 80073f6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80073fa:	b289      	uxth	r1, r1
 80073fc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007400:	45f4      	cmp	ip, lr
 8007402:	f849 1b04 	str.w	r1, [r9], #4
 8007406:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800740a:	d8e4      	bhi.n	80073d6 <__multiply+0xaa>
 800740c:	9901      	ldr	r1, [sp, #4]
 800740e:	5072      	str	r2, [r6, r1]
 8007410:	9a03      	ldr	r2, [sp, #12]
 8007412:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007416:	3304      	adds	r3, #4
 8007418:	f1b9 0f00 	cmp.w	r9, #0
 800741c:	d01f      	beq.n	800745e <__multiply+0x132>
 800741e:	6834      	ldr	r4, [r6, #0]
 8007420:	f105 0114 	add.w	r1, r5, #20
 8007424:	46b6      	mov	lr, r6
 8007426:	f04f 0a00 	mov.w	sl, #0
 800742a:	880a      	ldrh	r2, [r1, #0]
 800742c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007430:	fb09 b202 	mla	r2, r9, r2, fp
 8007434:	4492      	add	sl, r2
 8007436:	b2a4      	uxth	r4, r4
 8007438:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800743c:	f84e 4b04 	str.w	r4, [lr], #4
 8007440:	f851 4b04 	ldr.w	r4, [r1], #4
 8007444:	f8be 2000 	ldrh.w	r2, [lr]
 8007448:	0c24      	lsrs	r4, r4, #16
 800744a:	fb09 2404 	mla	r4, r9, r4, r2
 800744e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007452:	458c      	cmp	ip, r1
 8007454:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007458:	d8e7      	bhi.n	800742a <__multiply+0xfe>
 800745a:	9a01      	ldr	r2, [sp, #4]
 800745c:	50b4      	str	r4, [r6, r2]
 800745e:	3604      	adds	r6, #4
 8007460:	e7a3      	b.n	80073aa <__multiply+0x7e>
 8007462:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1a5      	bne.n	80073b6 <__multiply+0x8a>
 800746a:	3f01      	subs	r7, #1
 800746c:	e7a1      	b.n	80073b2 <__multiply+0x86>
 800746e:	bf00      	nop
 8007470:	08008ab3 	.word	0x08008ab3
 8007474:	08008ac4 	.word	0x08008ac4

08007478 <__pow5mult>:
 8007478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800747c:	4615      	mov	r5, r2
 800747e:	f012 0203 	ands.w	r2, r2, #3
 8007482:	4606      	mov	r6, r0
 8007484:	460f      	mov	r7, r1
 8007486:	d007      	beq.n	8007498 <__pow5mult+0x20>
 8007488:	4c25      	ldr	r4, [pc, #148]	; (8007520 <__pow5mult+0xa8>)
 800748a:	3a01      	subs	r2, #1
 800748c:	2300      	movs	r3, #0
 800748e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007492:	f7ff fe9b 	bl	80071cc <__multadd>
 8007496:	4607      	mov	r7, r0
 8007498:	10ad      	asrs	r5, r5, #2
 800749a:	d03d      	beq.n	8007518 <__pow5mult+0xa0>
 800749c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800749e:	b97c      	cbnz	r4, 80074c0 <__pow5mult+0x48>
 80074a0:	2010      	movs	r0, #16
 80074a2:	f7ff fe29 	bl	80070f8 <malloc>
 80074a6:	4602      	mov	r2, r0
 80074a8:	6270      	str	r0, [r6, #36]	; 0x24
 80074aa:	b928      	cbnz	r0, 80074b8 <__pow5mult+0x40>
 80074ac:	4b1d      	ldr	r3, [pc, #116]	; (8007524 <__pow5mult+0xac>)
 80074ae:	481e      	ldr	r0, [pc, #120]	; (8007528 <__pow5mult+0xb0>)
 80074b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80074b4:	f000 fbcc 	bl	8007c50 <__assert_func>
 80074b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074bc:	6004      	str	r4, [r0, #0]
 80074be:	60c4      	str	r4, [r0, #12]
 80074c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80074c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074c8:	b94c      	cbnz	r4, 80074de <__pow5mult+0x66>
 80074ca:	f240 2171 	movw	r1, #625	; 0x271
 80074ce:	4630      	mov	r0, r6
 80074d0:	f7ff ff16 	bl	8007300 <__i2b>
 80074d4:	2300      	movs	r3, #0
 80074d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80074da:	4604      	mov	r4, r0
 80074dc:	6003      	str	r3, [r0, #0]
 80074de:	f04f 0900 	mov.w	r9, #0
 80074e2:	07eb      	lsls	r3, r5, #31
 80074e4:	d50a      	bpl.n	80074fc <__pow5mult+0x84>
 80074e6:	4639      	mov	r1, r7
 80074e8:	4622      	mov	r2, r4
 80074ea:	4630      	mov	r0, r6
 80074ec:	f7ff ff1e 	bl	800732c <__multiply>
 80074f0:	4639      	mov	r1, r7
 80074f2:	4680      	mov	r8, r0
 80074f4:	4630      	mov	r0, r6
 80074f6:	f7ff fe47 	bl	8007188 <_Bfree>
 80074fa:	4647      	mov	r7, r8
 80074fc:	106d      	asrs	r5, r5, #1
 80074fe:	d00b      	beq.n	8007518 <__pow5mult+0xa0>
 8007500:	6820      	ldr	r0, [r4, #0]
 8007502:	b938      	cbnz	r0, 8007514 <__pow5mult+0x9c>
 8007504:	4622      	mov	r2, r4
 8007506:	4621      	mov	r1, r4
 8007508:	4630      	mov	r0, r6
 800750a:	f7ff ff0f 	bl	800732c <__multiply>
 800750e:	6020      	str	r0, [r4, #0]
 8007510:	f8c0 9000 	str.w	r9, [r0]
 8007514:	4604      	mov	r4, r0
 8007516:	e7e4      	b.n	80074e2 <__pow5mult+0x6a>
 8007518:	4638      	mov	r0, r7
 800751a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800751e:	bf00      	nop
 8007520:	08008c18 	.word	0x08008c18
 8007524:	08008a3d 	.word	0x08008a3d
 8007528:	08008ac4 	.word	0x08008ac4

0800752c <__lshift>:
 800752c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007530:	460c      	mov	r4, r1
 8007532:	6849      	ldr	r1, [r1, #4]
 8007534:	6923      	ldr	r3, [r4, #16]
 8007536:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800753a:	68a3      	ldr	r3, [r4, #8]
 800753c:	4607      	mov	r7, r0
 800753e:	4691      	mov	r9, r2
 8007540:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007544:	f108 0601 	add.w	r6, r8, #1
 8007548:	42b3      	cmp	r3, r6
 800754a:	db0b      	blt.n	8007564 <__lshift+0x38>
 800754c:	4638      	mov	r0, r7
 800754e:	f7ff fddb 	bl	8007108 <_Balloc>
 8007552:	4605      	mov	r5, r0
 8007554:	b948      	cbnz	r0, 800756a <__lshift+0x3e>
 8007556:	4602      	mov	r2, r0
 8007558:	4b28      	ldr	r3, [pc, #160]	; (80075fc <__lshift+0xd0>)
 800755a:	4829      	ldr	r0, [pc, #164]	; (8007600 <__lshift+0xd4>)
 800755c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007560:	f000 fb76 	bl	8007c50 <__assert_func>
 8007564:	3101      	adds	r1, #1
 8007566:	005b      	lsls	r3, r3, #1
 8007568:	e7ee      	b.n	8007548 <__lshift+0x1c>
 800756a:	2300      	movs	r3, #0
 800756c:	f100 0114 	add.w	r1, r0, #20
 8007570:	f100 0210 	add.w	r2, r0, #16
 8007574:	4618      	mov	r0, r3
 8007576:	4553      	cmp	r3, sl
 8007578:	db33      	blt.n	80075e2 <__lshift+0xb6>
 800757a:	6920      	ldr	r0, [r4, #16]
 800757c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007580:	f104 0314 	add.w	r3, r4, #20
 8007584:	f019 091f 	ands.w	r9, r9, #31
 8007588:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800758c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007590:	d02b      	beq.n	80075ea <__lshift+0xbe>
 8007592:	f1c9 0e20 	rsb	lr, r9, #32
 8007596:	468a      	mov	sl, r1
 8007598:	2200      	movs	r2, #0
 800759a:	6818      	ldr	r0, [r3, #0]
 800759c:	fa00 f009 	lsl.w	r0, r0, r9
 80075a0:	4302      	orrs	r2, r0
 80075a2:	f84a 2b04 	str.w	r2, [sl], #4
 80075a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80075aa:	459c      	cmp	ip, r3
 80075ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80075b0:	d8f3      	bhi.n	800759a <__lshift+0x6e>
 80075b2:	ebac 0304 	sub.w	r3, ip, r4
 80075b6:	3b15      	subs	r3, #21
 80075b8:	f023 0303 	bic.w	r3, r3, #3
 80075bc:	3304      	adds	r3, #4
 80075be:	f104 0015 	add.w	r0, r4, #21
 80075c2:	4584      	cmp	ip, r0
 80075c4:	bf38      	it	cc
 80075c6:	2304      	movcc	r3, #4
 80075c8:	50ca      	str	r2, [r1, r3]
 80075ca:	b10a      	cbz	r2, 80075d0 <__lshift+0xa4>
 80075cc:	f108 0602 	add.w	r6, r8, #2
 80075d0:	3e01      	subs	r6, #1
 80075d2:	4638      	mov	r0, r7
 80075d4:	612e      	str	r6, [r5, #16]
 80075d6:	4621      	mov	r1, r4
 80075d8:	f7ff fdd6 	bl	8007188 <_Bfree>
 80075dc:	4628      	mov	r0, r5
 80075de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80075e6:	3301      	adds	r3, #1
 80075e8:	e7c5      	b.n	8007576 <__lshift+0x4a>
 80075ea:	3904      	subs	r1, #4
 80075ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80075f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80075f4:	459c      	cmp	ip, r3
 80075f6:	d8f9      	bhi.n	80075ec <__lshift+0xc0>
 80075f8:	e7ea      	b.n	80075d0 <__lshift+0xa4>
 80075fa:	bf00      	nop
 80075fc:	08008ab3 	.word	0x08008ab3
 8007600:	08008ac4 	.word	0x08008ac4

08007604 <__mcmp>:
 8007604:	b530      	push	{r4, r5, lr}
 8007606:	6902      	ldr	r2, [r0, #16]
 8007608:	690c      	ldr	r4, [r1, #16]
 800760a:	1b12      	subs	r2, r2, r4
 800760c:	d10e      	bne.n	800762c <__mcmp+0x28>
 800760e:	f100 0314 	add.w	r3, r0, #20
 8007612:	3114      	adds	r1, #20
 8007614:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007618:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800761c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007620:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007624:	42a5      	cmp	r5, r4
 8007626:	d003      	beq.n	8007630 <__mcmp+0x2c>
 8007628:	d305      	bcc.n	8007636 <__mcmp+0x32>
 800762a:	2201      	movs	r2, #1
 800762c:	4610      	mov	r0, r2
 800762e:	bd30      	pop	{r4, r5, pc}
 8007630:	4283      	cmp	r3, r0
 8007632:	d3f3      	bcc.n	800761c <__mcmp+0x18>
 8007634:	e7fa      	b.n	800762c <__mcmp+0x28>
 8007636:	f04f 32ff 	mov.w	r2, #4294967295
 800763a:	e7f7      	b.n	800762c <__mcmp+0x28>

0800763c <__mdiff>:
 800763c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007640:	460c      	mov	r4, r1
 8007642:	4606      	mov	r6, r0
 8007644:	4611      	mov	r1, r2
 8007646:	4620      	mov	r0, r4
 8007648:	4617      	mov	r7, r2
 800764a:	f7ff ffdb 	bl	8007604 <__mcmp>
 800764e:	1e05      	subs	r5, r0, #0
 8007650:	d110      	bne.n	8007674 <__mdiff+0x38>
 8007652:	4629      	mov	r1, r5
 8007654:	4630      	mov	r0, r6
 8007656:	f7ff fd57 	bl	8007108 <_Balloc>
 800765a:	b930      	cbnz	r0, 800766a <__mdiff+0x2e>
 800765c:	4b39      	ldr	r3, [pc, #228]	; (8007744 <__mdiff+0x108>)
 800765e:	4602      	mov	r2, r0
 8007660:	f240 2132 	movw	r1, #562	; 0x232
 8007664:	4838      	ldr	r0, [pc, #224]	; (8007748 <__mdiff+0x10c>)
 8007666:	f000 faf3 	bl	8007c50 <__assert_func>
 800766a:	2301      	movs	r3, #1
 800766c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007670:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007674:	bfa4      	itt	ge
 8007676:	463b      	movge	r3, r7
 8007678:	4627      	movge	r7, r4
 800767a:	4630      	mov	r0, r6
 800767c:	6879      	ldr	r1, [r7, #4]
 800767e:	bfa6      	itte	ge
 8007680:	461c      	movge	r4, r3
 8007682:	2500      	movge	r5, #0
 8007684:	2501      	movlt	r5, #1
 8007686:	f7ff fd3f 	bl	8007108 <_Balloc>
 800768a:	b920      	cbnz	r0, 8007696 <__mdiff+0x5a>
 800768c:	4b2d      	ldr	r3, [pc, #180]	; (8007744 <__mdiff+0x108>)
 800768e:	4602      	mov	r2, r0
 8007690:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007694:	e7e6      	b.n	8007664 <__mdiff+0x28>
 8007696:	693e      	ldr	r6, [r7, #16]
 8007698:	60c5      	str	r5, [r0, #12]
 800769a:	6925      	ldr	r5, [r4, #16]
 800769c:	f107 0114 	add.w	r1, r7, #20
 80076a0:	f104 0914 	add.w	r9, r4, #20
 80076a4:	f100 0e14 	add.w	lr, r0, #20
 80076a8:	f107 0210 	add.w	r2, r7, #16
 80076ac:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80076b0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80076b4:	46f2      	mov	sl, lr
 80076b6:	2700      	movs	r7, #0
 80076b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80076bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80076c0:	fa1f f883 	uxth.w	r8, r3
 80076c4:	fa17 f78b 	uxtah	r7, r7, fp
 80076c8:	0c1b      	lsrs	r3, r3, #16
 80076ca:	eba7 0808 	sub.w	r8, r7, r8
 80076ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80076d6:	fa1f f888 	uxth.w	r8, r8
 80076da:	141f      	asrs	r7, r3, #16
 80076dc:	454d      	cmp	r5, r9
 80076de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80076e2:	f84a 3b04 	str.w	r3, [sl], #4
 80076e6:	d8e7      	bhi.n	80076b8 <__mdiff+0x7c>
 80076e8:	1b2b      	subs	r3, r5, r4
 80076ea:	3b15      	subs	r3, #21
 80076ec:	f023 0303 	bic.w	r3, r3, #3
 80076f0:	3304      	adds	r3, #4
 80076f2:	3415      	adds	r4, #21
 80076f4:	42a5      	cmp	r5, r4
 80076f6:	bf38      	it	cc
 80076f8:	2304      	movcc	r3, #4
 80076fa:	4419      	add	r1, r3
 80076fc:	4473      	add	r3, lr
 80076fe:	469e      	mov	lr, r3
 8007700:	460d      	mov	r5, r1
 8007702:	4565      	cmp	r5, ip
 8007704:	d30e      	bcc.n	8007724 <__mdiff+0xe8>
 8007706:	f10c 0203 	add.w	r2, ip, #3
 800770a:	1a52      	subs	r2, r2, r1
 800770c:	f022 0203 	bic.w	r2, r2, #3
 8007710:	3903      	subs	r1, #3
 8007712:	458c      	cmp	ip, r1
 8007714:	bf38      	it	cc
 8007716:	2200      	movcc	r2, #0
 8007718:	441a      	add	r2, r3
 800771a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800771e:	b17b      	cbz	r3, 8007740 <__mdiff+0x104>
 8007720:	6106      	str	r6, [r0, #16]
 8007722:	e7a5      	b.n	8007670 <__mdiff+0x34>
 8007724:	f855 8b04 	ldr.w	r8, [r5], #4
 8007728:	fa17 f488 	uxtah	r4, r7, r8
 800772c:	1422      	asrs	r2, r4, #16
 800772e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007732:	b2a4      	uxth	r4, r4
 8007734:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007738:	f84e 4b04 	str.w	r4, [lr], #4
 800773c:	1417      	asrs	r7, r2, #16
 800773e:	e7e0      	b.n	8007702 <__mdiff+0xc6>
 8007740:	3e01      	subs	r6, #1
 8007742:	e7ea      	b.n	800771a <__mdiff+0xde>
 8007744:	08008ab3 	.word	0x08008ab3
 8007748:	08008ac4 	.word	0x08008ac4

0800774c <__d2b>:
 800774c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007750:	4689      	mov	r9, r1
 8007752:	2101      	movs	r1, #1
 8007754:	ec57 6b10 	vmov	r6, r7, d0
 8007758:	4690      	mov	r8, r2
 800775a:	f7ff fcd5 	bl	8007108 <_Balloc>
 800775e:	4604      	mov	r4, r0
 8007760:	b930      	cbnz	r0, 8007770 <__d2b+0x24>
 8007762:	4602      	mov	r2, r0
 8007764:	4b25      	ldr	r3, [pc, #148]	; (80077fc <__d2b+0xb0>)
 8007766:	4826      	ldr	r0, [pc, #152]	; (8007800 <__d2b+0xb4>)
 8007768:	f240 310a 	movw	r1, #778	; 0x30a
 800776c:	f000 fa70 	bl	8007c50 <__assert_func>
 8007770:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007774:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007778:	bb35      	cbnz	r5, 80077c8 <__d2b+0x7c>
 800777a:	2e00      	cmp	r6, #0
 800777c:	9301      	str	r3, [sp, #4]
 800777e:	d028      	beq.n	80077d2 <__d2b+0x86>
 8007780:	4668      	mov	r0, sp
 8007782:	9600      	str	r6, [sp, #0]
 8007784:	f7ff fd8c 	bl	80072a0 <__lo0bits>
 8007788:	9900      	ldr	r1, [sp, #0]
 800778a:	b300      	cbz	r0, 80077ce <__d2b+0x82>
 800778c:	9a01      	ldr	r2, [sp, #4]
 800778e:	f1c0 0320 	rsb	r3, r0, #32
 8007792:	fa02 f303 	lsl.w	r3, r2, r3
 8007796:	430b      	orrs	r3, r1
 8007798:	40c2      	lsrs	r2, r0
 800779a:	6163      	str	r3, [r4, #20]
 800779c:	9201      	str	r2, [sp, #4]
 800779e:	9b01      	ldr	r3, [sp, #4]
 80077a0:	61a3      	str	r3, [r4, #24]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bf14      	ite	ne
 80077a6:	2202      	movne	r2, #2
 80077a8:	2201      	moveq	r2, #1
 80077aa:	6122      	str	r2, [r4, #16]
 80077ac:	b1d5      	cbz	r5, 80077e4 <__d2b+0x98>
 80077ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80077b2:	4405      	add	r5, r0
 80077b4:	f8c9 5000 	str.w	r5, [r9]
 80077b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077bc:	f8c8 0000 	str.w	r0, [r8]
 80077c0:	4620      	mov	r0, r4
 80077c2:	b003      	add	sp, #12
 80077c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077cc:	e7d5      	b.n	800777a <__d2b+0x2e>
 80077ce:	6161      	str	r1, [r4, #20]
 80077d0:	e7e5      	b.n	800779e <__d2b+0x52>
 80077d2:	a801      	add	r0, sp, #4
 80077d4:	f7ff fd64 	bl	80072a0 <__lo0bits>
 80077d8:	9b01      	ldr	r3, [sp, #4]
 80077da:	6163      	str	r3, [r4, #20]
 80077dc:	2201      	movs	r2, #1
 80077de:	6122      	str	r2, [r4, #16]
 80077e0:	3020      	adds	r0, #32
 80077e2:	e7e3      	b.n	80077ac <__d2b+0x60>
 80077e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077ec:	f8c9 0000 	str.w	r0, [r9]
 80077f0:	6918      	ldr	r0, [r3, #16]
 80077f2:	f7ff fd35 	bl	8007260 <__hi0bits>
 80077f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077fa:	e7df      	b.n	80077bc <__d2b+0x70>
 80077fc:	08008ab3 	.word	0x08008ab3
 8007800:	08008ac4 	.word	0x08008ac4

08007804 <_calloc_r>:
 8007804:	b513      	push	{r0, r1, r4, lr}
 8007806:	434a      	muls	r2, r1
 8007808:	4611      	mov	r1, r2
 800780a:	9201      	str	r2, [sp, #4]
 800780c:	f000 f85a 	bl	80078c4 <_malloc_r>
 8007810:	4604      	mov	r4, r0
 8007812:	b118      	cbz	r0, 800781c <_calloc_r+0x18>
 8007814:	9a01      	ldr	r2, [sp, #4]
 8007816:	2100      	movs	r1, #0
 8007818:	f7fe f93c 	bl	8005a94 <memset>
 800781c:	4620      	mov	r0, r4
 800781e:	b002      	add	sp, #8
 8007820:	bd10      	pop	{r4, pc}
	...

08007824 <_free_r>:
 8007824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007826:	2900      	cmp	r1, #0
 8007828:	d048      	beq.n	80078bc <_free_r+0x98>
 800782a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800782e:	9001      	str	r0, [sp, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	f1a1 0404 	sub.w	r4, r1, #4
 8007836:	bfb8      	it	lt
 8007838:	18e4      	addlt	r4, r4, r3
 800783a:	f000 fa65 	bl	8007d08 <__malloc_lock>
 800783e:	4a20      	ldr	r2, [pc, #128]	; (80078c0 <_free_r+0x9c>)
 8007840:	9801      	ldr	r0, [sp, #4]
 8007842:	6813      	ldr	r3, [r2, #0]
 8007844:	4615      	mov	r5, r2
 8007846:	b933      	cbnz	r3, 8007856 <_free_r+0x32>
 8007848:	6063      	str	r3, [r4, #4]
 800784a:	6014      	str	r4, [r2, #0]
 800784c:	b003      	add	sp, #12
 800784e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007852:	f000 ba5f 	b.w	8007d14 <__malloc_unlock>
 8007856:	42a3      	cmp	r3, r4
 8007858:	d90b      	bls.n	8007872 <_free_r+0x4e>
 800785a:	6821      	ldr	r1, [r4, #0]
 800785c:	1862      	adds	r2, r4, r1
 800785e:	4293      	cmp	r3, r2
 8007860:	bf04      	itt	eq
 8007862:	681a      	ldreq	r2, [r3, #0]
 8007864:	685b      	ldreq	r3, [r3, #4]
 8007866:	6063      	str	r3, [r4, #4]
 8007868:	bf04      	itt	eq
 800786a:	1852      	addeq	r2, r2, r1
 800786c:	6022      	streq	r2, [r4, #0]
 800786e:	602c      	str	r4, [r5, #0]
 8007870:	e7ec      	b.n	800784c <_free_r+0x28>
 8007872:	461a      	mov	r2, r3
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	b10b      	cbz	r3, 800787c <_free_r+0x58>
 8007878:	42a3      	cmp	r3, r4
 800787a:	d9fa      	bls.n	8007872 <_free_r+0x4e>
 800787c:	6811      	ldr	r1, [r2, #0]
 800787e:	1855      	adds	r5, r2, r1
 8007880:	42a5      	cmp	r5, r4
 8007882:	d10b      	bne.n	800789c <_free_r+0x78>
 8007884:	6824      	ldr	r4, [r4, #0]
 8007886:	4421      	add	r1, r4
 8007888:	1854      	adds	r4, r2, r1
 800788a:	42a3      	cmp	r3, r4
 800788c:	6011      	str	r1, [r2, #0]
 800788e:	d1dd      	bne.n	800784c <_free_r+0x28>
 8007890:	681c      	ldr	r4, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	6053      	str	r3, [r2, #4]
 8007896:	4421      	add	r1, r4
 8007898:	6011      	str	r1, [r2, #0]
 800789a:	e7d7      	b.n	800784c <_free_r+0x28>
 800789c:	d902      	bls.n	80078a4 <_free_r+0x80>
 800789e:	230c      	movs	r3, #12
 80078a0:	6003      	str	r3, [r0, #0]
 80078a2:	e7d3      	b.n	800784c <_free_r+0x28>
 80078a4:	6825      	ldr	r5, [r4, #0]
 80078a6:	1961      	adds	r1, r4, r5
 80078a8:	428b      	cmp	r3, r1
 80078aa:	bf04      	itt	eq
 80078ac:	6819      	ldreq	r1, [r3, #0]
 80078ae:	685b      	ldreq	r3, [r3, #4]
 80078b0:	6063      	str	r3, [r4, #4]
 80078b2:	bf04      	itt	eq
 80078b4:	1949      	addeq	r1, r1, r5
 80078b6:	6021      	streq	r1, [r4, #0]
 80078b8:	6054      	str	r4, [r2, #4]
 80078ba:	e7c7      	b.n	800784c <_free_r+0x28>
 80078bc:	b003      	add	sp, #12
 80078be:	bd30      	pop	{r4, r5, pc}
 80078c0:	200002b8 	.word	0x200002b8

080078c4 <_malloc_r>:
 80078c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c6:	1ccd      	adds	r5, r1, #3
 80078c8:	f025 0503 	bic.w	r5, r5, #3
 80078cc:	3508      	adds	r5, #8
 80078ce:	2d0c      	cmp	r5, #12
 80078d0:	bf38      	it	cc
 80078d2:	250c      	movcc	r5, #12
 80078d4:	2d00      	cmp	r5, #0
 80078d6:	4606      	mov	r6, r0
 80078d8:	db01      	blt.n	80078de <_malloc_r+0x1a>
 80078da:	42a9      	cmp	r1, r5
 80078dc:	d903      	bls.n	80078e6 <_malloc_r+0x22>
 80078de:	230c      	movs	r3, #12
 80078e0:	6033      	str	r3, [r6, #0]
 80078e2:	2000      	movs	r0, #0
 80078e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078e6:	f000 fa0f 	bl	8007d08 <__malloc_lock>
 80078ea:	4921      	ldr	r1, [pc, #132]	; (8007970 <_malloc_r+0xac>)
 80078ec:	680a      	ldr	r2, [r1, #0]
 80078ee:	4614      	mov	r4, r2
 80078f0:	b99c      	cbnz	r4, 800791a <_malloc_r+0x56>
 80078f2:	4f20      	ldr	r7, [pc, #128]	; (8007974 <_malloc_r+0xb0>)
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	b923      	cbnz	r3, 8007902 <_malloc_r+0x3e>
 80078f8:	4621      	mov	r1, r4
 80078fa:	4630      	mov	r0, r6
 80078fc:	f000 f998 	bl	8007c30 <_sbrk_r>
 8007900:	6038      	str	r0, [r7, #0]
 8007902:	4629      	mov	r1, r5
 8007904:	4630      	mov	r0, r6
 8007906:	f000 f993 	bl	8007c30 <_sbrk_r>
 800790a:	1c43      	adds	r3, r0, #1
 800790c:	d123      	bne.n	8007956 <_malloc_r+0x92>
 800790e:	230c      	movs	r3, #12
 8007910:	6033      	str	r3, [r6, #0]
 8007912:	4630      	mov	r0, r6
 8007914:	f000 f9fe 	bl	8007d14 <__malloc_unlock>
 8007918:	e7e3      	b.n	80078e2 <_malloc_r+0x1e>
 800791a:	6823      	ldr	r3, [r4, #0]
 800791c:	1b5b      	subs	r3, r3, r5
 800791e:	d417      	bmi.n	8007950 <_malloc_r+0x8c>
 8007920:	2b0b      	cmp	r3, #11
 8007922:	d903      	bls.n	800792c <_malloc_r+0x68>
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	441c      	add	r4, r3
 8007928:	6025      	str	r5, [r4, #0]
 800792a:	e004      	b.n	8007936 <_malloc_r+0x72>
 800792c:	6863      	ldr	r3, [r4, #4]
 800792e:	42a2      	cmp	r2, r4
 8007930:	bf0c      	ite	eq
 8007932:	600b      	streq	r3, [r1, #0]
 8007934:	6053      	strne	r3, [r2, #4]
 8007936:	4630      	mov	r0, r6
 8007938:	f000 f9ec 	bl	8007d14 <__malloc_unlock>
 800793c:	f104 000b 	add.w	r0, r4, #11
 8007940:	1d23      	adds	r3, r4, #4
 8007942:	f020 0007 	bic.w	r0, r0, #7
 8007946:	1ac2      	subs	r2, r0, r3
 8007948:	d0cc      	beq.n	80078e4 <_malloc_r+0x20>
 800794a:	1a1b      	subs	r3, r3, r0
 800794c:	50a3      	str	r3, [r4, r2]
 800794e:	e7c9      	b.n	80078e4 <_malloc_r+0x20>
 8007950:	4622      	mov	r2, r4
 8007952:	6864      	ldr	r4, [r4, #4]
 8007954:	e7cc      	b.n	80078f0 <_malloc_r+0x2c>
 8007956:	1cc4      	adds	r4, r0, #3
 8007958:	f024 0403 	bic.w	r4, r4, #3
 800795c:	42a0      	cmp	r0, r4
 800795e:	d0e3      	beq.n	8007928 <_malloc_r+0x64>
 8007960:	1a21      	subs	r1, r4, r0
 8007962:	4630      	mov	r0, r6
 8007964:	f000 f964 	bl	8007c30 <_sbrk_r>
 8007968:	3001      	adds	r0, #1
 800796a:	d1dd      	bne.n	8007928 <_malloc_r+0x64>
 800796c:	e7cf      	b.n	800790e <_malloc_r+0x4a>
 800796e:	bf00      	nop
 8007970:	200002b8 	.word	0x200002b8
 8007974:	200002bc 	.word	0x200002bc

08007978 <__ssputs_r>:
 8007978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800797c:	688e      	ldr	r6, [r1, #8]
 800797e:	429e      	cmp	r6, r3
 8007980:	4682      	mov	sl, r0
 8007982:	460c      	mov	r4, r1
 8007984:	4690      	mov	r8, r2
 8007986:	461f      	mov	r7, r3
 8007988:	d838      	bhi.n	80079fc <__ssputs_r+0x84>
 800798a:	898a      	ldrh	r2, [r1, #12]
 800798c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007990:	d032      	beq.n	80079f8 <__ssputs_r+0x80>
 8007992:	6825      	ldr	r5, [r4, #0]
 8007994:	6909      	ldr	r1, [r1, #16]
 8007996:	eba5 0901 	sub.w	r9, r5, r1
 800799a:	6965      	ldr	r5, [r4, #20]
 800799c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079a4:	3301      	adds	r3, #1
 80079a6:	444b      	add	r3, r9
 80079a8:	106d      	asrs	r5, r5, #1
 80079aa:	429d      	cmp	r5, r3
 80079ac:	bf38      	it	cc
 80079ae:	461d      	movcc	r5, r3
 80079b0:	0553      	lsls	r3, r2, #21
 80079b2:	d531      	bpl.n	8007a18 <__ssputs_r+0xa0>
 80079b4:	4629      	mov	r1, r5
 80079b6:	f7ff ff85 	bl	80078c4 <_malloc_r>
 80079ba:	4606      	mov	r6, r0
 80079bc:	b950      	cbnz	r0, 80079d4 <__ssputs_r+0x5c>
 80079be:	230c      	movs	r3, #12
 80079c0:	f8ca 3000 	str.w	r3, [sl]
 80079c4:	89a3      	ldrh	r3, [r4, #12]
 80079c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079ca:	81a3      	strh	r3, [r4, #12]
 80079cc:	f04f 30ff 	mov.w	r0, #4294967295
 80079d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d4:	6921      	ldr	r1, [r4, #16]
 80079d6:	464a      	mov	r2, r9
 80079d8:	f7fe f84e 	bl	8005a78 <memcpy>
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079e6:	81a3      	strh	r3, [r4, #12]
 80079e8:	6126      	str	r6, [r4, #16]
 80079ea:	6165      	str	r5, [r4, #20]
 80079ec:	444e      	add	r6, r9
 80079ee:	eba5 0509 	sub.w	r5, r5, r9
 80079f2:	6026      	str	r6, [r4, #0]
 80079f4:	60a5      	str	r5, [r4, #8]
 80079f6:	463e      	mov	r6, r7
 80079f8:	42be      	cmp	r6, r7
 80079fa:	d900      	bls.n	80079fe <__ssputs_r+0x86>
 80079fc:	463e      	mov	r6, r7
 80079fe:	4632      	mov	r2, r6
 8007a00:	6820      	ldr	r0, [r4, #0]
 8007a02:	4641      	mov	r1, r8
 8007a04:	f000 f966 	bl	8007cd4 <memmove>
 8007a08:	68a3      	ldr	r3, [r4, #8]
 8007a0a:	6822      	ldr	r2, [r4, #0]
 8007a0c:	1b9b      	subs	r3, r3, r6
 8007a0e:	4432      	add	r2, r6
 8007a10:	60a3      	str	r3, [r4, #8]
 8007a12:	6022      	str	r2, [r4, #0]
 8007a14:	2000      	movs	r0, #0
 8007a16:	e7db      	b.n	80079d0 <__ssputs_r+0x58>
 8007a18:	462a      	mov	r2, r5
 8007a1a:	f000 f981 	bl	8007d20 <_realloc_r>
 8007a1e:	4606      	mov	r6, r0
 8007a20:	2800      	cmp	r0, #0
 8007a22:	d1e1      	bne.n	80079e8 <__ssputs_r+0x70>
 8007a24:	6921      	ldr	r1, [r4, #16]
 8007a26:	4650      	mov	r0, sl
 8007a28:	f7ff fefc 	bl	8007824 <_free_r>
 8007a2c:	e7c7      	b.n	80079be <__ssputs_r+0x46>
	...

08007a30 <_svfiprintf_r>:
 8007a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a34:	4698      	mov	r8, r3
 8007a36:	898b      	ldrh	r3, [r1, #12]
 8007a38:	061b      	lsls	r3, r3, #24
 8007a3a:	b09d      	sub	sp, #116	; 0x74
 8007a3c:	4607      	mov	r7, r0
 8007a3e:	460d      	mov	r5, r1
 8007a40:	4614      	mov	r4, r2
 8007a42:	d50e      	bpl.n	8007a62 <_svfiprintf_r+0x32>
 8007a44:	690b      	ldr	r3, [r1, #16]
 8007a46:	b963      	cbnz	r3, 8007a62 <_svfiprintf_r+0x32>
 8007a48:	2140      	movs	r1, #64	; 0x40
 8007a4a:	f7ff ff3b 	bl	80078c4 <_malloc_r>
 8007a4e:	6028      	str	r0, [r5, #0]
 8007a50:	6128      	str	r0, [r5, #16]
 8007a52:	b920      	cbnz	r0, 8007a5e <_svfiprintf_r+0x2e>
 8007a54:	230c      	movs	r3, #12
 8007a56:	603b      	str	r3, [r7, #0]
 8007a58:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5c:	e0d1      	b.n	8007c02 <_svfiprintf_r+0x1d2>
 8007a5e:	2340      	movs	r3, #64	; 0x40
 8007a60:	616b      	str	r3, [r5, #20]
 8007a62:	2300      	movs	r3, #0
 8007a64:	9309      	str	r3, [sp, #36]	; 0x24
 8007a66:	2320      	movs	r3, #32
 8007a68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a70:	2330      	movs	r3, #48	; 0x30
 8007a72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007c1c <_svfiprintf_r+0x1ec>
 8007a76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a7a:	f04f 0901 	mov.w	r9, #1
 8007a7e:	4623      	mov	r3, r4
 8007a80:	469a      	mov	sl, r3
 8007a82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a86:	b10a      	cbz	r2, 8007a8c <_svfiprintf_r+0x5c>
 8007a88:	2a25      	cmp	r2, #37	; 0x25
 8007a8a:	d1f9      	bne.n	8007a80 <_svfiprintf_r+0x50>
 8007a8c:	ebba 0b04 	subs.w	fp, sl, r4
 8007a90:	d00b      	beq.n	8007aaa <_svfiprintf_r+0x7a>
 8007a92:	465b      	mov	r3, fp
 8007a94:	4622      	mov	r2, r4
 8007a96:	4629      	mov	r1, r5
 8007a98:	4638      	mov	r0, r7
 8007a9a:	f7ff ff6d 	bl	8007978 <__ssputs_r>
 8007a9e:	3001      	adds	r0, #1
 8007aa0:	f000 80aa 	beq.w	8007bf8 <_svfiprintf_r+0x1c8>
 8007aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007aa6:	445a      	add	r2, fp
 8007aa8:	9209      	str	r2, [sp, #36]	; 0x24
 8007aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f000 80a2 	beq.w	8007bf8 <_svfiprintf_r+0x1c8>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007abe:	f10a 0a01 	add.w	sl, sl, #1
 8007ac2:	9304      	str	r3, [sp, #16]
 8007ac4:	9307      	str	r3, [sp, #28]
 8007ac6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007aca:	931a      	str	r3, [sp, #104]	; 0x68
 8007acc:	4654      	mov	r4, sl
 8007ace:	2205      	movs	r2, #5
 8007ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ad4:	4851      	ldr	r0, [pc, #324]	; (8007c1c <_svfiprintf_r+0x1ec>)
 8007ad6:	f7f8 fb83 	bl	80001e0 <memchr>
 8007ada:	9a04      	ldr	r2, [sp, #16]
 8007adc:	b9d8      	cbnz	r0, 8007b16 <_svfiprintf_r+0xe6>
 8007ade:	06d0      	lsls	r0, r2, #27
 8007ae0:	bf44      	itt	mi
 8007ae2:	2320      	movmi	r3, #32
 8007ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ae8:	0711      	lsls	r1, r2, #28
 8007aea:	bf44      	itt	mi
 8007aec:	232b      	movmi	r3, #43	; 0x2b
 8007aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007af2:	f89a 3000 	ldrb.w	r3, [sl]
 8007af6:	2b2a      	cmp	r3, #42	; 0x2a
 8007af8:	d015      	beq.n	8007b26 <_svfiprintf_r+0xf6>
 8007afa:	9a07      	ldr	r2, [sp, #28]
 8007afc:	4654      	mov	r4, sl
 8007afe:	2000      	movs	r0, #0
 8007b00:	f04f 0c0a 	mov.w	ip, #10
 8007b04:	4621      	mov	r1, r4
 8007b06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b0a:	3b30      	subs	r3, #48	; 0x30
 8007b0c:	2b09      	cmp	r3, #9
 8007b0e:	d94e      	bls.n	8007bae <_svfiprintf_r+0x17e>
 8007b10:	b1b0      	cbz	r0, 8007b40 <_svfiprintf_r+0x110>
 8007b12:	9207      	str	r2, [sp, #28]
 8007b14:	e014      	b.n	8007b40 <_svfiprintf_r+0x110>
 8007b16:	eba0 0308 	sub.w	r3, r0, r8
 8007b1a:	fa09 f303 	lsl.w	r3, r9, r3
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	9304      	str	r3, [sp, #16]
 8007b22:	46a2      	mov	sl, r4
 8007b24:	e7d2      	b.n	8007acc <_svfiprintf_r+0x9c>
 8007b26:	9b03      	ldr	r3, [sp, #12]
 8007b28:	1d19      	adds	r1, r3, #4
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	9103      	str	r1, [sp, #12]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	bfbb      	ittet	lt
 8007b32:	425b      	neglt	r3, r3
 8007b34:	f042 0202 	orrlt.w	r2, r2, #2
 8007b38:	9307      	strge	r3, [sp, #28]
 8007b3a:	9307      	strlt	r3, [sp, #28]
 8007b3c:	bfb8      	it	lt
 8007b3e:	9204      	strlt	r2, [sp, #16]
 8007b40:	7823      	ldrb	r3, [r4, #0]
 8007b42:	2b2e      	cmp	r3, #46	; 0x2e
 8007b44:	d10c      	bne.n	8007b60 <_svfiprintf_r+0x130>
 8007b46:	7863      	ldrb	r3, [r4, #1]
 8007b48:	2b2a      	cmp	r3, #42	; 0x2a
 8007b4a:	d135      	bne.n	8007bb8 <_svfiprintf_r+0x188>
 8007b4c:	9b03      	ldr	r3, [sp, #12]
 8007b4e:	1d1a      	adds	r2, r3, #4
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	9203      	str	r2, [sp, #12]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	bfb8      	it	lt
 8007b58:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b5c:	3402      	adds	r4, #2
 8007b5e:	9305      	str	r3, [sp, #20]
 8007b60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c2c <_svfiprintf_r+0x1fc>
 8007b64:	7821      	ldrb	r1, [r4, #0]
 8007b66:	2203      	movs	r2, #3
 8007b68:	4650      	mov	r0, sl
 8007b6a:	f7f8 fb39 	bl	80001e0 <memchr>
 8007b6e:	b140      	cbz	r0, 8007b82 <_svfiprintf_r+0x152>
 8007b70:	2340      	movs	r3, #64	; 0x40
 8007b72:	eba0 000a 	sub.w	r0, r0, sl
 8007b76:	fa03 f000 	lsl.w	r0, r3, r0
 8007b7a:	9b04      	ldr	r3, [sp, #16]
 8007b7c:	4303      	orrs	r3, r0
 8007b7e:	3401      	adds	r4, #1
 8007b80:	9304      	str	r3, [sp, #16]
 8007b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b86:	4826      	ldr	r0, [pc, #152]	; (8007c20 <_svfiprintf_r+0x1f0>)
 8007b88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b8c:	2206      	movs	r2, #6
 8007b8e:	f7f8 fb27 	bl	80001e0 <memchr>
 8007b92:	2800      	cmp	r0, #0
 8007b94:	d038      	beq.n	8007c08 <_svfiprintf_r+0x1d8>
 8007b96:	4b23      	ldr	r3, [pc, #140]	; (8007c24 <_svfiprintf_r+0x1f4>)
 8007b98:	bb1b      	cbnz	r3, 8007be2 <_svfiprintf_r+0x1b2>
 8007b9a:	9b03      	ldr	r3, [sp, #12]
 8007b9c:	3307      	adds	r3, #7
 8007b9e:	f023 0307 	bic.w	r3, r3, #7
 8007ba2:	3308      	adds	r3, #8
 8007ba4:	9303      	str	r3, [sp, #12]
 8007ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba8:	4433      	add	r3, r6
 8007baa:	9309      	str	r3, [sp, #36]	; 0x24
 8007bac:	e767      	b.n	8007a7e <_svfiprintf_r+0x4e>
 8007bae:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bb2:	460c      	mov	r4, r1
 8007bb4:	2001      	movs	r0, #1
 8007bb6:	e7a5      	b.n	8007b04 <_svfiprintf_r+0xd4>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	3401      	adds	r4, #1
 8007bbc:	9305      	str	r3, [sp, #20]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	f04f 0c0a 	mov.w	ip, #10
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bca:	3a30      	subs	r2, #48	; 0x30
 8007bcc:	2a09      	cmp	r2, #9
 8007bce:	d903      	bls.n	8007bd8 <_svfiprintf_r+0x1a8>
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d0c5      	beq.n	8007b60 <_svfiprintf_r+0x130>
 8007bd4:	9105      	str	r1, [sp, #20]
 8007bd6:	e7c3      	b.n	8007b60 <_svfiprintf_r+0x130>
 8007bd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bdc:	4604      	mov	r4, r0
 8007bde:	2301      	movs	r3, #1
 8007be0:	e7f0      	b.n	8007bc4 <_svfiprintf_r+0x194>
 8007be2:	ab03      	add	r3, sp, #12
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	462a      	mov	r2, r5
 8007be8:	4b0f      	ldr	r3, [pc, #60]	; (8007c28 <_svfiprintf_r+0x1f8>)
 8007bea:	a904      	add	r1, sp, #16
 8007bec:	4638      	mov	r0, r7
 8007bee:	f7fd fff9 	bl	8005be4 <_printf_float>
 8007bf2:	1c42      	adds	r2, r0, #1
 8007bf4:	4606      	mov	r6, r0
 8007bf6:	d1d6      	bne.n	8007ba6 <_svfiprintf_r+0x176>
 8007bf8:	89ab      	ldrh	r3, [r5, #12]
 8007bfa:	065b      	lsls	r3, r3, #25
 8007bfc:	f53f af2c 	bmi.w	8007a58 <_svfiprintf_r+0x28>
 8007c00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c02:	b01d      	add	sp, #116	; 0x74
 8007c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c08:	ab03      	add	r3, sp, #12
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	462a      	mov	r2, r5
 8007c0e:	4b06      	ldr	r3, [pc, #24]	; (8007c28 <_svfiprintf_r+0x1f8>)
 8007c10:	a904      	add	r1, sp, #16
 8007c12:	4638      	mov	r0, r7
 8007c14:	f7fe fa8a 	bl	800612c <_printf_i>
 8007c18:	e7eb      	b.n	8007bf2 <_svfiprintf_r+0x1c2>
 8007c1a:	bf00      	nop
 8007c1c:	08008c24 	.word	0x08008c24
 8007c20:	08008c2e 	.word	0x08008c2e
 8007c24:	08005be5 	.word	0x08005be5
 8007c28:	08007979 	.word	0x08007979
 8007c2c:	08008c2a 	.word	0x08008c2a

08007c30 <_sbrk_r>:
 8007c30:	b538      	push	{r3, r4, r5, lr}
 8007c32:	4d06      	ldr	r5, [pc, #24]	; (8007c4c <_sbrk_r+0x1c>)
 8007c34:	2300      	movs	r3, #0
 8007c36:	4604      	mov	r4, r0
 8007c38:	4608      	mov	r0, r1
 8007c3a:	602b      	str	r3, [r5, #0]
 8007c3c:	f7fa fa0a 	bl	8002054 <_sbrk>
 8007c40:	1c43      	adds	r3, r0, #1
 8007c42:	d102      	bne.n	8007c4a <_sbrk_r+0x1a>
 8007c44:	682b      	ldr	r3, [r5, #0]
 8007c46:	b103      	cbz	r3, 8007c4a <_sbrk_r+0x1a>
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	bd38      	pop	{r3, r4, r5, pc}
 8007c4c:	20000588 	.word	0x20000588

08007c50 <__assert_func>:
 8007c50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c52:	4614      	mov	r4, r2
 8007c54:	461a      	mov	r2, r3
 8007c56:	4b09      	ldr	r3, [pc, #36]	; (8007c7c <__assert_func+0x2c>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	68d8      	ldr	r0, [r3, #12]
 8007c5e:	b14c      	cbz	r4, 8007c74 <__assert_func+0x24>
 8007c60:	4b07      	ldr	r3, [pc, #28]	; (8007c80 <__assert_func+0x30>)
 8007c62:	9100      	str	r1, [sp, #0]
 8007c64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c68:	4906      	ldr	r1, [pc, #24]	; (8007c84 <__assert_func+0x34>)
 8007c6a:	462b      	mov	r3, r5
 8007c6c:	f000 f80e 	bl	8007c8c <fiprintf>
 8007c70:	f000 faa4 	bl	80081bc <abort>
 8007c74:	4b04      	ldr	r3, [pc, #16]	; (8007c88 <__assert_func+0x38>)
 8007c76:	461c      	mov	r4, r3
 8007c78:	e7f3      	b.n	8007c62 <__assert_func+0x12>
 8007c7a:	bf00      	nop
 8007c7c:	20000020 	.word	0x20000020
 8007c80:	08008c35 	.word	0x08008c35
 8007c84:	08008c42 	.word	0x08008c42
 8007c88:	08008c70 	.word	0x08008c70

08007c8c <fiprintf>:
 8007c8c:	b40e      	push	{r1, r2, r3}
 8007c8e:	b503      	push	{r0, r1, lr}
 8007c90:	4601      	mov	r1, r0
 8007c92:	ab03      	add	r3, sp, #12
 8007c94:	4805      	ldr	r0, [pc, #20]	; (8007cac <fiprintf+0x20>)
 8007c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c9a:	6800      	ldr	r0, [r0, #0]
 8007c9c:	9301      	str	r3, [sp, #4]
 8007c9e:	f000 f88f 	bl	8007dc0 <_vfiprintf_r>
 8007ca2:	b002      	add	sp, #8
 8007ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ca8:	b003      	add	sp, #12
 8007caa:	4770      	bx	lr
 8007cac:	20000020 	.word	0x20000020

08007cb0 <__ascii_mbtowc>:
 8007cb0:	b082      	sub	sp, #8
 8007cb2:	b901      	cbnz	r1, 8007cb6 <__ascii_mbtowc+0x6>
 8007cb4:	a901      	add	r1, sp, #4
 8007cb6:	b142      	cbz	r2, 8007cca <__ascii_mbtowc+0x1a>
 8007cb8:	b14b      	cbz	r3, 8007cce <__ascii_mbtowc+0x1e>
 8007cba:	7813      	ldrb	r3, [r2, #0]
 8007cbc:	600b      	str	r3, [r1, #0]
 8007cbe:	7812      	ldrb	r2, [r2, #0]
 8007cc0:	1e10      	subs	r0, r2, #0
 8007cc2:	bf18      	it	ne
 8007cc4:	2001      	movne	r0, #1
 8007cc6:	b002      	add	sp, #8
 8007cc8:	4770      	bx	lr
 8007cca:	4610      	mov	r0, r2
 8007ccc:	e7fb      	b.n	8007cc6 <__ascii_mbtowc+0x16>
 8007cce:	f06f 0001 	mvn.w	r0, #1
 8007cd2:	e7f8      	b.n	8007cc6 <__ascii_mbtowc+0x16>

08007cd4 <memmove>:
 8007cd4:	4288      	cmp	r0, r1
 8007cd6:	b510      	push	{r4, lr}
 8007cd8:	eb01 0402 	add.w	r4, r1, r2
 8007cdc:	d902      	bls.n	8007ce4 <memmove+0x10>
 8007cde:	4284      	cmp	r4, r0
 8007ce0:	4623      	mov	r3, r4
 8007ce2:	d807      	bhi.n	8007cf4 <memmove+0x20>
 8007ce4:	1e43      	subs	r3, r0, #1
 8007ce6:	42a1      	cmp	r1, r4
 8007ce8:	d008      	beq.n	8007cfc <memmove+0x28>
 8007cea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cf2:	e7f8      	b.n	8007ce6 <memmove+0x12>
 8007cf4:	4402      	add	r2, r0
 8007cf6:	4601      	mov	r1, r0
 8007cf8:	428a      	cmp	r2, r1
 8007cfa:	d100      	bne.n	8007cfe <memmove+0x2a>
 8007cfc:	bd10      	pop	{r4, pc}
 8007cfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d06:	e7f7      	b.n	8007cf8 <memmove+0x24>

08007d08 <__malloc_lock>:
 8007d08:	4801      	ldr	r0, [pc, #4]	; (8007d10 <__malloc_lock+0x8>)
 8007d0a:	f000 bc17 	b.w	800853c <__retarget_lock_acquire_recursive>
 8007d0e:	bf00      	nop
 8007d10:	20000590 	.word	0x20000590

08007d14 <__malloc_unlock>:
 8007d14:	4801      	ldr	r0, [pc, #4]	; (8007d1c <__malloc_unlock+0x8>)
 8007d16:	f000 bc12 	b.w	800853e <__retarget_lock_release_recursive>
 8007d1a:	bf00      	nop
 8007d1c:	20000590 	.word	0x20000590

08007d20 <_realloc_r>:
 8007d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d22:	4607      	mov	r7, r0
 8007d24:	4614      	mov	r4, r2
 8007d26:	460e      	mov	r6, r1
 8007d28:	b921      	cbnz	r1, 8007d34 <_realloc_r+0x14>
 8007d2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d2e:	4611      	mov	r1, r2
 8007d30:	f7ff bdc8 	b.w	80078c4 <_malloc_r>
 8007d34:	b922      	cbnz	r2, 8007d40 <_realloc_r+0x20>
 8007d36:	f7ff fd75 	bl	8007824 <_free_r>
 8007d3a:	4625      	mov	r5, r4
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d40:	f000 fc62 	bl	8008608 <_malloc_usable_size_r>
 8007d44:	42a0      	cmp	r0, r4
 8007d46:	d20f      	bcs.n	8007d68 <_realloc_r+0x48>
 8007d48:	4621      	mov	r1, r4
 8007d4a:	4638      	mov	r0, r7
 8007d4c:	f7ff fdba 	bl	80078c4 <_malloc_r>
 8007d50:	4605      	mov	r5, r0
 8007d52:	2800      	cmp	r0, #0
 8007d54:	d0f2      	beq.n	8007d3c <_realloc_r+0x1c>
 8007d56:	4631      	mov	r1, r6
 8007d58:	4622      	mov	r2, r4
 8007d5a:	f7fd fe8d 	bl	8005a78 <memcpy>
 8007d5e:	4631      	mov	r1, r6
 8007d60:	4638      	mov	r0, r7
 8007d62:	f7ff fd5f 	bl	8007824 <_free_r>
 8007d66:	e7e9      	b.n	8007d3c <_realloc_r+0x1c>
 8007d68:	4635      	mov	r5, r6
 8007d6a:	e7e7      	b.n	8007d3c <_realloc_r+0x1c>

08007d6c <__sfputc_r>:
 8007d6c:	6893      	ldr	r3, [r2, #8]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	b410      	push	{r4}
 8007d74:	6093      	str	r3, [r2, #8]
 8007d76:	da08      	bge.n	8007d8a <__sfputc_r+0x1e>
 8007d78:	6994      	ldr	r4, [r2, #24]
 8007d7a:	42a3      	cmp	r3, r4
 8007d7c:	db01      	blt.n	8007d82 <__sfputc_r+0x16>
 8007d7e:	290a      	cmp	r1, #10
 8007d80:	d103      	bne.n	8007d8a <__sfputc_r+0x1e>
 8007d82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d86:	f000 b94b 	b.w	8008020 <__swbuf_r>
 8007d8a:	6813      	ldr	r3, [r2, #0]
 8007d8c:	1c58      	adds	r0, r3, #1
 8007d8e:	6010      	str	r0, [r2, #0]
 8007d90:	7019      	strb	r1, [r3, #0]
 8007d92:	4608      	mov	r0, r1
 8007d94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <__sfputs_r>:
 8007d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9c:	4606      	mov	r6, r0
 8007d9e:	460f      	mov	r7, r1
 8007da0:	4614      	mov	r4, r2
 8007da2:	18d5      	adds	r5, r2, r3
 8007da4:	42ac      	cmp	r4, r5
 8007da6:	d101      	bne.n	8007dac <__sfputs_r+0x12>
 8007da8:	2000      	movs	r0, #0
 8007daa:	e007      	b.n	8007dbc <__sfputs_r+0x22>
 8007dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007db0:	463a      	mov	r2, r7
 8007db2:	4630      	mov	r0, r6
 8007db4:	f7ff ffda 	bl	8007d6c <__sfputc_r>
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d1f3      	bne.n	8007da4 <__sfputs_r+0xa>
 8007dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007dc0 <_vfiprintf_r>:
 8007dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc4:	460d      	mov	r5, r1
 8007dc6:	b09d      	sub	sp, #116	; 0x74
 8007dc8:	4614      	mov	r4, r2
 8007dca:	4698      	mov	r8, r3
 8007dcc:	4606      	mov	r6, r0
 8007dce:	b118      	cbz	r0, 8007dd8 <_vfiprintf_r+0x18>
 8007dd0:	6983      	ldr	r3, [r0, #24]
 8007dd2:	b90b      	cbnz	r3, 8007dd8 <_vfiprintf_r+0x18>
 8007dd4:	f000 fb14 	bl	8008400 <__sinit>
 8007dd8:	4b89      	ldr	r3, [pc, #548]	; (8008000 <_vfiprintf_r+0x240>)
 8007dda:	429d      	cmp	r5, r3
 8007ddc:	d11b      	bne.n	8007e16 <_vfiprintf_r+0x56>
 8007dde:	6875      	ldr	r5, [r6, #4]
 8007de0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007de2:	07d9      	lsls	r1, r3, #31
 8007de4:	d405      	bmi.n	8007df2 <_vfiprintf_r+0x32>
 8007de6:	89ab      	ldrh	r3, [r5, #12]
 8007de8:	059a      	lsls	r2, r3, #22
 8007dea:	d402      	bmi.n	8007df2 <_vfiprintf_r+0x32>
 8007dec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dee:	f000 fba5 	bl	800853c <__retarget_lock_acquire_recursive>
 8007df2:	89ab      	ldrh	r3, [r5, #12]
 8007df4:	071b      	lsls	r3, r3, #28
 8007df6:	d501      	bpl.n	8007dfc <_vfiprintf_r+0x3c>
 8007df8:	692b      	ldr	r3, [r5, #16]
 8007dfa:	b9eb      	cbnz	r3, 8007e38 <_vfiprintf_r+0x78>
 8007dfc:	4629      	mov	r1, r5
 8007dfe:	4630      	mov	r0, r6
 8007e00:	f000 f96e 	bl	80080e0 <__swsetup_r>
 8007e04:	b1c0      	cbz	r0, 8007e38 <_vfiprintf_r+0x78>
 8007e06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e08:	07dc      	lsls	r4, r3, #31
 8007e0a:	d50e      	bpl.n	8007e2a <_vfiprintf_r+0x6a>
 8007e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e10:	b01d      	add	sp, #116	; 0x74
 8007e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e16:	4b7b      	ldr	r3, [pc, #492]	; (8008004 <_vfiprintf_r+0x244>)
 8007e18:	429d      	cmp	r5, r3
 8007e1a:	d101      	bne.n	8007e20 <_vfiprintf_r+0x60>
 8007e1c:	68b5      	ldr	r5, [r6, #8]
 8007e1e:	e7df      	b.n	8007de0 <_vfiprintf_r+0x20>
 8007e20:	4b79      	ldr	r3, [pc, #484]	; (8008008 <_vfiprintf_r+0x248>)
 8007e22:	429d      	cmp	r5, r3
 8007e24:	bf08      	it	eq
 8007e26:	68f5      	ldreq	r5, [r6, #12]
 8007e28:	e7da      	b.n	8007de0 <_vfiprintf_r+0x20>
 8007e2a:	89ab      	ldrh	r3, [r5, #12]
 8007e2c:	0598      	lsls	r0, r3, #22
 8007e2e:	d4ed      	bmi.n	8007e0c <_vfiprintf_r+0x4c>
 8007e30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e32:	f000 fb84 	bl	800853e <__retarget_lock_release_recursive>
 8007e36:	e7e9      	b.n	8007e0c <_vfiprintf_r+0x4c>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e3c:	2320      	movs	r3, #32
 8007e3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e42:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e46:	2330      	movs	r3, #48	; 0x30
 8007e48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800800c <_vfiprintf_r+0x24c>
 8007e4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e50:	f04f 0901 	mov.w	r9, #1
 8007e54:	4623      	mov	r3, r4
 8007e56:	469a      	mov	sl, r3
 8007e58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e5c:	b10a      	cbz	r2, 8007e62 <_vfiprintf_r+0xa2>
 8007e5e:	2a25      	cmp	r2, #37	; 0x25
 8007e60:	d1f9      	bne.n	8007e56 <_vfiprintf_r+0x96>
 8007e62:	ebba 0b04 	subs.w	fp, sl, r4
 8007e66:	d00b      	beq.n	8007e80 <_vfiprintf_r+0xc0>
 8007e68:	465b      	mov	r3, fp
 8007e6a:	4622      	mov	r2, r4
 8007e6c:	4629      	mov	r1, r5
 8007e6e:	4630      	mov	r0, r6
 8007e70:	f7ff ff93 	bl	8007d9a <__sfputs_r>
 8007e74:	3001      	adds	r0, #1
 8007e76:	f000 80aa 	beq.w	8007fce <_vfiprintf_r+0x20e>
 8007e7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e7c:	445a      	add	r2, fp
 8007e7e:	9209      	str	r2, [sp, #36]	; 0x24
 8007e80:	f89a 3000 	ldrb.w	r3, [sl]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 80a2 	beq.w	8007fce <_vfiprintf_r+0x20e>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e94:	f10a 0a01 	add.w	sl, sl, #1
 8007e98:	9304      	str	r3, [sp, #16]
 8007e9a:	9307      	str	r3, [sp, #28]
 8007e9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ea0:	931a      	str	r3, [sp, #104]	; 0x68
 8007ea2:	4654      	mov	r4, sl
 8007ea4:	2205      	movs	r2, #5
 8007ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eaa:	4858      	ldr	r0, [pc, #352]	; (800800c <_vfiprintf_r+0x24c>)
 8007eac:	f7f8 f998 	bl	80001e0 <memchr>
 8007eb0:	9a04      	ldr	r2, [sp, #16]
 8007eb2:	b9d8      	cbnz	r0, 8007eec <_vfiprintf_r+0x12c>
 8007eb4:	06d1      	lsls	r1, r2, #27
 8007eb6:	bf44      	itt	mi
 8007eb8:	2320      	movmi	r3, #32
 8007eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ebe:	0713      	lsls	r3, r2, #28
 8007ec0:	bf44      	itt	mi
 8007ec2:	232b      	movmi	r3, #43	; 0x2b
 8007ec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8007ecc:	2b2a      	cmp	r3, #42	; 0x2a
 8007ece:	d015      	beq.n	8007efc <_vfiprintf_r+0x13c>
 8007ed0:	9a07      	ldr	r2, [sp, #28]
 8007ed2:	4654      	mov	r4, sl
 8007ed4:	2000      	movs	r0, #0
 8007ed6:	f04f 0c0a 	mov.w	ip, #10
 8007eda:	4621      	mov	r1, r4
 8007edc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ee0:	3b30      	subs	r3, #48	; 0x30
 8007ee2:	2b09      	cmp	r3, #9
 8007ee4:	d94e      	bls.n	8007f84 <_vfiprintf_r+0x1c4>
 8007ee6:	b1b0      	cbz	r0, 8007f16 <_vfiprintf_r+0x156>
 8007ee8:	9207      	str	r2, [sp, #28]
 8007eea:	e014      	b.n	8007f16 <_vfiprintf_r+0x156>
 8007eec:	eba0 0308 	sub.w	r3, r0, r8
 8007ef0:	fa09 f303 	lsl.w	r3, r9, r3
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	9304      	str	r3, [sp, #16]
 8007ef8:	46a2      	mov	sl, r4
 8007efa:	e7d2      	b.n	8007ea2 <_vfiprintf_r+0xe2>
 8007efc:	9b03      	ldr	r3, [sp, #12]
 8007efe:	1d19      	adds	r1, r3, #4
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	9103      	str	r1, [sp, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	bfbb      	ittet	lt
 8007f08:	425b      	neglt	r3, r3
 8007f0a:	f042 0202 	orrlt.w	r2, r2, #2
 8007f0e:	9307      	strge	r3, [sp, #28]
 8007f10:	9307      	strlt	r3, [sp, #28]
 8007f12:	bfb8      	it	lt
 8007f14:	9204      	strlt	r2, [sp, #16]
 8007f16:	7823      	ldrb	r3, [r4, #0]
 8007f18:	2b2e      	cmp	r3, #46	; 0x2e
 8007f1a:	d10c      	bne.n	8007f36 <_vfiprintf_r+0x176>
 8007f1c:	7863      	ldrb	r3, [r4, #1]
 8007f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f20:	d135      	bne.n	8007f8e <_vfiprintf_r+0x1ce>
 8007f22:	9b03      	ldr	r3, [sp, #12]
 8007f24:	1d1a      	adds	r2, r3, #4
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	9203      	str	r2, [sp, #12]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	bfb8      	it	lt
 8007f2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f32:	3402      	adds	r4, #2
 8007f34:	9305      	str	r3, [sp, #20]
 8007f36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800801c <_vfiprintf_r+0x25c>
 8007f3a:	7821      	ldrb	r1, [r4, #0]
 8007f3c:	2203      	movs	r2, #3
 8007f3e:	4650      	mov	r0, sl
 8007f40:	f7f8 f94e 	bl	80001e0 <memchr>
 8007f44:	b140      	cbz	r0, 8007f58 <_vfiprintf_r+0x198>
 8007f46:	2340      	movs	r3, #64	; 0x40
 8007f48:	eba0 000a 	sub.w	r0, r0, sl
 8007f4c:	fa03 f000 	lsl.w	r0, r3, r0
 8007f50:	9b04      	ldr	r3, [sp, #16]
 8007f52:	4303      	orrs	r3, r0
 8007f54:	3401      	adds	r4, #1
 8007f56:	9304      	str	r3, [sp, #16]
 8007f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f5c:	482c      	ldr	r0, [pc, #176]	; (8008010 <_vfiprintf_r+0x250>)
 8007f5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f62:	2206      	movs	r2, #6
 8007f64:	f7f8 f93c 	bl	80001e0 <memchr>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d03f      	beq.n	8007fec <_vfiprintf_r+0x22c>
 8007f6c:	4b29      	ldr	r3, [pc, #164]	; (8008014 <_vfiprintf_r+0x254>)
 8007f6e:	bb1b      	cbnz	r3, 8007fb8 <_vfiprintf_r+0x1f8>
 8007f70:	9b03      	ldr	r3, [sp, #12]
 8007f72:	3307      	adds	r3, #7
 8007f74:	f023 0307 	bic.w	r3, r3, #7
 8007f78:	3308      	adds	r3, #8
 8007f7a:	9303      	str	r3, [sp, #12]
 8007f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f7e:	443b      	add	r3, r7
 8007f80:	9309      	str	r3, [sp, #36]	; 0x24
 8007f82:	e767      	b.n	8007e54 <_vfiprintf_r+0x94>
 8007f84:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f88:	460c      	mov	r4, r1
 8007f8a:	2001      	movs	r0, #1
 8007f8c:	e7a5      	b.n	8007eda <_vfiprintf_r+0x11a>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	3401      	adds	r4, #1
 8007f92:	9305      	str	r3, [sp, #20]
 8007f94:	4619      	mov	r1, r3
 8007f96:	f04f 0c0a 	mov.w	ip, #10
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fa0:	3a30      	subs	r2, #48	; 0x30
 8007fa2:	2a09      	cmp	r2, #9
 8007fa4:	d903      	bls.n	8007fae <_vfiprintf_r+0x1ee>
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d0c5      	beq.n	8007f36 <_vfiprintf_r+0x176>
 8007faa:	9105      	str	r1, [sp, #20]
 8007fac:	e7c3      	b.n	8007f36 <_vfiprintf_r+0x176>
 8007fae:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e7f0      	b.n	8007f9a <_vfiprintf_r+0x1da>
 8007fb8:	ab03      	add	r3, sp, #12
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	462a      	mov	r2, r5
 8007fbe:	4b16      	ldr	r3, [pc, #88]	; (8008018 <_vfiprintf_r+0x258>)
 8007fc0:	a904      	add	r1, sp, #16
 8007fc2:	4630      	mov	r0, r6
 8007fc4:	f7fd fe0e 	bl	8005be4 <_printf_float>
 8007fc8:	4607      	mov	r7, r0
 8007fca:	1c78      	adds	r0, r7, #1
 8007fcc:	d1d6      	bne.n	8007f7c <_vfiprintf_r+0x1bc>
 8007fce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fd0:	07d9      	lsls	r1, r3, #31
 8007fd2:	d405      	bmi.n	8007fe0 <_vfiprintf_r+0x220>
 8007fd4:	89ab      	ldrh	r3, [r5, #12]
 8007fd6:	059a      	lsls	r2, r3, #22
 8007fd8:	d402      	bmi.n	8007fe0 <_vfiprintf_r+0x220>
 8007fda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fdc:	f000 faaf 	bl	800853e <__retarget_lock_release_recursive>
 8007fe0:	89ab      	ldrh	r3, [r5, #12]
 8007fe2:	065b      	lsls	r3, r3, #25
 8007fe4:	f53f af12 	bmi.w	8007e0c <_vfiprintf_r+0x4c>
 8007fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fea:	e711      	b.n	8007e10 <_vfiprintf_r+0x50>
 8007fec:	ab03      	add	r3, sp, #12
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	462a      	mov	r2, r5
 8007ff2:	4b09      	ldr	r3, [pc, #36]	; (8008018 <_vfiprintf_r+0x258>)
 8007ff4:	a904      	add	r1, sp, #16
 8007ff6:	4630      	mov	r0, r6
 8007ff8:	f7fe f898 	bl	800612c <_printf_i>
 8007ffc:	e7e4      	b.n	8007fc8 <_vfiprintf_r+0x208>
 8007ffe:	bf00      	nop
 8008000:	08008d9c 	.word	0x08008d9c
 8008004:	08008dbc 	.word	0x08008dbc
 8008008:	08008d7c 	.word	0x08008d7c
 800800c:	08008c24 	.word	0x08008c24
 8008010:	08008c2e 	.word	0x08008c2e
 8008014:	08005be5 	.word	0x08005be5
 8008018:	08007d9b 	.word	0x08007d9b
 800801c:	08008c2a 	.word	0x08008c2a

08008020 <__swbuf_r>:
 8008020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008022:	460e      	mov	r6, r1
 8008024:	4614      	mov	r4, r2
 8008026:	4605      	mov	r5, r0
 8008028:	b118      	cbz	r0, 8008032 <__swbuf_r+0x12>
 800802a:	6983      	ldr	r3, [r0, #24]
 800802c:	b90b      	cbnz	r3, 8008032 <__swbuf_r+0x12>
 800802e:	f000 f9e7 	bl	8008400 <__sinit>
 8008032:	4b21      	ldr	r3, [pc, #132]	; (80080b8 <__swbuf_r+0x98>)
 8008034:	429c      	cmp	r4, r3
 8008036:	d12b      	bne.n	8008090 <__swbuf_r+0x70>
 8008038:	686c      	ldr	r4, [r5, #4]
 800803a:	69a3      	ldr	r3, [r4, #24]
 800803c:	60a3      	str	r3, [r4, #8]
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	071a      	lsls	r2, r3, #28
 8008042:	d52f      	bpl.n	80080a4 <__swbuf_r+0x84>
 8008044:	6923      	ldr	r3, [r4, #16]
 8008046:	b36b      	cbz	r3, 80080a4 <__swbuf_r+0x84>
 8008048:	6923      	ldr	r3, [r4, #16]
 800804a:	6820      	ldr	r0, [r4, #0]
 800804c:	1ac0      	subs	r0, r0, r3
 800804e:	6963      	ldr	r3, [r4, #20]
 8008050:	b2f6      	uxtb	r6, r6
 8008052:	4283      	cmp	r3, r0
 8008054:	4637      	mov	r7, r6
 8008056:	dc04      	bgt.n	8008062 <__swbuf_r+0x42>
 8008058:	4621      	mov	r1, r4
 800805a:	4628      	mov	r0, r5
 800805c:	f000 f93c 	bl	80082d8 <_fflush_r>
 8008060:	bb30      	cbnz	r0, 80080b0 <__swbuf_r+0x90>
 8008062:	68a3      	ldr	r3, [r4, #8]
 8008064:	3b01      	subs	r3, #1
 8008066:	60a3      	str	r3, [r4, #8]
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	1c5a      	adds	r2, r3, #1
 800806c:	6022      	str	r2, [r4, #0]
 800806e:	701e      	strb	r6, [r3, #0]
 8008070:	6963      	ldr	r3, [r4, #20]
 8008072:	3001      	adds	r0, #1
 8008074:	4283      	cmp	r3, r0
 8008076:	d004      	beq.n	8008082 <__swbuf_r+0x62>
 8008078:	89a3      	ldrh	r3, [r4, #12]
 800807a:	07db      	lsls	r3, r3, #31
 800807c:	d506      	bpl.n	800808c <__swbuf_r+0x6c>
 800807e:	2e0a      	cmp	r6, #10
 8008080:	d104      	bne.n	800808c <__swbuf_r+0x6c>
 8008082:	4621      	mov	r1, r4
 8008084:	4628      	mov	r0, r5
 8008086:	f000 f927 	bl	80082d8 <_fflush_r>
 800808a:	b988      	cbnz	r0, 80080b0 <__swbuf_r+0x90>
 800808c:	4638      	mov	r0, r7
 800808e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008090:	4b0a      	ldr	r3, [pc, #40]	; (80080bc <__swbuf_r+0x9c>)
 8008092:	429c      	cmp	r4, r3
 8008094:	d101      	bne.n	800809a <__swbuf_r+0x7a>
 8008096:	68ac      	ldr	r4, [r5, #8]
 8008098:	e7cf      	b.n	800803a <__swbuf_r+0x1a>
 800809a:	4b09      	ldr	r3, [pc, #36]	; (80080c0 <__swbuf_r+0xa0>)
 800809c:	429c      	cmp	r4, r3
 800809e:	bf08      	it	eq
 80080a0:	68ec      	ldreq	r4, [r5, #12]
 80080a2:	e7ca      	b.n	800803a <__swbuf_r+0x1a>
 80080a4:	4621      	mov	r1, r4
 80080a6:	4628      	mov	r0, r5
 80080a8:	f000 f81a 	bl	80080e0 <__swsetup_r>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d0cb      	beq.n	8008048 <__swbuf_r+0x28>
 80080b0:	f04f 37ff 	mov.w	r7, #4294967295
 80080b4:	e7ea      	b.n	800808c <__swbuf_r+0x6c>
 80080b6:	bf00      	nop
 80080b8:	08008d9c 	.word	0x08008d9c
 80080bc:	08008dbc 	.word	0x08008dbc
 80080c0:	08008d7c 	.word	0x08008d7c

080080c4 <__ascii_wctomb>:
 80080c4:	b149      	cbz	r1, 80080da <__ascii_wctomb+0x16>
 80080c6:	2aff      	cmp	r2, #255	; 0xff
 80080c8:	bf85      	ittet	hi
 80080ca:	238a      	movhi	r3, #138	; 0x8a
 80080cc:	6003      	strhi	r3, [r0, #0]
 80080ce:	700a      	strbls	r2, [r1, #0]
 80080d0:	f04f 30ff 	movhi.w	r0, #4294967295
 80080d4:	bf98      	it	ls
 80080d6:	2001      	movls	r0, #1
 80080d8:	4770      	bx	lr
 80080da:	4608      	mov	r0, r1
 80080dc:	4770      	bx	lr
	...

080080e0 <__swsetup_r>:
 80080e0:	4b32      	ldr	r3, [pc, #200]	; (80081ac <__swsetup_r+0xcc>)
 80080e2:	b570      	push	{r4, r5, r6, lr}
 80080e4:	681d      	ldr	r5, [r3, #0]
 80080e6:	4606      	mov	r6, r0
 80080e8:	460c      	mov	r4, r1
 80080ea:	b125      	cbz	r5, 80080f6 <__swsetup_r+0x16>
 80080ec:	69ab      	ldr	r3, [r5, #24]
 80080ee:	b913      	cbnz	r3, 80080f6 <__swsetup_r+0x16>
 80080f0:	4628      	mov	r0, r5
 80080f2:	f000 f985 	bl	8008400 <__sinit>
 80080f6:	4b2e      	ldr	r3, [pc, #184]	; (80081b0 <__swsetup_r+0xd0>)
 80080f8:	429c      	cmp	r4, r3
 80080fa:	d10f      	bne.n	800811c <__swsetup_r+0x3c>
 80080fc:	686c      	ldr	r4, [r5, #4]
 80080fe:	89a3      	ldrh	r3, [r4, #12]
 8008100:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008104:	0719      	lsls	r1, r3, #28
 8008106:	d42c      	bmi.n	8008162 <__swsetup_r+0x82>
 8008108:	06dd      	lsls	r5, r3, #27
 800810a:	d411      	bmi.n	8008130 <__swsetup_r+0x50>
 800810c:	2309      	movs	r3, #9
 800810e:	6033      	str	r3, [r6, #0]
 8008110:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008114:	81a3      	strh	r3, [r4, #12]
 8008116:	f04f 30ff 	mov.w	r0, #4294967295
 800811a:	e03e      	b.n	800819a <__swsetup_r+0xba>
 800811c:	4b25      	ldr	r3, [pc, #148]	; (80081b4 <__swsetup_r+0xd4>)
 800811e:	429c      	cmp	r4, r3
 8008120:	d101      	bne.n	8008126 <__swsetup_r+0x46>
 8008122:	68ac      	ldr	r4, [r5, #8]
 8008124:	e7eb      	b.n	80080fe <__swsetup_r+0x1e>
 8008126:	4b24      	ldr	r3, [pc, #144]	; (80081b8 <__swsetup_r+0xd8>)
 8008128:	429c      	cmp	r4, r3
 800812a:	bf08      	it	eq
 800812c:	68ec      	ldreq	r4, [r5, #12]
 800812e:	e7e6      	b.n	80080fe <__swsetup_r+0x1e>
 8008130:	0758      	lsls	r0, r3, #29
 8008132:	d512      	bpl.n	800815a <__swsetup_r+0x7a>
 8008134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008136:	b141      	cbz	r1, 800814a <__swsetup_r+0x6a>
 8008138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800813c:	4299      	cmp	r1, r3
 800813e:	d002      	beq.n	8008146 <__swsetup_r+0x66>
 8008140:	4630      	mov	r0, r6
 8008142:	f7ff fb6f 	bl	8007824 <_free_r>
 8008146:	2300      	movs	r3, #0
 8008148:	6363      	str	r3, [r4, #52]	; 0x34
 800814a:	89a3      	ldrh	r3, [r4, #12]
 800814c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008150:	81a3      	strh	r3, [r4, #12]
 8008152:	2300      	movs	r3, #0
 8008154:	6063      	str	r3, [r4, #4]
 8008156:	6923      	ldr	r3, [r4, #16]
 8008158:	6023      	str	r3, [r4, #0]
 800815a:	89a3      	ldrh	r3, [r4, #12]
 800815c:	f043 0308 	orr.w	r3, r3, #8
 8008160:	81a3      	strh	r3, [r4, #12]
 8008162:	6923      	ldr	r3, [r4, #16]
 8008164:	b94b      	cbnz	r3, 800817a <__swsetup_r+0x9a>
 8008166:	89a3      	ldrh	r3, [r4, #12]
 8008168:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800816c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008170:	d003      	beq.n	800817a <__swsetup_r+0x9a>
 8008172:	4621      	mov	r1, r4
 8008174:	4630      	mov	r0, r6
 8008176:	f000 fa07 	bl	8008588 <__smakebuf_r>
 800817a:	89a0      	ldrh	r0, [r4, #12]
 800817c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008180:	f010 0301 	ands.w	r3, r0, #1
 8008184:	d00a      	beq.n	800819c <__swsetup_r+0xbc>
 8008186:	2300      	movs	r3, #0
 8008188:	60a3      	str	r3, [r4, #8]
 800818a:	6963      	ldr	r3, [r4, #20]
 800818c:	425b      	negs	r3, r3
 800818e:	61a3      	str	r3, [r4, #24]
 8008190:	6923      	ldr	r3, [r4, #16]
 8008192:	b943      	cbnz	r3, 80081a6 <__swsetup_r+0xc6>
 8008194:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008198:	d1ba      	bne.n	8008110 <__swsetup_r+0x30>
 800819a:	bd70      	pop	{r4, r5, r6, pc}
 800819c:	0781      	lsls	r1, r0, #30
 800819e:	bf58      	it	pl
 80081a0:	6963      	ldrpl	r3, [r4, #20]
 80081a2:	60a3      	str	r3, [r4, #8]
 80081a4:	e7f4      	b.n	8008190 <__swsetup_r+0xb0>
 80081a6:	2000      	movs	r0, #0
 80081a8:	e7f7      	b.n	800819a <__swsetup_r+0xba>
 80081aa:	bf00      	nop
 80081ac:	20000020 	.word	0x20000020
 80081b0:	08008d9c 	.word	0x08008d9c
 80081b4:	08008dbc 	.word	0x08008dbc
 80081b8:	08008d7c 	.word	0x08008d7c

080081bc <abort>:
 80081bc:	b508      	push	{r3, lr}
 80081be:	2006      	movs	r0, #6
 80081c0:	f000 fa52 	bl	8008668 <raise>
 80081c4:	2001      	movs	r0, #1
 80081c6:	f7f9 fecd 	bl	8001f64 <_exit>
	...

080081cc <__sflush_r>:
 80081cc:	898a      	ldrh	r2, [r1, #12]
 80081ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d2:	4605      	mov	r5, r0
 80081d4:	0710      	lsls	r0, r2, #28
 80081d6:	460c      	mov	r4, r1
 80081d8:	d458      	bmi.n	800828c <__sflush_r+0xc0>
 80081da:	684b      	ldr	r3, [r1, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	dc05      	bgt.n	80081ec <__sflush_r+0x20>
 80081e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	dc02      	bgt.n	80081ec <__sflush_r+0x20>
 80081e6:	2000      	movs	r0, #0
 80081e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081ee:	2e00      	cmp	r6, #0
 80081f0:	d0f9      	beq.n	80081e6 <__sflush_r+0x1a>
 80081f2:	2300      	movs	r3, #0
 80081f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081f8:	682f      	ldr	r7, [r5, #0]
 80081fa:	602b      	str	r3, [r5, #0]
 80081fc:	d032      	beq.n	8008264 <__sflush_r+0x98>
 80081fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008200:	89a3      	ldrh	r3, [r4, #12]
 8008202:	075a      	lsls	r2, r3, #29
 8008204:	d505      	bpl.n	8008212 <__sflush_r+0x46>
 8008206:	6863      	ldr	r3, [r4, #4]
 8008208:	1ac0      	subs	r0, r0, r3
 800820a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800820c:	b10b      	cbz	r3, 8008212 <__sflush_r+0x46>
 800820e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008210:	1ac0      	subs	r0, r0, r3
 8008212:	2300      	movs	r3, #0
 8008214:	4602      	mov	r2, r0
 8008216:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008218:	6a21      	ldr	r1, [r4, #32]
 800821a:	4628      	mov	r0, r5
 800821c:	47b0      	blx	r6
 800821e:	1c43      	adds	r3, r0, #1
 8008220:	89a3      	ldrh	r3, [r4, #12]
 8008222:	d106      	bne.n	8008232 <__sflush_r+0x66>
 8008224:	6829      	ldr	r1, [r5, #0]
 8008226:	291d      	cmp	r1, #29
 8008228:	d82c      	bhi.n	8008284 <__sflush_r+0xb8>
 800822a:	4a2a      	ldr	r2, [pc, #168]	; (80082d4 <__sflush_r+0x108>)
 800822c:	40ca      	lsrs	r2, r1
 800822e:	07d6      	lsls	r6, r2, #31
 8008230:	d528      	bpl.n	8008284 <__sflush_r+0xb8>
 8008232:	2200      	movs	r2, #0
 8008234:	6062      	str	r2, [r4, #4]
 8008236:	04d9      	lsls	r1, r3, #19
 8008238:	6922      	ldr	r2, [r4, #16]
 800823a:	6022      	str	r2, [r4, #0]
 800823c:	d504      	bpl.n	8008248 <__sflush_r+0x7c>
 800823e:	1c42      	adds	r2, r0, #1
 8008240:	d101      	bne.n	8008246 <__sflush_r+0x7a>
 8008242:	682b      	ldr	r3, [r5, #0]
 8008244:	b903      	cbnz	r3, 8008248 <__sflush_r+0x7c>
 8008246:	6560      	str	r0, [r4, #84]	; 0x54
 8008248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800824a:	602f      	str	r7, [r5, #0]
 800824c:	2900      	cmp	r1, #0
 800824e:	d0ca      	beq.n	80081e6 <__sflush_r+0x1a>
 8008250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008254:	4299      	cmp	r1, r3
 8008256:	d002      	beq.n	800825e <__sflush_r+0x92>
 8008258:	4628      	mov	r0, r5
 800825a:	f7ff fae3 	bl	8007824 <_free_r>
 800825e:	2000      	movs	r0, #0
 8008260:	6360      	str	r0, [r4, #52]	; 0x34
 8008262:	e7c1      	b.n	80081e8 <__sflush_r+0x1c>
 8008264:	6a21      	ldr	r1, [r4, #32]
 8008266:	2301      	movs	r3, #1
 8008268:	4628      	mov	r0, r5
 800826a:	47b0      	blx	r6
 800826c:	1c41      	adds	r1, r0, #1
 800826e:	d1c7      	bne.n	8008200 <__sflush_r+0x34>
 8008270:	682b      	ldr	r3, [r5, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d0c4      	beq.n	8008200 <__sflush_r+0x34>
 8008276:	2b1d      	cmp	r3, #29
 8008278:	d001      	beq.n	800827e <__sflush_r+0xb2>
 800827a:	2b16      	cmp	r3, #22
 800827c:	d101      	bne.n	8008282 <__sflush_r+0xb6>
 800827e:	602f      	str	r7, [r5, #0]
 8008280:	e7b1      	b.n	80081e6 <__sflush_r+0x1a>
 8008282:	89a3      	ldrh	r3, [r4, #12]
 8008284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008288:	81a3      	strh	r3, [r4, #12]
 800828a:	e7ad      	b.n	80081e8 <__sflush_r+0x1c>
 800828c:	690f      	ldr	r7, [r1, #16]
 800828e:	2f00      	cmp	r7, #0
 8008290:	d0a9      	beq.n	80081e6 <__sflush_r+0x1a>
 8008292:	0793      	lsls	r3, r2, #30
 8008294:	680e      	ldr	r6, [r1, #0]
 8008296:	bf08      	it	eq
 8008298:	694b      	ldreq	r3, [r1, #20]
 800829a:	600f      	str	r7, [r1, #0]
 800829c:	bf18      	it	ne
 800829e:	2300      	movne	r3, #0
 80082a0:	eba6 0807 	sub.w	r8, r6, r7
 80082a4:	608b      	str	r3, [r1, #8]
 80082a6:	f1b8 0f00 	cmp.w	r8, #0
 80082aa:	dd9c      	ble.n	80081e6 <__sflush_r+0x1a>
 80082ac:	6a21      	ldr	r1, [r4, #32]
 80082ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082b0:	4643      	mov	r3, r8
 80082b2:	463a      	mov	r2, r7
 80082b4:	4628      	mov	r0, r5
 80082b6:	47b0      	blx	r6
 80082b8:	2800      	cmp	r0, #0
 80082ba:	dc06      	bgt.n	80082ca <__sflush_r+0xfe>
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082c2:	81a3      	strh	r3, [r4, #12]
 80082c4:	f04f 30ff 	mov.w	r0, #4294967295
 80082c8:	e78e      	b.n	80081e8 <__sflush_r+0x1c>
 80082ca:	4407      	add	r7, r0
 80082cc:	eba8 0800 	sub.w	r8, r8, r0
 80082d0:	e7e9      	b.n	80082a6 <__sflush_r+0xda>
 80082d2:	bf00      	nop
 80082d4:	20400001 	.word	0x20400001

080082d8 <_fflush_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	690b      	ldr	r3, [r1, #16]
 80082dc:	4605      	mov	r5, r0
 80082de:	460c      	mov	r4, r1
 80082e0:	b913      	cbnz	r3, 80082e8 <_fflush_r+0x10>
 80082e2:	2500      	movs	r5, #0
 80082e4:	4628      	mov	r0, r5
 80082e6:	bd38      	pop	{r3, r4, r5, pc}
 80082e8:	b118      	cbz	r0, 80082f2 <_fflush_r+0x1a>
 80082ea:	6983      	ldr	r3, [r0, #24]
 80082ec:	b90b      	cbnz	r3, 80082f2 <_fflush_r+0x1a>
 80082ee:	f000 f887 	bl	8008400 <__sinit>
 80082f2:	4b14      	ldr	r3, [pc, #80]	; (8008344 <_fflush_r+0x6c>)
 80082f4:	429c      	cmp	r4, r3
 80082f6:	d11b      	bne.n	8008330 <_fflush_r+0x58>
 80082f8:	686c      	ldr	r4, [r5, #4]
 80082fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d0ef      	beq.n	80082e2 <_fflush_r+0xa>
 8008302:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008304:	07d0      	lsls	r0, r2, #31
 8008306:	d404      	bmi.n	8008312 <_fflush_r+0x3a>
 8008308:	0599      	lsls	r1, r3, #22
 800830a:	d402      	bmi.n	8008312 <_fflush_r+0x3a>
 800830c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800830e:	f000 f915 	bl	800853c <__retarget_lock_acquire_recursive>
 8008312:	4628      	mov	r0, r5
 8008314:	4621      	mov	r1, r4
 8008316:	f7ff ff59 	bl	80081cc <__sflush_r>
 800831a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800831c:	07da      	lsls	r2, r3, #31
 800831e:	4605      	mov	r5, r0
 8008320:	d4e0      	bmi.n	80082e4 <_fflush_r+0xc>
 8008322:	89a3      	ldrh	r3, [r4, #12]
 8008324:	059b      	lsls	r3, r3, #22
 8008326:	d4dd      	bmi.n	80082e4 <_fflush_r+0xc>
 8008328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800832a:	f000 f908 	bl	800853e <__retarget_lock_release_recursive>
 800832e:	e7d9      	b.n	80082e4 <_fflush_r+0xc>
 8008330:	4b05      	ldr	r3, [pc, #20]	; (8008348 <_fflush_r+0x70>)
 8008332:	429c      	cmp	r4, r3
 8008334:	d101      	bne.n	800833a <_fflush_r+0x62>
 8008336:	68ac      	ldr	r4, [r5, #8]
 8008338:	e7df      	b.n	80082fa <_fflush_r+0x22>
 800833a:	4b04      	ldr	r3, [pc, #16]	; (800834c <_fflush_r+0x74>)
 800833c:	429c      	cmp	r4, r3
 800833e:	bf08      	it	eq
 8008340:	68ec      	ldreq	r4, [r5, #12]
 8008342:	e7da      	b.n	80082fa <_fflush_r+0x22>
 8008344:	08008d9c 	.word	0x08008d9c
 8008348:	08008dbc 	.word	0x08008dbc
 800834c:	08008d7c 	.word	0x08008d7c

08008350 <std>:
 8008350:	2300      	movs	r3, #0
 8008352:	b510      	push	{r4, lr}
 8008354:	4604      	mov	r4, r0
 8008356:	e9c0 3300 	strd	r3, r3, [r0]
 800835a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800835e:	6083      	str	r3, [r0, #8]
 8008360:	8181      	strh	r1, [r0, #12]
 8008362:	6643      	str	r3, [r0, #100]	; 0x64
 8008364:	81c2      	strh	r2, [r0, #14]
 8008366:	6183      	str	r3, [r0, #24]
 8008368:	4619      	mov	r1, r3
 800836a:	2208      	movs	r2, #8
 800836c:	305c      	adds	r0, #92	; 0x5c
 800836e:	f7fd fb91 	bl	8005a94 <memset>
 8008372:	4b05      	ldr	r3, [pc, #20]	; (8008388 <std+0x38>)
 8008374:	6263      	str	r3, [r4, #36]	; 0x24
 8008376:	4b05      	ldr	r3, [pc, #20]	; (800838c <std+0x3c>)
 8008378:	62a3      	str	r3, [r4, #40]	; 0x28
 800837a:	4b05      	ldr	r3, [pc, #20]	; (8008390 <std+0x40>)
 800837c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800837e:	4b05      	ldr	r3, [pc, #20]	; (8008394 <std+0x44>)
 8008380:	6224      	str	r4, [r4, #32]
 8008382:	6323      	str	r3, [r4, #48]	; 0x30
 8008384:	bd10      	pop	{r4, pc}
 8008386:	bf00      	nop
 8008388:	080086a1 	.word	0x080086a1
 800838c:	080086c3 	.word	0x080086c3
 8008390:	080086fb 	.word	0x080086fb
 8008394:	0800871f 	.word	0x0800871f

08008398 <_cleanup_r>:
 8008398:	4901      	ldr	r1, [pc, #4]	; (80083a0 <_cleanup_r+0x8>)
 800839a:	f000 b8af 	b.w	80084fc <_fwalk_reent>
 800839e:	bf00      	nop
 80083a0:	080082d9 	.word	0x080082d9

080083a4 <__sfmoreglue>:
 80083a4:	b570      	push	{r4, r5, r6, lr}
 80083a6:	1e4a      	subs	r2, r1, #1
 80083a8:	2568      	movs	r5, #104	; 0x68
 80083aa:	4355      	muls	r5, r2
 80083ac:	460e      	mov	r6, r1
 80083ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80083b2:	f7ff fa87 	bl	80078c4 <_malloc_r>
 80083b6:	4604      	mov	r4, r0
 80083b8:	b140      	cbz	r0, 80083cc <__sfmoreglue+0x28>
 80083ba:	2100      	movs	r1, #0
 80083bc:	e9c0 1600 	strd	r1, r6, [r0]
 80083c0:	300c      	adds	r0, #12
 80083c2:	60a0      	str	r0, [r4, #8]
 80083c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80083c8:	f7fd fb64 	bl	8005a94 <memset>
 80083cc:	4620      	mov	r0, r4
 80083ce:	bd70      	pop	{r4, r5, r6, pc}

080083d0 <__sfp_lock_acquire>:
 80083d0:	4801      	ldr	r0, [pc, #4]	; (80083d8 <__sfp_lock_acquire+0x8>)
 80083d2:	f000 b8b3 	b.w	800853c <__retarget_lock_acquire_recursive>
 80083d6:	bf00      	nop
 80083d8:	20000594 	.word	0x20000594

080083dc <__sfp_lock_release>:
 80083dc:	4801      	ldr	r0, [pc, #4]	; (80083e4 <__sfp_lock_release+0x8>)
 80083de:	f000 b8ae 	b.w	800853e <__retarget_lock_release_recursive>
 80083e2:	bf00      	nop
 80083e4:	20000594 	.word	0x20000594

080083e8 <__sinit_lock_acquire>:
 80083e8:	4801      	ldr	r0, [pc, #4]	; (80083f0 <__sinit_lock_acquire+0x8>)
 80083ea:	f000 b8a7 	b.w	800853c <__retarget_lock_acquire_recursive>
 80083ee:	bf00      	nop
 80083f0:	2000058f 	.word	0x2000058f

080083f4 <__sinit_lock_release>:
 80083f4:	4801      	ldr	r0, [pc, #4]	; (80083fc <__sinit_lock_release+0x8>)
 80083f6:	f000 b8a2 	b.w	800853e <__retarget_lock_release_recursive>
 80083fa:	bf00      	nop
 80083fc:	2000058f 	.word	0x2000058f

08008400 <__sinit>:
 8008400:	b510      	push	{r4, lr}
 8008402:	4604      	mov	r4, r0
 8008404:	f7ff fff0 	bl	80083e8 <__sinit_lock_acquire>
 8008408:	69a3      	ldr	r3, [r4, #24]
 800840a:	b11b      	cbz	r3, 8008414 <__sinit+0x14>
 800840c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008410:	f7ff bff0 	b.w	80083f4 <__sinit_lock_release>
 8008414:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008418:	6523      	str	r3, [r4, #80]	; 0x50
 800841a:	4b13      	ldr	r3, [pc, #76]	; (8008468 <__sinit+0x68>)
 800841c:	4a13      	ldr	r2, [pc, #76]	; (800846c <__sinit+0x6c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	62a2      	str	r2, [r4, #40]	; 0x28
 8008422:	42a3      	cmp	r3, r4
 8008424:	bf04      	itt	eq
 8008426:	2301      	moveq	r3, #1
 8008428:	61a3      	streq	r3, [r4, #24]
 800842a:	4620      	mov	r0, r4
 800842c:	f000 f820 	bl	8008470 <__sfp>
 8008430:	6060      	str	r0, [r4, #4]
 8008432:	4620      	mov	r0, r4
 8008434:	f000 f81c 	bl	8008470 <__sfp>
 8008438:	60a0      	str	r0, [r4, #8]
 800843a:	4620      	mov	r0, r4
 800843c:	f000 f818 	bl	8008470 <__sfp>
 8008440:	2200      	movs	r2, #0
 8008442:	60e0      	str	r0, [r4, #12]
 8008444:	2104      	movs	r1, #4
 8008446:	6860      	ldr	r0, [r4, #4]
 8008448:	f7ff ff82 	bl	8008350 <std>
 800844c:	68a0      	ldr	r0, [r4, #8]
 800844e:	2201      	movs	r2, #1
 8008450:	2109      	movs	r1, #9
 8008452:	f7ff ff7d 	bl	8008350 <std>
 8008456:	68e0      	ldr	r0, [r4, #12]
 8008458:	2202      	movs	r2, #2
 800845a:	2112      	movs	r1, #18
 800845c:	f7ff ff78 	bl	8008350 <std>
 8008460:	2301      	movs	r3, #1
 8008462:	61a3      	str	r3, [r4, #24]
 8008464:	e7d2      	b.n	800840c <__sinit+0xc>
 8008466:	bf00      	nop
 8008468:	080089f8 	.word	0x080089f8
 800846c:	08008399 	.word	0x08008399

08008470 <__sfp>:
 8008470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008472:	4607      	mov	r7, r0
 8008474:	f7ff ffac 	bl	80083d0 <__sfp_lock_acquire>
 8008478:	4b1e      	ldr	r3, [pc, #120]	; (80084f4 <__sfp+0x84>)
 800847a:	681e      	ldr	r6, [r3, #0]
 800847c:	69b3      	ldr	r3, [r6, #24]
 800847e:	b913      	cbnz	r3, 8008486 <__sfp+0x16>
 8008480:	4630      	mov	r0, r6
 8008482:	f7ff ffbd 	bl	8008400 <__sinit>
 8008486:	3648      	adds	r6, #72	; 0x48
 8008488:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800848c:	3b01      	subs	r3, #1
 800848e:	d503      	bpl.n	8008498 <__sfp+0x28>
 8008490:	6833      	ldr	r3, [r6, #0]
 8008492:	b30b      	cbz	r3, 80084d8 <__sfp+0x68>
 8008494:	6836      	ldr	r6, [r6, #0]
 8008496:	e7f7      	b.n	8008488 <__sfp+0x18>
 8008498:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800849c:	b9d5      	cbnz	r5, 80084d4 <__sfp+0x64>
 800849e:	4b16      	ldr	r3, [pc, #88]	; (80084f8 <__sfp+0x88>)
 80084a0:	60e3      	str	r3, [r4, #12]
 80084a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80084a6:	6665      	str	r5, [r4, #100]	; 0x64
 80084a8:	f000 f847 	bl	800853a <__retarget_lock_init_recursive>
 80084ac:	f7ff ff96 	bl	80083dc <__sfp_lock_release>
 80084b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80084b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80084b8:	6025      	str	r5, [r4, #0]
 80084ba:	61a5      	str	r5, [r4, #24]
 80084bc:	2208      	movs	r2, #8
 80084be:	4629      	mov	r1, r5
 80084c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80084c4:	f7fd fae6 	bl	8005a94 <memset>
 80084c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80084cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80084d0:	4620      	mov	r0, r4
 80084d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084d4:	3468      	adds	r4, #104	; 0x68
 80084d6:	e7d9      	b.n	800848c <__sfp+0x1c>
 80084d8:	2104      	movs	r1, #4
 80084da:	4638      	mov	r0, r7
 80084dc:	f7ff ff62 	bl	80083a4 <__sfmoreglue>
 80084e0:	4604      	mov	r4, r0
 80084e2:	6030      	str	r0, [r6, #0]
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d1d5      	bne.n	8008494 <__sfp+0x24>
 80084e8:	f7ff ff78 	bl	80083dc <__sfp_lock_release>
 80084ec:	230c      	movs	r3, #12
 80084ee:	603b      	str	r3, [r7, #0]
 80084f0:	e7ee      	b.n	80084d0 <__sfp+0x60>
 80084f2:	bf00      	nop
 80084f4:	080089f8 	.word	0x080089f8
 80084f8:	ffff0001 	.word	0xffff0001

080084fc <_fwalk_reent>:
 80084fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008500:	4606      	mov	r6, r0
 8008502:	4688      	mov	r8, r1
 8008504:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008508:	2700      	movs	r7, #0
 800850a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800850e:	f1b9 0901 	subs.w	r9, r9, #1
 8008512:	d505      	bpl.n	8008520 <_fwalk_reent+0x24>
 8008514:	6824      	ldr	r4, [r4, #0]
 8008516:	2c00      	cmp	r4, #0
 8008518:	d1f7      	bne.n	800850a <_fwalk_reent+0xe>
 800851a:	4638      	mov	r0, r7
 800851c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008520:	89ab      	ldrh	r3, [r5, #12]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d907      	bls.n	8008536 <_fwalk_reent+0x3a>
 8008526:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800852a:	3301      	adds	r3, #1
 800852c:	d003      	beq.n	8008536 <_fwalk_reent+0x3a>
 800852e:	4629      	mov	r1, r5
 8008530:	4630      	mov	r0, r6
 8008532:	47c0      	blx	r8
 8008534:	4307      	orrs	r7, r0
 8008536:	3568      	adds	r5, #104	; 0x68
 8008538:	e7e9      	b.n	800850e <_fwalk_reent+0x12>

0800853a <__retarget_lock_init_recursive>:
 800853a:	4770      	bx	lr

0800853c <__retarget_lock_acquire_recursive>:
 800853c:	4770      	bx	lr

0800853e <__retarget_lock_release_recursive>:
 800853e:	4770      	bx	lr

08008540 <__swhatbuf_r>:
 8008540:	b570      	push	{r4, r5, r6, lr}
 8008542:	460e      	mov	r6, r1
 8008544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008548:	2900      	cmp	r1, #0
 800854a:	b096      	sub	sp, #88	; 0x58
 800854c:	4614      	mov	r4, r2
 800854e:	461d      	mov	r5, r3
 8008550:	da07      	bge.n	8008562 <__swhatbuf_r+0x22>
 8008552:	2300      	movs	r3, #0
 8008554:	602b      	str	r3, [r5, #0]
 8008556:	89b3      	ldrh	r3, [r6, #12]
 8008558:	061a      	lsls	r2, r3, #24
 800855a:	d410      	bmi.n	800857e <__swhatbuf_r+0x3e>
 800855c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008560:	e00e      	b.n	8008580 <__swhatbuf_r+0x40>
 8008562:	466a      	mov	r2, sp
 8008564:	f000 f902 	bl	800876c <_fstat_r>
 8008568:	2800      	cmp	r0, #0
 800856a:	dbf2      	blt.n	8008552 <__swhatbuf_r+0x12>
 800856c:	9a01      	ldr	r2, [sp, #4]
 800856e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008572:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008576:	425a      	negs	r2, r3
 8008578:	415a      	adcs	r2, r3
 800857a:	602a      	str	r2, [r5, #0]
 800857c:	e7ee      	b.n	800855c <__swhatbuf_r+0x1c>
 800857e:	2340      	movs	r3, #64	; 0x40
 8008580:	2000      	movs	r0, #0
 8008582:	6023      	str	r3, [r4, #0]
 8008584:	b016      	add	sp, #88	; 0x58
 8008586:	bd70      	pop	{r4, r5, r6, pc}

08008588 <__smakebuf_r>:
 8008588:	898b      	ldrh	r3, [r1, #12]
 800858a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800858c:	079d      	lsls	r5, r3, #30
 800858e:	4606      	mov	r6, r0
 8008590:	460c      	mov	r4, r1
 8008592:	d507      	bpl.n	80085a4 <__smakebuf_r+0x1c>
 8008594:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	6123      	str	r3, [r4, #16]
 800859c:	2301      	movs	r3, #1
 800859e:	6163      	str	r3, [r4, #20]
 80085a0:	b002      	add	sp, #8
 80085a2:	bd70      	pop	{r4, r5, r6, pc}
 80085a4:	ab01      	add	r3, sp, #4
 80085a6:	466a      	mov	r2, sp
 80085a8:	f7ff ffca 	bl	8008540 <__swhatbuf_r>
 80085ac:	9900      	ldr	r1, [sp, #0]
 80085ae:	4605      	mov	r5, r0
 80085b0:	4630      	mov	r0, r6
 80085b2:	f7ff f987 	bl	80078c4 <_malloc_r>
 80085b6:	b948      	cbnz	r0, 80085cc <__smakebuf_r+0x44>
 80085b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085bc:	059a      	lsls	r2, r3, #22
 80085be:	d4ef      	bmi.n	80085a0 <__smakebuf_r+0x18>
 80085c0:	f023 0303 	bic.w	r3, r3, #3
 80085c4:	f043 0302 	orr.w	r3, r3, #2
 80085c8:	81a3      	strh	r3, [r4, #12]
 80085ca:	e7e3      	b.n	8008594 <__smakebuf_r+0xc>
 80085cc:	4b0d      	ldr	r3, [pc, #52]	; (8008604 <__smakebuf_r+0x7c>)
 80085ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80085d0:	89a3      	ldrh	r3, [r4, #12]
 80085d2:	6020      	str	r0, [r4, #0]
 80085d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085d8:	81a3      	strh	r3, [r4, #12]
 80085da:	9b00      	ldr	r3, [sp, #0]
 80085dc:	6163      	str	r3, [r4, #20]
 80085de:	9b01      	ldr	r3, [sp, #4]
 80085e0:	6120      	str	r0, [r4, #16]
 80085e2:	b15b      	cbz	r3, 80085fc <__smakebuf_r+0x74>
 80085e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085e8:	4630      	mov	r0, r6
 80085ea:	f000 f8d1 	bl	8008790 <_isatty_r>
 80085ee:	b128      	cbz	r0, 80085fc <__smakebuf_r+0x74>
 80085f0:	89a3      	ldrh	r3, [r4, #12]
 80085f2:	f023 0303 	bic.w	r3, r3, #3
 80085f6:	f043 0301 	orr.w	r3, r3, #1
 80085fa:	81a3      	strh	r3, [r4, #12]
 80085fc:	89a0      	ldrh	r0, [r4, #12]
 80085fe:	4305      	orrs	r5, r0
 8008600:	81a5      	strh	r5, [r4, #12]
 8008602:	e7cd      	b.n	80085a0 <__smakebuf_r+0x18>
 8008604:	08008399 	.word	0x08008399

08008608 <_malloc_usable_size_r>:
 8008608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800860c:	1f18      	subs	r0, r3, #4
 800860e:	2b00      	cmp	r3, #0
 8008610:	bfbc      	itt	lt
 8008612:	580b      	ldrlt	r3, [r1, r0]
 8008614:	18c0      	addlt	r0, r0, r3
 8008616:	4770      	bx	lr

08008618 <_raise_r>:
 8008618:	291f      	cmp	r1, #31
 800861a:	b538      	push	{r3, r4, r5, lr}
 800861c:	4604      	mov	r4, r0
 800861e:	460d      	mov	r5, r1
 8008620:	d904      	bls.n	800862c <_raise_r+0x14>
 8008622:	2316      	movs	r3, #22
 8008624:	6003      	str	r3, [r0, #0]
 8008626:	f04f 30ff 	mov.w	r0, #4294967295
 800862a:	bd38      	pop	{r3, r4, r5, pc}
 800862c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800862e:	b112      	cbz	r2, 8008636 <_raise_r+0x1e>
 8008630:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008634:	b94b      	cbnz	r3, 800864a <_raise_r+0x32>
 8008636:	4620      	mov	r0, r4
 8008638:	f000 f830 	bl	800869c <_getpid_r>
 800863c:	462a      	mov	r2, r5
 800863e:	4601      	mov	r1, r0
 8008640:	4620      	mov	r0, r4
 8008642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008646:	f000 b817 	b.w	8008678 <_kill_r>
 800864a:	2b01      	cmp	r3, #1
 800864c:	d00a      	beq.n	8008664 <_raise_r+0x4c>
 800864e:	1c59      	adds	r1, r3, #1
 8008650:	d103      	bne.n	800865a <_raise_r+0x42>
 8008652:	2316      	movs	r3, #22
 8008654:	6003      	str	r3, [r0, #0]
 8008656:	2001      	movs	r0, #1
 8008658:	e7e7      	b.n	800862a <_raise_r+0x12>
 800865a:	2400      	movs	r4, #0
 800865c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008660:	4628      	mov	r0, r5
 8008662:	4798      	blx	r3
 8008664:	2000      	movs	r0, #0
 8008666:	e7e0      	b.n	800862a <_raise_r+0x12>

08008668 <raise>:
 8008668:	4b02      	ldr	r3, [pc, #8]	; (8008674 <raise+0xc>)
 800866a:	4601      	mov	r1, r0
 800866c:	6818      	ldr	r0, [r3, #0]
 800866e:	f7ff bfd3 	b.w	8008618 <_raise_r>
 8008672:	bf00      	nop
 8008674:	20000020 	.word	0x20000020

08008678 <_kill_r>:
 8008678:	b538      	push	{r3, r4, r5, lr}
 800867a:	4d07      	ldr	r5, [pc, #28]	; (8008698 <_kill_r+0x20>)
 800867c:	2300      	movs	r3, #0
 800867e:	4604      	mov	r4, r0
 8008680:	4608      	mov	r0, r1
 8008682:	4611      	mov	r1, r2
 8008684:	602b      	str	r3, [r5, #0]
 8008686:	f7f9 fc5d 	bl	8001f44 <_kill>
 800868a:	1c43      	adds	r3, r0, #1
 800868c:	d102      	bne.n	8008694 <_kill_r+0x1c>
 800868e:	682b      	ldr	r3, [r5, #0]
 8008690:	b103      	cbz	r3, 8008694 <_kill_r+0x1c>
 8008692:	6023      	str	r3, [r4, #0]
 8008694:	bd38      	pop	{r3, r4, r5, pc}
 8008696:	bf00      	nop
 8008698:	20000588 	.word	0x20000588

0800869c <_getpid_r>:
 800869c:	f7f9 bc4a 	b.w	8001f34 <_getpid>

080086a0 <__sread>:
 80086a0:	b510      	push	{r4, lr}
 80086a2:	460c      	mov	r4, r1
 80086a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a8:	f000 f894 	bl	80087d4 <_read_r>
 80086ac:	2800      	cmp	r0, #0
 80086ae:	bfab      	itete	ge
 80086b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086b2:	89a3      	ldrhlt	r3, [r4, #12]
 80086b4:	181b      	addge	r3, r3, r0
 80086b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086ba:	bfac      	ite	ge
 80086bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80086be:	81a3      	strhlt	r3, [r4, #12]
 80086c0:	bd10      	pop	{r4, pc}

080086c2 <__swrite>:
 80086c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c6:	461f      	mov	r7, r3
 80086c8:	898b      	ldrh	r3, [r1, #12]
 80086ca:	05db      	lsls	r3, r3, #23
 80086cc:	4605      	mov	r5, r0
 80086ce:	460c      	mov	r4, r1
 80086d0:	4616      	mov	r6, r2
 80086d2:	d505      	bpl.n	80086e0 <__swrite+0x1e>
 80086d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d8:	2302      	movs	r3, #2
 80086da:	2200      	movs	r2, #0
 80086dc:	f000 f868 	bl	80087b0 <_lseek_r>
 80086e0:	89a3      	ldrh	r3, [r4, #12]
 80086e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086ea:	81a3      	strh	r3, [r4, #12]
 80086ec:	4632      	mov	r2, r6
 80086ee:	463b      	mov	r3, r7
 80086f0:	4628      	mov	r0, r5
 80086f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086f6:	f000 b817 	b.w	8008728 <_write_r>

080086fa <__sseek>:
 80086fa:	b510      	push	{r4, lr}
 80086fc:	460c      	mov	r4, r1
 80086fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008702:	f000 f855 	bl	80087b0 <_lseek_r>
 8008706:	1c43      	adds	r3, r0, #1
 8008708:	89a3      	ldrh	r3, [r4, #12]
 800870a:	bf15      	itete	ne
 800870c:	6560      	strne	r0, [r4, #84]	; 0x54
 800870e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008712:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008716:	81a3      	strheq	r3, [r4, #12]
 8008718:	bf18      	it	ne
 800871a:	81a3      	strhne	r3, [r4, #12]
 800871c:	bd10      	pop	{r4, pc}

0800871e <__sclose>:
 800871e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008722:	f000 b813 	b.w	800874c <_close_r>
	...

08008728 <_write_r>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	4d07      	ldr	r5, [pc, #28]	; (8008748 <_write_r+0x20>)
 800872c:	4604      	mov	r4, r0
 800872e:	4608      	mov	r0, r1
 8008730:	4611      	mov	r1, r2
 8008732:	2200      	movs	r2, #0
 8008734:	602a      	str	r2, [r5, #0]
 8008736:	461a      	mov	r2, r3
 8008738:	f7f9 fc3b 	bl	8001fb2 <_write>
 800873c:	1c43      	adds	r3, r0, #1
 800873e:	d102      	bne.n	8008746 <_write_r+0x1e>
 8008740:	682b      	ldr	r3, [r5, #0]
 8008742:	b103      	cbz	r3, 8008746 <_write_r+0x1e>
 8008744:	6023      	str	r3, [r4, #0]
 8008746:	bd38      	pop	{r3, r4, r5, pc}
 8008748:	20000588 	.word	0x20000588

0800874c <_close_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	4d06      	ldr	r5, [pc, #24]	; (8008768 <_close_r+0x1c>)
 8008750:	2300      	movs	r3, #0
 8008752:	4604      	mov	r4, r0
 8008754:	4608      	mov	r0, r1
 8008756:	602b      	str	r3, [r5, #0]
 8008758:	f7f9 fc47 	bl	8001fea <_close>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	d102      	bne.n	8008766 <_close_r+0x1a>
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	b103      	cbz	r3, 8008766 <_close_r+0x1a>
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	bd38      	pop	{r3, r4, r5, pc}
 8008768:	20000588 	.word	0x20000588

0800876c <_fstat_r>:
 800876c:	b538      	push	{r3, r4, r5, lr}
 800876e:	4d07      	ldr	r5, [pc, #28]	; (800878c <_fstat_r+0x20>)
 8008770:	2300      	movs	r3, #0
 8008772:	4604      	mov	r4, r0
 8008774:	4608      	mov	r0, r1
 8008776:	4611      	mov	r1, r2
 8008778:	602b      	str	r3, [r5, #0]
 800877a:	f7f9 fc42 	bl	8002002 <_fstat>
 800877e:	1c43      	adds	r3, r0, #1
 8008780:	d102      	bne.n	8008788 <_fstat_r+0x1c>
 8008782:	682b      	ldr	r3, [r5, #0]
 8008784:	b103      	cbz	r3, 8008788 <_fstat_r+0x1c>
 8008786:	6023      	str	r3, [r4, #0]
 8008788:	bd38      	pop	{r3, r4, r5, pc}
 800878a:	bf00      	nop
 800878c:	20000588 	.word	0x20000588

08008790 <_isatty_r>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	4d06      	ldr	r5, [pc, #24]	; (80087ac <_isatty_r+0x1c>)
 8008794:	2300      	movs	r3, #0
 8008796:	4604      	mov	r4, r0
 8008798:	4608      	mov	r0, r1
 800879a:	602b      	str	r3, [r5, #0]
 800879c:	f7f9 fc41 	bl	8002022 <_isatty>
 80087a0:	1c43      	adds	r3, r0, #1
 80087a2:	d102      	bne.n	80087aa <_isatty_r+0x1a>
 80087a4:	682b      	ldr	r3, [r5, #0]
 80087a6:	b103      	cbz	r3, 80087aa <_isatty_r+0x1a>
 80087a8:	6023      	str	r3, [r4, #0]
 80087aa:	bd38      	pop	{r3, r4, r5, pc}
 80087ac:	20000588 	.word	0x20000588

080087b0 <_lseek_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4d07      	ldr	r5, [pc, #28]	; (80087d0 <_lseek_r+0x20>)
 80087b4:	4604      	mov	r4, r0
 80087b6:	4608      	mov	r0, r1
 80087b8:	4611      	mov	r1, r2
 80087ba:	2200      	movs	r2, #0
 80087bc:	602a      	str	r2, [r5, #0]
 80087be:	461a      	mov	r2, r3
 80087c0:	f7f9 fc3a 	bl	8002038 <_lseek>
 80087c4:	1c43      	adds	r3, r0, #1
 80087c6:	d102      	bne.n	80087ce <_lseek_r+0x1e>
 80087c8:	682b      	ldr	r3, [r5, #0]
 80087ca:	b103      	cbz	r3, 80087ce <_lseek_r+0x1e>
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	bd38      	pop	{r3, r4, r5, pc}
 80087d0:	20000588 	.word	0x20000588

080087d4 <_read_r>:
 80087d4:	b538      	push	{r3, r4, r5, lr}
 80087d6:	4d07      	ldr	r5, [pc, #28]	; (80087f4 <_read_r+0x20>)
 80087d8:	4604      	mov	r4, r0
 80087da:	4608      	mov	r0, r1
 80087dc:	4611      	mov	r1, r2
 80087de:	2200      	movs	r2, #0
 80087e0:	602a      	str	r2, [r5, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	f7f9 fbc8 	bl	8001f78 <_read>
 80087e8:	1c43      	adds	r3, r0, #1
 80087ea:	d102      	bne.n	80087f2 <_read_r+0x1e>
 80087ec:	682b      	ldr	r3, [r5, #0]
 80087ee:	b103      	cbz	r3, 80087f2 <_read_r+0x1e>
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	bd38      	pop	{r3, r4, r5, pc}
 80087f4:	20000588 	.word	0x20000588

080087f8 <_init>:
 80087f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fa:	bf00      	nop
 80087fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087fe:	bc08      	pop	{r3}
 8008800:	469e      	mov	lr, r3
 8008802:	4770      	bx	lr

08008804 <_fini>:
 8008804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008806:	bf00      	nop
 8008808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800880a:	bc08      	pop	{r3}
 800880c:	469e      	mov	lr, r3
 800880e:	4770      	bx	lr
